
First_MicroController.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000320e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000b0  00800060  0000320e  000032a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800110  00800110  00003352  2**0
                  ALLOC
  3 .stab         00003060  00000000  00000000  00003354  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000011fe  00000000  00000000  000063b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000075b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000076f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007862  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000094ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a396  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b144  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b2a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b531  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000bcff  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 ac 0c 	jmp	0x1958	; 0x1958 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 df 0c 	jmp	0x19be	; 0x19be <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e0       	ldi	r30, 0x0E	; 14
      68:	f2 e3       	ldi	r31, 0x32	; 50
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 31       	cpi	r26, 0x10	; 16
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 e1       	ldi	r26, 0x10	; 16
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 31       	cpi	r26, 0x18	; 24
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 3a 17 	call	0x2e74	; 0x2e74 <main>
      8a:	0c 94 05 19 	jmp	0x320a	; 0x320a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 80 18 	jmp	0x3100	; 0x3100 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a8 e0       	ldi	r26, 0x08	; 8
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 9c 18 	jmp	0x3138	; 0x3138 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 8c 18 	jmp	0x3118	; 0x3118 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 a8 18 	jmp	0x3150	; 0x3150 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 8c 18 	jmp	0x3118	; 0x3118 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 a8 18 	jmp	0x3150	; 0x3150 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 80 18 	jmp	0x3100	; 0x3100 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	88 e0       	ldi	r24, 0x08	; 8
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 9c 18 	jmp	0x3138	; 0x3138 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 8c 18 	jmp	0x3118	; 0x3118 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 a8 18 	jmp	0x3150	; 0x3150 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 8c 18 	jmp	0x3118	; 0x3118 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 a8 18 	jmp	0x3150	; 0x3150 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 8c 18 	jmp	0x3118	; 0x3118 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 a8 18 	jmp	0x3150	; 0x3150 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 90 18 	jmp	0x3120	; 0x3120 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 ac 18 	jmp	0x3158	; 0x3158 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <First_Time_Pass>:
 */
# define F_CPU 8000000UL
#include "First_MicroController.h"


uint8 First_Time_Pass(uint8 *ptr){		/*function to get password and send it to the other micro controller in first time only*/
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <First_Time_Pass+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <First_Time_Pass+0x8>
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	9b 83       	std	Y+3, r25	; 0x03
     b54:	8a 83       	std	Y+2, r24	; 0x02
	uint8 PassCheck=1;
     b56:	81 e0       	ldi	r24, 0x01	; 1
     b58:	89 83       	std	Y+1, r24	; 0x01
	LCD_clearScreen();
     b5a:	0e 94 30 17 	call	0x2e60	; 0x2e60 <LCD_clearScreen>
	LCD_displayString("enter new pass");
     b5e:	80 e6       	ldi	r24, 0x60	; 96
     b60:	90 e0       	ldi	r25, 0x00	; 0
     b62:	0e 94 89 16 	call	0x2d12	; 0x2d12 <LCD_displayString>
	LCD_moveCursor(1,0);
     b66:	81 e0       	ldi	r24, 0x01	; 1
     b68:	60 e0       	ldi	r22, 0x00	; 0
     b6a:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <LCD_moveCursor>
	read_write_pass(ptr);
     b6e:	8a 81       	ldd	r24, Y+2	; 0x02
     b70:	9b 81       	ldd	r25, Y+3	; 0x03
     b72:	0e 94 e5 05 	call	0xbca	; 0xbca <read_write_pass>
	LCD_clearScreen();
     b76:	0e 94 30 17 	call	0x2e60	; 0x2e60 <LCD_clearScreen>
	LCD_displayString("enter same pass");
     b7a:	8f e6       	ldi	r24, 0x6F	; 111
     b7c:	90 e0       	ldi	r25, 0x00	; 0
     b7e:	0e 94 89 16 	call	0x2d12	; 0x2d12 <LCD_displayString>
	LCD_moveCursor(1,0);
     b82:	81 e0       	ldi	r24, 0x01	; 1
     b84:	60 e0       	ldi	r22, 0x00	; 0
     b86:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <LCD_moveCursor>
	PassCheck=check_pass(ptr);
     b8a:	8a 81       	ldd	r24, Y+2	; 0x02
     b8c:	9b 81       	ldd	r25, Y+3	; 0x03
     b8e:	0e 94 bc 06 	call	0xd78	; 0xd78 <check_pass>
     b92:	89 83       	std	Y+1, r24	; 0x01
	LCD_clearScreen();
     b94:	0e 94 30 17 	call	0x2e60	; 0x2e60 <LCD_clearScreen>
	if (PassCheck==0){
     b98:	89 81       	ldd	r24, Y+1	; 0x01
     b9a:	88 23       	and	r24, r24
     b9c:	39 f4       	brne	.+14     	; 0xbac <First_Time_Pass+0x66>
		LCD_displayString("Password Saved");
     b9e:	8f e7       	ldi	r24, 0x7F	; 127
     ba0:	90 e0       	ldi	r25, 0x00	; 0
     ba2:	0e 94 89 16 	call	0x2d12	; 0x2d12 <LCD_displayString>
		return TRUE;
     ba6:	81 e0       	ldi	r24, 0x01	; 1
     ba8:	8c 83       	std	Y+4, r24	; 0x04
     baa:	07 c0       	rjmp	.+14     	; 0xbba <First_Time_Pass+0x74>
	}
	else{
		LCD_clearScreen();
     bac:	0e 94 30 17 	call	0x2e60	; 0x2e60 <LCD_clearScreen>
		LCD_displayString("pass not matched");
     bb0:	8e e8       	ldi	r24, 0x8E	; 142
     bb2:	90 e0       	ldi	r25, 0x00	; 0
     bb4:	0e 94 89 16 	call	0x2d12	; 0x2d12 <LCD_displayString>
		return FALSE;
     bb8:	1c 82       	std	Y+4, r1	; 0x04
     bba:	8c 81       	ldd	r24, Y+4	; 0x04
	}

}
     bbc:	0f 90       	pop	r0
     bbe:	0f 90       	pop	r0
     bc0:	0f 90       	pop	r0
     bc2:	0f 90       	pop	r0
     bc4:	cf 91       	pop	r28
     bc6:	df 91       	pop	r29
     bc8:	08 95       	ret

00000bca <read_write_pass>:
void read_write_pass(uint8 *ptr){	/*function to get pass from keypad and save it in string */
     bca:	df 93       	push	r29
     bcc:	cf 93       	push	r28
     bce:	cd b7       	in	r28, 0x3d	; 61
     bd0:	de b7       	in	r29, 0x3e	; 62
     bd2:	62 97       	sbiw	r28, 0x12	; 18
     bd4:	0f b6       	in	r0, 0x3f	; 63
     bd6:	f8 94       	cli
     bd8:	de bf       	out	0x3e, r29	; 62
     bda:	0f be       	out	0x3f, r0	; 63
     bdc:	cd bf       	out	0x3d, r28	; 61
     bde:	9a 8b       	std	Y+18, r25	; 0x12
     be0:	89 8b       	std	Y+17, r24	; 0x11
		uint8 i=0;
     be2:	18 8a       	std	Y+16, r1	; 0x10
		uint8 key;					/*Taking pass from 1 character to 16 character as user decides and presses enter*/

		do{
			key = KEYPAD_getPressedKey(); /* get the pressed key number */
     be4:	0e 94 86 11 	call	0x230c	; 0x230c <KEYPAD_getPressedKey>
     be8:	8f 87       	std	Y+15, r24	; 0x0f
     bea:	80 e0       	ldi	r24, 0x00	; 0
     bec:	90 e0       	ldi	r25, 0x00	; 0
     bee:	a8 ec       	ldi	r26, 0xC8	; 200
     bf0:	b3 e4       	ldi	r27, 0x43	; 67
     bf2:	8b 87       	std	Y+11, r24	; 0x0b
     bf4:	9c 87       	std	Y+12, r25	; 0x0c
     bf6:	ad 87       	std	Y+13, r26	; 0x0d
     bf8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     bfa:	6b 85       	ldd	r22, Y+11	; 0x0b
     bfc:	7c 85       	ldd	r23, Y+12	; 0x0c
     bfe:	8d 85       	ldd	r24, Y+13	; 0x0d
     c00:	9e 85       	ldd	r25, Y+14	; 0x0e
     c02:	20 e0       	ldi	r18, 0x00	; 0
     c04:	30 e0       	ldi	r19, 0x00	; 0
     c06:	4a ef       	ldi	r20, 0xFA	; 250
     c08:	54 e4       	ldi	r21, 0x44	; 68
     c0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c0e:	dc 01       	movw	r26, r24
     c10:	cb 01       	movw	r24, r22
     c12:	8f 83       	std	Y+7, r24	; 0x07
     c14:	98 87       	std	Y+8, r25	; 0x08
     c16:	a9 87       	std	Y+9, r26	; 0x09
     c18:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     c1a:	6f 81       	ldd	r22, Y+7	; 0x07
     c1c:	78 85       	ldd	r23, Y+8	; 0x08
     c1e:	89 85       	ldd	r24, Y+9	; 0x09
     c20:	9a 85       	ldd	r25, Y+10	; 0x0a
     c22:	20 e0       	ldi	r18, 0x00	; 0
     c24:	30 e0       	ldi	r19, 0x00	; 0
     c26:	40 e8       	ldi	r20, 0x80	; 128
     c28:	5f e3       	ldi	r21, 0x3F	; 63
     c2a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     c2e:	88 23       	and	r24, r24
     c30:	2c f4       	brge	.+10     	; 0xc3c <read_write_pass+0x72>
		__ticks = 1;
     c32:	81 e0       	ldi	r24, 0x01	; 1
     c34:	90 e0       	ldi	r25, 0x00	; 0
     c36:	9e 83       	std	Y+6, r25	; 0x06
     c38:	8d 83       	std	Y+5, r24	; 0x05
     c3a:	3f c0       	rjmp	.+126    	; 0xcba <read_write_pass+0xf0>
	else if (__tmp > 65535)
     c3c:	6f 81       	ldd	r22, Y+7	; 0x07
     c3e:	78 85       	ldd	r23, Y+8	; 0x08
     c40:	89 85       	ldd	r24, Y+9	; 0x09
     c42:	9a 85       	ldd	r25, Y+10	; 0x0a
     c44:	20 e0       	ldi	r18, 0x00	; 0
     c46:	3f ef       	ldi	r19, 0xFF	; 255
     c48:	4f e7       	ldi	r20, 0x7F	; 127
     c4a:	57 e4       	ldi	r21, 0x47	; 71
     c4c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     c50:	18 16       	cp	r1, r24
     c52:	4c f5       	brge	.+82     	; 0xca6 <read_write_pass+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c54:	6b 85       	ldd	r22, Y+11	; 0x0b
     c56:	7c 85       	ldd	r23, Y+12	; 0x0c
     c58:	8d 85       	ldd	r24, Y+13	; 0x0d
     c5a:	9e 85       	ldd	r25, Y+14	; 0x0e
     c5c:	20 e0       	ldi	r18, 0x00	; 0
     c5e:	30 e0       	ldi	r19, 0x00	; 0
     c60:	40 e2       	ldi	r20, 0x20	; 32
     c62:	51 e4       	ldi	r21, 0x41	; 65
     c64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c68:	dc 01       	movw	r26, r24
     c6a:	cb 01       	movw	r24, r22
     c6c:	bc 01       	movw	r22, r24
     c6e:	cd 01       	movw	r24, r26
     c70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c74:	dc 01       	movw	r26, r24
     c76:	cb 01       	movw	r24, r22
     c78:	9e 83       	std	Y+6, r25	; 0x06
     c7a:	8d 83       	std	Y+5, r24	; 0x05
     c7c:	0f c0       	rjmp	.+30     	; 0xc9c <read_write_pass+0xd2>
     c7e:	88 ec       	ldi	r24, 0xC8	; 200
     c80:	90 e0       	ldi	r25, 0x00	; 0
     c82:	9c 83       	std	Y+4, r25	; 0x04
     c84:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c86:	8b 81       	ldd	r24, Y+3	; 0x03
     c88:	9c 81       	ldd	r25, Y+4	; 0x04
     c8a:	01 97       	sbiw	r24, 0x01	; 1
     c8c:	f1 f7       	brne	.-4      	; 0xc8a <read_write_pass+0xc0>
     c8e:	9c 83       	std	Y+4, r25	; 0x04
     c90:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c92:	8d 81       	ldd	r24, Y+5	; 0x05
     c94:	9e 81       	ldd	r25, Y+6	; 0x06
     c96:	01 97       	sbiw	r24, 0x01	; 1
     c98:	9e 83       	std	Y+6, r25	; 0x06
     c9a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c9c:	8d 81       	ldd	r24, Y+5	; 0x05
     c9e:	9e 81       	ldd	r25, Y+6	; 0x06
     ca0:	00 97       	sbiw	r24, 0x00	; 0
     ca2:	69 f7       	brne	.-38     	; 0xc7e <read_write_pass+0xb4>
     ca4:	14 c0       	rjmp	.+40     	; 0xcce <read_write_pass+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ca6:	6f 81       	ldd	r22, Y+7	; 0x07
     ca8:	78 85       	ldd	r23, Y+8	; 0x08
     caa:	89 85       	ldd	r24, Y+9	; 0x09
     cac:	9a 85       	ldd	r25, Y+10	; 0x0a
     cae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     cb2:	dc 01       	movw	r26, r24
     cb4:	cb 01       	movw	r24, r22
     cb6:	9e 83       	std	Y+6, r25	; 0x06
     cb8:	8d 83       	std	Y+5, r24	; 0x05
     cba:	8d 81       	ldd	r24, Y+5	; 0x05
     cbc:	9e 81       	ldd	r25, Y+6	; 0x06
     cbe:	9a 83       	std	Y+2, r25	; 0x02
     cc0:	89 83       	std	Y+1, r24	; 0x01
     cc2:	89 81       	ldd	r24, Y+1	; 0x01
     cc4:	9a 81       	ldd	r25, Y+2	; 0x02
     cc6:	01 97       	sbiw	r24, 0x01	; 1
     cc8:	f1 f7       	brne	.-4      	; 0xcc6 <read_write_pass+0xfc>
     cca:	9a 83       	std	Y+2, r25	; 0x02
     ccc:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(400);
			if(i==16){
     cce:	88 89       	ldd	r24, Y+16	; 0x10
     cd0:	80 31       	cpi	r24, 0x10	; 16
     cd2:	a1 f1       	breq	.+104    	; 0xd3c <read_write_pass+0x172>
				break;
			}
			if(((key <= 9) && (key >= 0)) || (key==ENTER))
     cd4:	8f 85       	ldd	r24, Y+15	; 0x0f
     cd6:	8a 30       	cpi	r24, 0x0A	; 10
     cd8:	18 f0       	brcs	.+6      	; 0xce0 <read_write_pass+0x116>
     cda:	8f 85       	ldd	r24, Y+15	; 0x0f
     cdc:	8d 30       	cpi	r24, 0x0D	; 13
     cde:	e1 f4       	brne	.+56     	; 0xd18 <read_write_pass+0x14e>
					{
						if(key==ENTER){
     ce0:	8f 85       	ldd	r24, Y+15	; 0x0f
     ce2:	8d 30       	cpi	r24, 0x0D	; 13
     ce4:	59 f4       	brne	.+22     	; 0xcfc <read_write_pass+0x132>
						*(ptr+i)=key;
     ce6:	88 89       	ldd	r24, Y+16	; 0x10
     ce8:	28 2f       	mov	r18, r24
     cea:	30 e0       	ldi	r19, 0x00	; 0
     cec:	89 89       	ldd	r24, Y+17	; 0x11
     cee:	9a 89       	ldd	r25, Y+18	; 0x12
     cf0:	fc 01       	movw	r30, r24
     cf2:	e2 0f       	add	r30, r18
     cf4:	f3 1f       	adc	r31, r19
     cf6:	8f 85       	ldd	r24, Y+15	; 0x0f
     cf8:	80 83       	st	Z, r24
     cfa:	0e c0       	rjmp	.+28     	; 0xd18 <read_write_pass+0x14e>
							}
						else{
							LCD_displayCharacter('*');	/* display the pressed keypad switch */
     cfc:	8a e2       	ldi	r24, 0x2A	; 42
     cfe:	0e 94 95 14 	call	0x292a	; 0x292a <LCD_displayCharacter>
						*(ptr+i)=key+48;
     d02:	88 89       	ldd	r24, Y+16	; 0x10
     d04:	28 2f       	mov	r18, r24
     d06:	30 e0       	ldi	r19, 0x00	; 0
     d08:	89 89       	ldd	r24, Y+17	; 0x11
     d0a:	9a 89       	ldd	r25, Y+18	; 0x12
     d0c:	fc 01       	movw	r30, r24
     d0e:	e2 0f       	add	r30, r18
     d10:	f3 1f       	adc	r31, r19
     d12:	8f 85       	ldd	r24, Y+15	; 0x0f
     d14:	80 5d       	subi	r24, 0xD0	; 208
     d16:	80 83       	st	Z, r24
						}
					}
			i++;
     d18:	88 89       	ldd	r24, Y+16	; 0x10
     d1a:	8f 5f       	subi	r24, 0xFF	; 255
     d1c:	88 8b       	std	Y+16, r24	; 0x10
		}while(*(ptr+(i-1))!=ENTER);
     d1e:	88 89       	ldd	r24, Y+16	; 0x10
     d20:	88 2f       	mov	r24, r24
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	9c 01       	movw	r18, r24
     d26:	21 50       	subi	r18, 0x01	; 1
     d28:	30 40       	sbci	r19, 0x00	; 0
     d2a:	89 89       	ldd	r24, Y+17	; 0x11
     d2c:	9a 89       	ldd	r25, Y+18	; 0x12
     d2e:	fc 01       	movw	r30, r24
     d30:	e2 0f       	add	r30, r18
     d32:	f3 1f       	adc	r31, r19
     d34:	80 81       	ld	r24, Z
     d36:	8d 30       	cpi	r24, 0x0D	; 13
     d38:	09 f0       	breq	.+2      	; 0xd3c <read_write_pass+0x172>
     d3a:	54 cf       	rjmp	.-344    	; 0xbe4 <read_write_pass+0x1a>

		if(i!=16){
     d3c:	88 89       	ldd	r24, Y+16	; 0x10
     d3e:	80 31       	cpi	r24, 0x10	; 16
     d40:	69 f0       	breq	.+26     	; 0xd5c <read_write_pass+0x192>
			*(ptr+(i-1))=NULL_PTR;
     d42:	88 89       	ldd	r24, Y+16	; 0x10
     d44:	88 2f       	mov	r24, r24
     d46:	90 e0       	ldi	r25, 0x00	; 0
     d48:	9c 01       	movw	r18, r24
     d4a:	21 50       	subi	r18, 0x01	; 1
     d4c:	30 40       	sbci	r19, 0x00	; 0
     d4e:	89 89       	ldd	r24, Y+17	; 0x11
     d50:	9a 89       	ldd	r25, Y+18	; 0x12
     d52:	fc 01       	movw	r30, r24
     d54:	e2 0f       	add	r30, r18
     d56:	f3 1f       	adc	r31, r19
     d58:	10 82       	st	Z, r1
     d5a:	05 c0       	rjmp	.+10     	; 0xd66 <read_write_pass+0x19c>
		}
		else{
			*(ptr+16)=NULL_PTR;
     d5c:	89 89       	ldd	r24, Y+17	; 0x11
     d5e:	9a 89       	ldd	r25, Y+18	; 0x12
     d60:	fc 01       	movw	r30, r24
     d62:	70 96       	adiw	r30, 0x10	; 16
     d64:	10 82       	st	Z, r1
		}
}
     d66:	62 96       	adiw	r28, 0x12	; 18
     d68:	0f b6       	in	r0, 0x3f	; 63
     d6a:	f8 94       	cli
     d6c:	de bf       	out	0x3e, r29	; 62
     d6e:	0f be       	out	0x3f, r0	; 63
     d70:	cd bf       	out	0x3d, r28	; 61
     d72:	cf 91       	pop	r28
     d74:	df 91       	pop	r29
     d76:	08 95       	ret

00000d78 <check_pass>:
uint8 check_pass(uint8 *ptr){	/*function to check pass 1 and pass 2*/
     d78:	df 93       	push	r29
     d7a:	cf 93       	push	r28
     d7c:	cd b7       	in	r28, 0x3d	; 61
     d7e:	de b7       	in	r29, 0x3e	; 62
     d80:	63 97       	sbiw	r28, 0x13	; 19
     d82:	0f b6       	in	r0, 0x3f	; 63
     d84:	f8 94       	cli
     d86:	de bf       	out	0x3e, r29	; 62
     d88:	0f be       	out	0x3f, r0	; 63
     d8a:	cd bf       	out	0x3d, r28	; 61
     d8c:	9b 8b       	std	Y+19, r25	; 0x13
     d8e:	8a 8b       	std	Y+18, r24	; 0x12
	uint8 pass[17];
	read_write_pass(pass);
     d90:	ce 01       	movw	r24, r28
     d92:	01 96       	adiw	r24, 0x01	; 1
     d94:	0e 94 e5 05 	call	0xbca	; 0xbca <read_write_pass>
	return strcmp(ptr,pass);
     d98:	8a 89       	ldd	r24, Y+18	; 0x12
     d9a:	9b 89       	ldd	r25, Y+19	; 0x13
     d9c:	9e 01       	movw	r18, r28
     d9e:	2f 5f       	subi	r18, 0xFF	; 255
     da0:	3f 4f       	sbci	r19, 0xFF	; 255
     da2:	b9 01       	movw	r22, r18
     da4:	0e 94 b7 18 	call	0x316e	; 0x316e <strcmp>
	}
     da8:	63 96       	adiw	r28, 0x13	; 19
     daa:	0f b6       	in	r0, 0x3f	; 63
     dac:	f8 94       	cli
     dae:	de bf       	out	0x3e, r29	; 62
     db0:	0f be       	out	0x3f, r0	; 63
     db2:	cd bf       	out	0x3d, r28	; 61
     db4:	cf 91       	pop	r28
     db6:	df 91       	pop	r29
     db8:	08 95       	ret

00000dba <menu>:

void menu(uint8 *ptr,uint8 *pass_Limit){	/* this is the main menu of the first micro controller*/
     dba:	0f 93       	push	r16
     dbc:	1f 93       	push	r17
     dbe:	df 93       	push	r29
     dc0:	cf 93       	push	r28
     dc2:	cd b7       	in	r28, 0x3d	; 61
     dc4:	de b7       	in	r29, 0x3e	; 62
     dc6:	cd 56       	subi	r28, 0x6D	; 109
     dc8:	d0 40       	sbci	r29, 0x00	; 0
     dca:	0f b6       	in	r0, 0x3f	; 63
     dcc:	f8 94       	cli
     dce:	de bf       	out	0x3e, r29	; 62
     dd0:	0f be       	out	0x3f, r0	; 63
     dd2:	cd bf       	out	0x3d, r28	; 61
     dd4:	fe 01       	movw	r30, r28
     dd6:	ea 59       	subi	r30, 0x9A	; 154
     dd8:	ff 4f       	sbci	r31, 0xFF	; 255
     dda:	91 83       	std	Z+1, r25	; 0x01
     ddc:	80 83       	st	Z, r24
     dde:	fe 01       	movw	r30, r28
     de0:	e8 59       	subi	r30, 0x98	; 152
     de2:	ff 4f       	sbci	r31, 0xFF	; 255
     de4:	71 83       	std	Z+1, r23	; 0x01
     de6:	60 83       	st	Z, r22
	uint8 key;
	uint8 pass_State=0;						/* flag gets 1 if the second micro controler sends correct pass in open door switch case*/
     de8:	fe 01       	movw	r30, r28
     dea:	ec 59       	subi	r30, 0x9C	; 156
     dec:	ff 4f       	sbci	r31, 0xFF	; 255
     dee:	10 82       	st	Z, r1
	uint8 pass_State_1=0;					/* flag gets 1 if the second micro controler sends correct pass in change password switch case*/
     df0:	fe 01       	movw	r30, r28
     df2:	ed 59       	subi	r30, 0x9D	; 157
     df4:	ff 4f       	sbci	r31, 0xFF	; 255
     df6:	10 82       	st	Z, r1
	LCD_clearScreen();
     df8:	0e 94 30 17 	call	0x2e60	; 0x2e60 <LCD_clearScreen>
	LCD_displayString("+: Open Door");
     dfc:	8f e9       	ldi	r24, 0x9F	; 159
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	0e 94 89 16 	call	0x2d12	; 0x2d12 <LCD_displayString>
	LCD_displayStringRowColumn(1,0,"-: Change Pass");
     e04:	2c ea       	ldi	r18, 0xAC	; 172
     e06:	30 e0       	ldi	r19, 0x00	; 0
     e08:	81 e0       	ldi	r24, 0x01	; 1
     e0a:	60 e0       	ldi	r22, 0x00	; 0
     e0c:	a9 01       	movw	r20, r18
     e0e:	0e 94 f4 16 	call	0x2de8	; 0x2de8 <LCD_displayStringRowColumn>
	key = KEYPAD_getPressedKey(); 			/* get the pressed key number */
     e12:	0e 94 86 11 	call	0x230c	; 0x230c <KEYPAD_getPressedKey>
     e16:	fe 01       	movw	r30, r28
     e18:	eb 59       	subi	r30, 0x9B	; 155
     e1a:	ff 4f       	sbci	r31, 0xFF	; 255
     e1c:	80 83       	st	Z, r24
     e1e:	fe 01       	movw	r30, r28
     e20:	e1 5a       	subi	r30, 0xA1	; 161
     e22:	ff 4f       	sbci	r31, 0xFF	; 255
     e24:	80 e0       	ldi	r24, 0x00	; 0
     e26:	90 e0       	ldi	r25, 0x00	; 0
     e28:	a8 ec       	ldi	r26, 0xC8	; 200
     e2a:	b3 e4       	ldi	r27, 0x43	; 67
     e2c:	80 83       	st	Z, r24
     e2e:	91 83       	std	Z+1, r25	; 0x01
     e30:	a2 83       	std	Z+2, r26	; 0x02
     e32:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e34:	8e 01       	movw	r16, r28
     e36:	05 5a       	subi	r16, 0xA5	; 165
     e38:	1f 4f       	sbci	r17, 0xFF	; 255
     e3a:	fe 01       	movw	r30, r28
     e3c:	e1 5a       	subi	r30, 0xA1	; 161
     e3e:	ff 4f       	sbci	r31, 0xFF	; 255
     e40:	60 81       	ld	r22, Z
     e42:	71 81       	ldd	r23, Z+1	; 0x01
     e44:	82 81       	ldd	r24, Z+2	; 0x02
     e46:	93 81       	ldd	r25, Z+3	; 0x03
     e48:	20 e0       	ldi	r18, 0x00	; 0
     e4a:	30 e0       	ldi	r19, 0x00	; 0
     e4c:	4a ef       	ldi	r20, 0xFA	; 250
     e4e:	54 e4       	ldi	r21, 0x44	; 68
     e50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e54:	dc 01       	movw	r26, r24
     e56:	cb 01       	movw	r24, r22
     e58:	f8 01       	movw	r30, r16
     e5a:	80 83       	st	Z, r24
     e5c:	91 83       	std	Z+1, r25	; 0x01
     e5e:	a2 83       	std	Z+2, r26	; 0x02
     e60:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     e62:	fe 01       	movw	r30, r28
     e64:	e5 5a       	subi	r30, 0xA5	; 165
     e66:	ff 4f       	sbci	r31, 0xFF	; 255
     e68:	60 81       	ld	r22, Z
     e6a:	71 81       	ldd	r23, Z+1	; 0x01
     e6c:	82 81       	ldd	r24, Z+2	; 0x02
     e6e:	93 81       	ldd	r25, Z+3	; 0x03
     e70:	20 e0       	ldi	r18, 0x00	; 0
     e72:	30 e0       	ldi	r19, 0x00	; 0
     e74:	40 e8       	ldi	r20, 0x80	; 128
     e76:	5f e3       	ldi	r21, 0x3F	; 63
     e78:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e7c:	88 23       	and	r24, r24
     e7e:	44 f4       	brge	.+16     	; 0xe90 <menu+0xd6>
		__ticks = 1;
     e80:	fe 01       	movw	r30, r28
     e82:	e7 5a       	subi	r30, 0xA7	; 167
     e84:	ff 4f       	sbci	r31, 0xFF	; 255
     e86:	81 e0       	ldi	r24, 0x01	; 1
     e88:	90 e0       	ldi	r25, 0x00	; 0
     e8a:	91 83       	std	Z+1, r25	; 0x01
     e8c:	80 83       	st	Z, r24
     e8e:	64 c0       	rjmp	.+200    	; 0xf58 <menu+0x19e>
	else if (__tmp > 65535)
     e90:	fe 01       	movw	r30, r28
     e92:	e5 5a       	subi	r30, 0xA5	; 165
     e94:	ff 4f       	sbci	r31, 0xFF	; 255
     e96:	60 81       	ld	r22, Z
     e98:	71 81       	ldd	r23, Z+1	; 0x01
     e9a:	82 81       	ldd	r24, Z+2	; 0x02
     e9c:	93 81       	ldd	r25, Z+3	; 0x03
     e9e:	20 e0       	ldi	r18, 0x00	; 0
     ea0:	3f ef       	ldi	r19, 0xFF	; 255
     ea2:	4f e7       	ldi	r20, 0x7F	; 127
     ea4:	57 e4       	ldi	r21, 0x47	; 71
     ea6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     eaa:	18 16       	cp	r1, r24
     eac:	0c f0       	brlt	.+2      	; 0xeb0 <menu+0xf6>
     eae:	43 c0       	rjmp	.+134    	; 0xf36 <menu+0x17c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     eb0:	fe 01       	movw	r30, r28
     eb2:	e1 5a       	subi	r30, 0xA1	; 161
     eb4:	ff 4f       	sbci	r31, 0xFF	; 255
     eb6:	60 81       	ld	r22, Z
     eb8:	71 81       	ldd	r23, Z+1	; 0x01
     eba:	82 81       	ldd	r24, Z+2	; 0x02
     ebc:	93 81       	ldd	r25, Z+3	; 0x03
     ebe:	20 e0       	ldi	r18, 0x00	; 0
     ec0:	30 e0       	ldi	r19, 0x00	; 0
     ec2:	40 e2       	ldi	r20, 0x20	; 32
     ec4:	51 e4       	ldi	r21, 0x41	; 65
     ec6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     eca:	dc 01       	movw	r26, r24
     ecc:	cb 01       	movw	r24, r22
     ece:	8e 01       	movw	r16, r28
     ed0:	07 5a       	subi	r16, 0xA7	; 167
     ed2:	1f 4f       	sbci	r17, 0xFF	; 255
     ed4:	bc 01       	movw	r22, r24
     ed6:	cd 01       	movw	r24, r26
     ed8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     edc:	dc 01       	movw	r26, r24
     ede:	cb 01       	movw	r24, r22
     ee0:	f8 01       	movw	r30, r16
     ee2:	91 83       	std	Z+1, r25	; 0x01
     ee4:	80 83       	st	Z, r24
     ee6:	1f c0       	rjmp	.+62     	; 0xf26 <menu+0x16c>
     ee8:	fe 01       	movw	r30, r28
     eea:	e9 5a       	subi	r30, 0xA9	; 169
     eec:	ff 4f       	sbci	r31, 0xFF	; 255
     eee:	88 ec       	ldi	r24, 0xC8	; 200
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	91 83       	std	Z+1, r25	; 0x01
     ef4:	80 83       	st	Z, r24
     ef6:	fe 01       	movw	r30, r28
     ef8:	e9 5a       	subi	r30, 0xA9	; 169
     efa:	ff 4f       	sbci	r31, 0xFF	; 255
     efc:	80 81       	ld	r24, Z
     efe:	91 81       	ldd	r25, Z+1	; 0x01
     f00:	01 97       	sbiw	r24, 0x01	; 1
     f02:	f1 f7       	brne	.-4      	; 0xf00 <menu+0x146>
     f04:	fe 01       	movw	r30, r28
     f06:	e9 5a       	subi	r30, 0xA9	; 169
     f08:	ff 4f       	sbci	r31, 0xFF	; 255
     f0a:	91 83       	std	Z+1, r25	; 0x01
     f0c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f0e:	de 01       	movw	r26, r28
     f10:	a7 5a       	subi	r26, 0xA7	; 167
     f12:	bf 4f       	sbci	r27, 0xFF	; 255
     f14:	fe 01       	movw	r30, r28
     f16:	e7 5a       	subi	r30, 0xA7	; 167
     f18:	ff 4f       	sbci	r31, 0xFF	; 255
     f1a:	80 81       	ld	r24, Z
     f1c:	91 81       	ldd	r25, Z+1	; 0x01
     f1e:	01 97       	sbiw	r24, 0x01	; 1
     f20:	11 96       	adiw	r26, 0x01	; 1
     f22:	9c 93       	st	X, r25
     f24:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f26:	fe 01       	movw	r30, r28
     f28:	e7 5a       	subi	r30, 0xA7	; 167
     f2a:	ff 4f       	sbci	r31, 0xFF	; 255
     f2c:	80 81       	ld	r24, Z
     f2e:	91 81       	ldd	r25, Z+1	; 0x01
     f30:	00 97       	sbiw	r24, 0x00	; 0
     f32:	d1 f6       	brne	.-76     	; 0xee8 <menu+0x12e>
     f34:	28 c0       	rjmp	.+80     	; 0xf86 <menu+0x1cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f36:	8e 01       	movw	r16, r28
     f38:	07 5a       	subi	r16, 0xA7	; 167
     f3a:	1f 4f       	sbci	r17, 0xFF	; 255
     f3c:	fe 01       	movw	r30, r28
     f3e:	e5 5a       	subi	r30, 0xA5	; 165
     f40:	ff 4f       	sbci	r31, 0xFF	; 255
     f42:	60 81       	ld	r22, Z
     f44:	71 81       	ldd	r23, Z+1	; 0x01
     f46:	82 81       	ldd	r24, Z+2	; 0x02
     f48:	93 81       	ldd	r25, Z+3	; 0x03
     f4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f4e:	dc 01       	movw	r26, r24
     f50:	cb 01       	movw	r24, r22
     f52:	f8 01       	movw	r30, r16
     f54:	91 83       	std	Z+1, r25	; 0x01
     f56:	80 83       	st	Z, r24
     f58:	de 01       	movw	r26, r28
     f5a:	ab 5a       	subi	r26, 0xAB	; 171
     f5c:	bf 4f       	sbci	r27, 0xFF	; 255
     f5e:	fe 01       	movw	r30, r28
     f60:	e7 5a       	subi	r30, 0xA7	; 167
     f62:	ff 4f       	sbci	r31, 0xFF	; 255
     f64:	80 81       	ld	r24, Z
     f66:	91 81       	ldd	r25, Z+1	; 0x01
     f68:	11 96       	adiw	r26, 0x01	; 1
     f6a:	9c 93       	st	X, r25
     f6c:	8e 93       	st	-X, r24
     f6e:	fe 01       	movw	r30, r28
     f70:	eb 5a       	subi	r30, 0xAB	; 171
     f72:	ff 4f       	sbci	r31, 0xFF	; 255
     f74:	80 81       	ld	r24, Z
     f76:	91 81       	ldd	r25, Z+1	; 0x01
     f78:	01 97       	sbiw	r24, 0x01	; 1
     f7a:	f1 f7       	brne	.-4      	; 0xf78 <menu+0x1be>
     f7c:	fe 01       	movw	r30, r28
     f7e:	eb 5a       	subi	r30, 0xAB	; 171
     f80:	ff 4f       	sbci	r31, 0xFF	; 255
     f82:	91 83       	std	Z+1, r25	; 0x01
     f84:	80 83       	st	Z, r24
	_delay_ms(400);
	if(key=='+'){
     f86:	fe 01       	movw	r30, r28
     f88:	eb 59       	subi	r30, 0x9B	; 155
     f8a:	ff 4f       	sbci	r31, 0xFF	; 255
     f8c:	80 81       	ld	r24, Z
     f8e:	8b 32       	cpi	r24, 0x2B	; 43
     f90:	09 f0       	breq	.+2      	; 0xf94 <menu+0x1da>
     f92:	b7 c1       	rjmp	.+878    	; 0x1302 <menu+0x548>
		UART_sendByte(OPEN_DOOR);
     f94:	81 e0       	ldi	r24, 0x01	; 1
     f96:	0e 94 cc 17 	call	0x2f98	; 0x2f98 <UART_sendByte>
		LCD_clearScreen();
     f9a:	0e 94 30 17 	call	0x2e60	; 0x2e60 <LCD_clearScreen>
		LCD_displayString("enter password");
     f9e:	8b eb       	ldi	r24, 0xBB	; 187
     fa0:	90 e0       	ldi	r25, 0x00	; 0
     fa2:	0e 94 89 16 	call	0x2d12	; 0x2d12 <LCD_displayString>
		LCD_moveCursor(1,0);
     fa6:	81 e0       	ldi	r24, 0x01	; 1
     fa8:	60 e0       	ldi	r22, 0x00	; 0
     faa:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <LCD_moveCursor>
		read_write_pass(ptr);
     fae:	fe 01       	movw	r30, r28
     fb0:	ea 59       	subi	r30, 0x9A	; 154
     fb2:	ff 4f       	sbci	r31, 0xFF	; 255
     fb4:	80 81       	ld	r24, Z
     fb6:	91 81       	ldd	r25, Z+1	; 0x01
     fb8:	0e 94 e5 05 	call	0xbca	; 0xbca <read_write_pass>
		Null_to_Hash(ptr);
     fbc:	fe 01       	movw	r30, r28
     fbe:	ea 59       	subi	r30, 0x9A	; 154
     fc0:	ff 4f       	sbci	r31, 0xFF	; 255
     fc2:	80 81       	ld	r24, Z
     fc4:	91 81       	ldd	r25, Z+1	; 0x01
     fc6:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <Null_to_Hash>
		UART_sendString(ptr);
     fca:	fe 01       	movw	r30, r28
     fcc:	ea 59       	subi	r30, 0x9A	; 154
     fce:	ff 4f       	sbci	r31, 0xFF	; 255
     fd0:	80 81       	ld	r24, Z
     fd2:	91 81       	ldd	r25, Z+1	; 0x01
     fd4:	0e 94 f2 17 	call	0x2fe4	; 0x2fe4 <UART_sendString>
     fd8:	fe 01       	movw	r30, r28
     fda:	ef 5a       	subi	r30, 0xAF	; 175
     fdc:	ff 4f       	sbci	r31, 0xFF	; 255
     fde:	80 e0       	ldi	r24, 0x00	; 0
     fe0:	90 e0       	ldi	r25, 0x00	; 0
     fe2:	a8 e4       	ldi	r26, 0x48	; 72
     fe4:	b3 e4       	ldi	r27, 0x43	; 67
     fe6:	80 83       	st	Z, r24
     fe8:	91 83       	std	Z+1, r25	; 0x01
     fea:	a2 83       	std	Z+2, r26	; 0x02
     fec:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fee:	8e 01       	movw	r16, r28
     ff0:	03 5b       	subi	r16, 0xB3	; 179
     ff2:	1f 4f       	sbci	r17, 0xFF	; 255
     ff4:	fe 01       	movw	r30, r28
     ff6:	ef 5a       	subi	r30, 0xAF	; 175
     ff8:	ff 4f       	sbci	r31, 0xFF	; 255
     ffa:	60 81       	ld	r22, Z
     ffc:	71 81       	ldd	r23, Z+1	; 0x01
     ffe:	82 81       	ldd	r24, Z+2	; 0x02
    1000:	93 81       	ldd	r25, Z+3	; 0x03
    1002:	20 e0       	ldi	r18, 0x00	; 0
    1004:	30 e0       	ldi	r19, 0x00	; 0
    1006:	4a ef       	ldi	r20, 0xFA	; 250
    1008:	54 e4       	ldi	r21, 0x44	; 68
    100a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    100e:	dc 01       	movw	r26, r24
    1010:	cb 01       	movw	r24, r22
    1012:	f8 01       	movw	r30, r16
    1014:	80 83       	st	Z, r24
    1016:	91 83       	std	Z+1, r25	; 0x01
    1018:	a2 83       	std	Z+2, r26	; 0x02
    101a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    101c:	fe 01       	movw	r30, r28
    101e:	e3 5b       	subi	r30, 0xB3	; 179
    1020:	ff 4f       	sbci	r31, 0xFF	; 255
    1022:	60 81       	ld	r22, Z
    1024:	71 81       	ldd	r23, Z+1	; 0x01
    1026:	82 81       	ldd	r24, Z+2	; 0x02
    1028:	93 81       	ldd	r25, Z+3	; 0x03
    102a:	20 e0       	ldi	r18, 0x00	; 0
    102c:	30 e0       	ldi	r19, 0x00	; 0
    102e:	40 e8       	ldi	r20, 0x80	; 128
    1030:	5f e3       	ldi	r21, 0x3F	; 63
    1032:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1036:	88 23       	and	r24, r24
    1038:	44 f4       	brge	.+16     	; 0x104a <menu+0x290>
		__ticks = 1;
    103a:	fe 01       	movw	r30, r28
    103c:	e5 5b       	subi	r30, 0xB5	; 181
    103e:	ff 4f       	sbci	r31, 0xFF	; 255
    1040:	81 e0       	ldi	r24, 0x01	; 1
    1042:	90 e0       	ldi	r25, 0x00	; 0
    1044:	91 83       	std	Z+1, r25	; 0x01
    1046:	80 83       	st	Z, r24
    1048:	64 c0       	rjmp	.+200    	; 0x1112 <menu+0x358>
	else if (__tmp > 65535)
    104a:	fe 01       	movw	r30, r28
    104c:	e3 5b       	subi	r30, 0xB3	; 179
    104e:	ff 4f       	sbci	r31, 0xFF	; 255
    1050:	60 81       	ld	r22, Z
    1052:	71 81       	ldd	r23, Z+1	; 0x01
    1054:	82 81       	ldd	r24, Z+2	; 0x02
    1056:	93 81       	ldd	r25, Z+3	; 0x03
    1058:	20 e0       	ldi	r18, 0x00	; 0
    105a:	3f ef       	ldi	r19, 0xFF	; 255
    105c:	4f e7       	ldi	r20, 0x7F	; 127
    105e:	57 e4       	ldi	r21, 0x47	; 71
    1060:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1064:	18 16       	cp	r1, r24
    1066:	0c f0       	brlt	.+2      	; 0x106a <menu+0x2b0>
    1068:	43 c0       	rjmp	.+134    	; 0x10f0 <menu+0x336>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    106a:	fe 01       	movw	r30, r28
    106c:	ef 5a       	subi	r30, 0xAF	; 175
    106e:	ff 4f       	sbci	r31, 0xFF	; 255
    1070:	60 81       	ld	r22, Z
    1072:	71 81       	ldd	r23, Z+1	; 0x01
    1074:	82 81       	ldd	r24, Z+2	; 0x02
    1076:	93 81       	ldd	r25, Z+3	; 0x03
    1078:	20 e0       	ldi	r18, 0x00	; 0
    107a:	30 e0       	ldi	r19, 0x00	; 0
    107c:	40 e2       	ldi	r20, 0x20	; 32
    107e:	51 e4       	ldi	r21, 0x41	; 65
    1080:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1084:	dc 01       	movw	r26, r24
    1086:	cb 01       	movw	r24, r22
    1088:	8e 01       	movw	r16, r28
    108a:	05 5b       	subi	r16, 0xB5	; 181
    108c:	1f 4f       	sbci	r17, 0xFF	; 255
    108e:	bc 01       	movw	r22, r24
    1090:	cd 01       	movw	r24, r26
    1092:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1096:	dc 01       	movw	r26, r24
    1098:	cb 01       	movw	r24, r22
    109a:	f8 01       	movw	r30, r16
    109c:	91 83       	std	Z+1, r25	; 0x01
    109e:	80 83       	st	Z, r24
    10a0:	1f c0       	rjmp	.+62     	; 0x10e0 <menu+0x326>
    10a2:	fe 01       	movw	r30, r28
    10a4:	e7 5b       	subi	r30, 0xB7	; 183
    10a6:	ff 4f       	sbci	r31, 0xFF	; 255
    10a8:	88 ec       	ldi	r24, 0xC8	; 200
    10aa:	90 e0       	ldi	r25, 0x00	; 0
    10ac:	91 83       	std	Z+1, r25	; 0x01
    10ae:	80 83       	st	Z, r24
    10b0:	fe 01       	movw	r30, r28
    10b2:	e7 5b       	subi	r30, 0xB7	; 183
    10b4:	ff 4f       	sbci	r31, 0xFF	; 255
    10b6:	80 81       	ld	r24, Z
    10b8:	91 81       	ldd	r25, Z+1	; 0x01
    10ba:	01 97       	sbiw	r24, 0x01	; 1
    10bc:	f1 f7       	brne	.-4      	; 0x10ba <menu+0x300>
    10be:	fe 01       	movw	r30, r28
    10c0:	e7 5b       	subi	r30, 0xB7	; 183
    10c2:	ff 4f       	sbci	r31, 0xFF	; 255
    10c4:	91 83       	std	Z+1, r25	; 0x01
    10c6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10c8:	de 01       	movw	r26, r28
    10ca:	a5 5b       	subi	r26, 0xB5	; 181
    10cc:	bf 4f       	sbci	r27, 0xFF	; 255
    10ce:	fe 01       	movw	r30, r28
    10d0:	e5 5b       	subi	r30, 0xB5	; 181
    10d2:	ff 4f       	sbci	r31, 0xFF	; 255
    10d4:	80 81       	ld	r24, Z
    10d6:	91 81       	ldd	r25, Z+1	; 0x01
    10d8:	01 97       	sbiw	r24, 0x01	; 1
    10da:	11 96       	adiw	r26, 0x01	; 1
    10dc:	9c 93       	st	X, r25
    10de:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10e0:	fe 01       	movw	r30, r28
    10e2:	e5 5b       	subi	r30, 0xB5	; 181
    10e4:	ff 4f       	sbci	r31, 0xFF	; 255
    10e6:	80 81       	ld	r24, Z
    10e8:	91 81       	ldd	r25, Z+1	; 0x01
    10ea:	00 97       	sbiw	r24, 0x00	; 0
    10ec:	d1 f6       	brne	.-76     	; 0x10a2 <menu+0x2e8>
    10ee:	27 c0       	rjmp	.+78     	; 0x113e <menu+0x384>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10f0:	8e 01       	movw	r16, r28
    10f2:	05 5b       	subi	r16, 0xB5	; 181
    10f4:	1f 4f       	sbci	r17, 0xFF	; 255
    10f6:	fe 01       	movw	r30, r28
    10f8:	e3 5b       	subi	r30, 0xB3	; 179
    10fa:	ff 4f       	sbci	r31, 0xFF	; 255
    10fc:	60 81       	ld	r22, Z
    10fe:	71 81       	ldd	r23, Z+1	; 0x01
    1100:	82 81       	ldd	r24, Z+2	; 0x02
    1102:	93 81       	ldd	r25, Z+3	; 0x03
    1104:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1108:	dc 01       	movw	r26, r24
    110a:	cb 01       	movw	r24, r22
    110c:	f8 01       	movw	r30, r16
    110e:	91 83       	std	Z+1, r25	; 0x01
    1110:	80 83       	st	Z, r24
    1112:	de 01       	movw	r26, r28
    1114:	a9 5b       	subi	r26, 0xB9	; 185
    1116:	bf 4f       	sbci	r27, 0xFF	; 255
    1118:	fe 01       	movw	r30, r28
    111a:	e5 5b       	subi	r30, 0xB5	; 181
    111c:	ff 4f       	sbci	r31, 0xFF	; 255
    111e:	80 81       	ld	r24, Z
    1120:	91 81       	ldd	r25, Z+1	; 0x01
    1122:	8d 93       	st	X+, r24
    1124:	9c 93       	st	X, r25
    1126:	fe 01       	movw	r30, r28
    1128:	e9 5b       	subi	r30, 0xB9	; 185
    112a:	ff 4f       	sbci	r31, 0xFF	; 255
    112c:	80 81       	ld	r24, Z
    112e:	91 81       	ldd	r25, Z+1	; 0x01
    1130:	01 97       	sbiw	r24, 0x01	; 1
    1132:	f1 f7       	brne	.-4      	; 0x1130 <menu+0x376>
    1134:	fe 01       	movw	r30, r28
    1136:	e9 5b       	subi	r30, 0xB9	; 185
    1138:	ff 4f       	sbci	r31, 0xFF	; 255
    113a:	91 83       	std	Z+1, r25	; 0x01
    113c:	80 83       	st	Z, r24
		_delay_ms(200);
		pass_State=UART_recieveByte();
    113e:	0e 94 e3 17 	call	0x2fc6	; 0x2fc6 <UART_recieveByte>
    1142:	fe 01       	movw	r30, r28
    1144:	ec 59       	subi	r30, 0x9C	; 156
    1146:	ff 4f       	sbci	r31, 0xFF	; 255
    1148:	80 83       	st	Z, r24
		switch(pass_State){			/*switch case for pass if it is correct or invalid*/
    114a:	fe 01       	movw	r30, r28
    114c:	ec 59       	subi	r30, 0x9C	; 156
    114e:	ff 4f       	sbci	r31, 0xFF	; 255
    1150:	80 81       	ld	r24, Z
    1152:	28 2f       	mov	r18, r24
    1154:	30 e0       	ldi	r19, 0x00	; 0
    1156:	ae 96       	adiw	r28, 0x2e	; 46
    1158:	3f af       	std	Y+63, r19	; 0x3f
    115a:	2e af       	std	Y+62, r18	; 0x3e
    115c:	ae 97       	sbiw	r28, 0x2e	; 46
    115e:	ae 96       	adiw	r28, 0x2e	; 46
    1160:	8e ad       	ldd	r24, Y+62	; 0x3e
    1162:	9f ad       	ldd	r25, Y+63	; 0x3f
    1164:	ae 97       	sbiw	r28, 0x2e	; 46
    1166:	8a 30       	cpi	r24, 0x0A	; 10
    1168:	91 05       	cpc	r25, r1
    116a:	41 f0       	breq	.+16     	; 0x117c <menu+0x3c2>
    116c:	ae 96       	adiw	r28, 0x2e	; 46
    116e:	ee ad       	ldd	r30, Y+62	; 0x3e
    1170:	ff ad       	ldd	r31, Y+63	; 0x3f
    1172:	ae 97       	sbiw	r28, 0x2e	; 46
    1174:	eb 30       	cpi	r30, 0x0B	; 11
    1176:	f1 05       	cpc	r31, r1
    1178:	e9 f0       	breq	.+58     	; 0x11b4 <menu+0x3fa>
    117a:	19 c3       	rjmp	.+1586   	; 0x17ae <menu+0x9f4>
		case CORRECT_PASS:
			LCD_clearScreen();
    117c:	0e 94 30 17 	call	0x2e60	; 0x2e60 <LCD_clearScreen>
			LCD_displayString("CORRECT PASS");
    1180:	8a ec       	ldi	r24, 0xCA	; 202
    1182:	90 e0       	ldi	r25, 0x00	; 0
    1184:	0e 94 89 16 	call	0x2d12	; 0x2d12 <LCD_displayString>
			LCD_moveCursor(1,0);
    1188:	81 e0       	ldi	r24, 0x01	; 1
    118a:	60 e0       	ldi	r22, 0x00	; 0
    118c:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <LCD_moveCursor>
			LCD_displayString("DOOR UNLOCKED");
    1190:	87 ed       	ldi	r24, 0xD7	; 215
    1192:	90 e0       	ldi	r25, 0x00	; 0
    1194:	0e 94 89 16 	call	0x2d12	; 0x2d12 <LCD_displayString>
			delay_Timer0(250,33);		/*delay function by timer0*/
    1198:	8a ef       	ldi	r24, 0xFA	; 250
    119a:	90 e0       	ldi	r25, 0x00	; 0
    119c:	61 e2       	ldi	r22, 0x21	; 33
    119e:	70 e0       	ldi	r23, 0x00	; 0
    11a0:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <delay_Timer0>
			*pass_Limit=0;				/* reseting pass limiter if the user enter correct pass*/
    11a4:	fe 01       	movw	r30, r28
    11a6:	e8 59       	subi	r30, 0x98	; 152
    11a8:	ff 4f       	sbci	r31, 0xFF	; 255
    11aa:	01 90       	ld	r0, Z+
    11ac:	f0 81       	ld	r31, Z
    11ae:	e0 2d       	mov	r30, r0
    11b0:	10 82       	st	Z, r1
    11b2:	fd c2       	rjmp	.+1530   	; 0x17ae <menu+0x9f4>
			break;

		case INVALID_PASS:
			LCD_clearScreen();
    11b4:	0e 94 30 17 	call	0x2e60	; 0x2e60 <LCD_clearScreen>
			LCD_displayString("INVALID PASS");
    11b8:	85 ee       	ldi	r24, 0xE5	; 229
    11ba:	90 e0       	ldi	r25, 0x00	; 0
    11bc:	0e 94 89 16 	call	0x2d12	; 0x2d12 <LCD_displayString>
			LCD_moveCursor(1,0);
    11c0:	81 e0       	ldi	r24, 0x01	; 1
    11c2:	60 e0       	ldi	r22, 0x00	; 0
    11c4:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <LCD_moveCursor>
			LCD_displayString("DOOR LOCKED");
    11c8:	82 ef       	ldi	r24, 0xF2	; 242
    11ca:	90 e0       	ldi	r25, 0x00	; 0
    11cc:	0e 94 89 16 	call	0x2d12	; 0x2d12 <LCD_displayString>
    11d0:	fe 01       	movw	r30, r28
    11d2:	ed 5b       	subi	r30, 0xBD	; 189
    11d4:	ff 4f       	sbci	r31, 0xFF	; 255
    11d6:	80 e0       	ldi	r24, 0x00	; 0
    11d8:	90 e8       	ldi	r25, 0x80	; 128
    11da:	ab e3       	ldi	r26, 0x3B	; 59
    11dc:	b5 e4       	ldi	r27, 0x45	; 69
    11de:	80 83       	st	Z, r24
    11e0:	91 83       	std	Z+1, r25	; 0x01
    11e2:	a2 83       	std	Z+2, r26	; 0x02
    11e4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11e6:	8e 01       	movw	r16, r28
    11e8:	01 5c       	subi	r16, 0xC1	; 193
    11ea:	1f 4f       	sbci	r17, 0xFF	; 255
    11ec:	fe 01       	movw	r30, r28
    11ee:	ed 5b       	subi	r30, 0xBD	; 189
    11f0:	ff 4f       	sbci	r31, 0xFF	; 255
    11f2:	60 81       	ld	r22, Z
    11f4:	71 81       	ldd	r23, Z+1	; 0x01
    11f6:	82 81       	ldd	r24, Z+2	; 0x02
    11f8:	93 81       	ldd	r25, Z+3	; 0x03
    11fa:	20 e0       	ldi	r18, 0x00	; 0
    11fc:	30 e0       	ldi	r19, 0x00	; 0
    11fe:	4a ef       	ldi	r20, 0xFA	; 250
    1200:	54 e4       	ldi	r21, 0x44	; 68
    1202:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1206:	dc 01       	movw	r26, r24
    1208:	cb 01       	movw	r24, r22
    120a:	f8 01       	movw	r30, r16
    120c:	80 83       	st	Z, r24
    120e:	91 83       	std	Z+1, r25	; 0x01
    1210:	a2 83       	std	Z+2, r26	; 0x02
    1212:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1214:	fe 01       	movw	r30, r28
    1216:	ff 96       	adiw	r30, 0x3f	; 63
    1218:	60 81       	ld	r22, Z
    121a:	71 81       	ldd	r23, Z+1	; 0x01
    121c:	82 81       	ldd	r24, Z+2	; 0x02
    121e:	93 81       	ldd	r25, Z+3	; 0x03
    1220:	20 e0       	ldi	r18, 0x00	; 0
    1222:	30 e0       	ldi	r19, 0x00	; 0
    1224:	40 e8       	ldi	r20, 0x80	; 128
    1226:	5f e3       	ldi	r21, 0x3F	; 63
    1228:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    122c:	88 23       	and	r24, r24
    122e:	2c f4       	brge	.+10     	; 0x123a <menu+0x480>
		__ticks = 1;
    1230:	81 e0       	ldi	r24, 0x01	; 1
    1232:	90 e0       	ldi	r25, 0x00	; 0
    1234:	9e af       	std	Y+62, r25	; 0x3e
    1236:	8d af       	std	Y+61, r24	; 0x3d
    1238:	46 c0       	rjmp	.+140    	; 0x12c6 <menu+0x50c>
	else if (__tmp > 65535)
    123a:	fe 01       	movw	r30, r28
    123c:	ff 96       	adiw	r30, 0x3f	; 63
    123e:	60 81       	ld	r22, Z
    1240:	71 81       	ldd	r23, Z+1	; 0x01
    1242:	82 81       	ldd	r24, Z+2	; 0x02
    1244:	93 81       	ldd	r25, Z+3	; 0x03
    1246:	20 e0       	ldi	r18, 0x00	; 0
    1248:	3f ef       	ldi	r19, 0xFF	; 255
    124a:	4f e7       	ldi	r20, 0x7F	; 127
    124c:	57 e4       	ldi	r21, 0x47	; 71
    124e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1252:	18 16       	cp	r1, r24
    1254:	64 f5       	brge	.+88     	; 0x12ae <menu+0x4f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1256:	fe 01       	movw	r30, r28
    1258:	ed 5b       	subi	r30, 0xBD	; 189
    125a:	ff 4f       	sbci	r31, 0xFF	; 255
    125c:	60 81       	ld	r22, Z
    125e:	71 81       	ldd	r23, Z+1	; 0x01
    1260:	82 81       	ldd	r24, Z+2	; 0x02
    1262:	93 81       	ldd	r25, Z+3	; 0x03
    1264:	20 e0       	ldi	r18, 0x00	; 0
    1266:	30 e0       	ldi	r19, 0x00	; 0
    1268:	40 e2       	ldi	r20, 0x20	; 32
    126a:	51 e4       	ldi	r21, 0x41	; 65
    126c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1270:	dc 01       	movw	r26, r24
    1272:	cb 01       	movw	r24, r22
    1274:	bc 01       	movw	r22, r24
    1276:	cd 01       	movw	r24, r26
    1278:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    127c:	dc 01       	movw	r26, r24
    127e:	cb 01       	movw	r24, r22
    1280:	9e af       	std	Y+62, r25	; 0x3e
    1282:	8d af       	std	Y+61, r24	; 0x3d
    1284:	0f c0       	rjmp	.+30     	; 0x12a4 <menu+0x4ea>
    1286:	88 ec       	ldi	r24, 0xC8	; 200
    1288:	90 e0       	ldi	r25, 0x00	; 0
    128a:	9c af       	std	Y+60, r25	; 0x3c
    128c:	8b af       	std	Y+59, r24	; 0x3b
    128e:	8b ad       	ldd	r24, Y+59	; 0x3b
    1290:	9c ad       	ldd	r25, Y+60	; 0x3c
    1292:	01 97       	sbiw	r24, 0x01	; 1
    1294:	f1 f7       	brne	.-4      	; 0x1292 <menu+0x4d8>
    1296:	9c af       	std	Y+60, r25	; 0x3c
    1298:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    129a:	8d ad       	ldd	r24, Y+61	; 0x3d
    129c:	9e ad       	ldd	r25, Y+62	; 0x3e
    129e:	01 97       	sbiw	r24, 0x01	; 1
    12a0:	9e af       	std	Y+62, r25	; 0x3e
    12a2:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12a4:	8d ad       	ldd	r24, Y+61	; 0x3d
    12a6:	9e ad       	ldd	r25, Y+62	; 0x3e
    12a8:	00 97       	sbiw	r24, 0x00	; 0
    12aa:	69 f7       	brne	.-38     	; 0x1286 <menu+0x4cc>
    12ac:	16 c0       	rjmp	.+44     	; 0x12da <menu+0x520>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12ae:	fe 01       	movw	r30, r28
    12b0:	ff 96       	adiw	r30, 0x3f	; 63
    12b2:	60 81       	ld	r22, Z
    12b4:	71 81       	ldd	r23, Z+1	; 0x01
    12b6:	82 81       	ldd	r24, Z+2	; 0x02
    12b8:	93 81       	ldd	r25, Z+3	; 0x03
    12ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12be:	dc 01       	movw	r26, r24
    12c0:	cb 01       	movw	r24, r22
    12c2:	9e af       	std	Y+62, r25	; 0x3e
    12c4:	8d af       	std	Y+61, r24	; 0x3d
    12c6:	8d ad       	ldd	r24, Y+61	; 0x3d
    12c8:	9e ad       	ldd	r25, Y+62	; 0x3e
    12ca:	9a af       	std	Y+58, r25	; 0x3a
    12cc:	89 af       	std	Y+57, r24	; 0x39
    12ce:	89 ad       	ldd	r24, Y+57	; 0x39
    12d0:	9a ad       	ldd	r25, Y+58	; 0x3a
    12d2:	01 97       	sbiw	r24, 0x01	; 1
    12d4:	f1 f7       	brne	.-4      	; 0x12d2 <menu+0x518>
    12d6:	9a af       	std	Y+58, r25	; 0x3a
    12d8:	89 af       	std	Y+57, r24	; 0x39
			_delay_ms(3000);
			pass_State=0;
    12da:	fe 01       	movw	r30, r28
    12dc:	ec 59       	subi	r30, 0x9C	; 156
    12de:	ff 4f       	sbci	r31, 0xFF	; 255
    12e0:	10 82       	st	Z, r1
			(*pass_Limit)++;			/* incrementing pass limiter if the user enter invalid  pass*/
    12e2:	fe 01       	movw	r30, r28
    12e4:	e8 59       	subi	r30, 0x98	; 152
    12e6:	ff 4f       	sbci	r31, 0xFF	; 255
    12e8:	01 90       	ld	r0, Z+
    12ea:	f0 81       	ld	r31, Z
    12ec:	e0 2d       	mov	r30, r0
    12ee:	80 81       	ld	r24, Z
    12f0:	8f 5f       	subi	r24, 0xFF	; 255
    12f2:	fe 01       	movw	r30, r28
    12f4:	e8 59       	subi	r30, 0x98	; 152
    12f6:	ff 4f       	sbci	r31, 0xFF	; 255
    12f8:	01 90       	ld	r0, Z+
    12fa:	f0 81       	ld	r31, Z
    12fc:	e0 2d       	mov	r30, r0
    12fe:	80 83       	st	Z, r24
    1300:	56 c2       	rjmp	.+1196   	; 0x17ae <menu+0x9f4>
			break;
		}

	}
	else if(key=='-'){
    1302:	fe 01       	movw	r30, r28
    1304:	eb 59       	subi	r30, 0x9B	; 155
    1306:	ff 4f       	sbci	r31, 0xFF	; 255
    1308:	80 81       	ld	r24, Z
    130a:	8d 32       	cpi	r24, 0x2D	; 45
    130c:	09 f0       	breq	.+2      	; 0x1310 <menu+0x556>
    130e:	4f c2       	rjmp	.+1182   	; 0x17ae <menu+0x9f4>
		UART_sendByte(CHANGE_PASS);
    1310:	82 e0       	ldi	r24, 0x02	; 2
    1312:	0e 94 cc 17 	call	0x2f98	; 0x2f98 <UART_sendByte>
		LCD_clearScreen();
    1316:	0e 94 30 17 	call	0x2e60	; 0x2e60 <LCD_clearScreen>
		LCD_displayString("enter password");
    131a:	8b eb       	ldi	r24, 0xBB	; 187
    131c:	90 e0       	ldi	r25, 0x00	; 0
    131e:	0e 94 89 16 	call	0x2d12	; 0x2d12 <LCD_displayString>
		LCD_moveCursor(1,0);
    1322:	81 e0       	ldi	r24, 0x01	; 1
    1324:	60 e0       	ldi	r22, 0x00	; 0
    1326:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <LCD_moveCursor>
		read_write_pass(ptr);
    132a:	fe 01       	movw	r30, r28
    132c:	ea 59       	subi	r30, 0x9A	; 154
    132e:	ff 4f       	sbci	r31, 0xFF	; 255
    1330:	80 81       	ld	r24, Z
    1332:	91 81       	ldd	r25, Z+1	; 0x01
    1334:	0e 94 e5 05 	call	0xbca	; 0xbca <read_write_pass>
		Null_to_Hash(ptr);
    1338:	fe 01       	movw	r30, r28
    133a:	ea 59       	subi	r30, 0x9A	; 154
    133c:	ff 4f       	sbci	r31, 0xFF	; 255
    133e:	80 81       	ld	r24, Z
    1340:	91 81       	ldd	r25, Z+1	; 0x01
    1342:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <Null_to_Hash>
		UART_sendString(ptr);
    1346:	fe 01       	movw	r30, r28
    1348:	ea 59       	subi	r30, 0x9A	; 154
    134a:	ff 4f       	sbci	r31, 0xFF	; 255
    134c:	80 81       	ld	r24, Z
    134e:	91 81       	ldd	r25, Z+1	; 0x01
    1350:	0e 94 f2 17 	call	0x2fe4	; 0x2fe4 <UART_sendString>
    1354:	80 e0       	ldi	r24, 0x00	; 0
    1356:	90 e0       	ldi	r25, 0x00	; 0
    1358:	a8 e4       	ldi	r26, 0x48	; 72
    135a:	b3 e4       	ldi	r27, 0x43	; 67
    135c:	8d ab       	std	Y+53, r24	; 0x35
    135e:	9e ab       	std	Y+54, r25	; 0x36
    1360:	af ab       	std	Y+55, r26	; 0x37
    1362:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1364:	6d a9       	ldd	r22, Y+53	; 0x35
    1366:	7e a9       	ldd	r23, Y+54	; 0x36
    1368:	8f a9       	ldd	r24, Y+55	; 0x37
    136a:	98 ad       	ldd	r25, Y+56	; 0x38
    136c:	20 e0       	ldi	r18, 0x00	; 0
    136e:	30 e0       	ldi	r19, 0x00	; 0
    1370:	4a ef       	ldi	r20, 0xFA	; 250
    1372:	54 e4       	ldi	r21, 0x44	; 68
    1374:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1378:	dc 01       	movw	r26, r24
    137a:	cb 01       	movw	r24, r22
    137c:	89 ab       	std	Y+49, r24	; 0x31
    137e:	9a ab       	std	Y+50, r25	; 0x32
    1380:	ab ab       	std	Y+51, r26	; 0x33
    1382:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1384:	69 a9       	ldd	r22, Y+49	; 0x31
    1386:	7a a9       	ldd	r23, Y+50	; 0x32
    1388:	8b a9       	ldd	r24, Y+51	; 0x33
    138a:	9c a9       	ldd	r25, Y+52	; 0x34
    138c:	20 e0       	ldi	r18, 0x00	; 0
    138e:	30 e0       	ldi	r19, 0x00	; 0
    1390:	40 e8       	ldi	r20, 0x80	; 128
    1392:	5f e3       	ldi	r21, 0x3F	; 63
    1394:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1398:	88 23       	and	r24, r24
    139a:	2c f4       	brge	.+10     	; 0x13a6 <menu+0x5ec>
		__ticks = 1;
    139c:	81 e0       	ldi	r24, 0x01	; 1
    139e:	90 e0       	ldi	r25, 0x00	; 0
    13a0:	98 ab       	std	Y+48, r25	; 0x30
    13a2:	8f a7       	std	Y+47, r24	; 0x2f
    13a4:	3f c0       	rjmp	.+126    	; 0x1424 <menu+0x66a>
	else if (__tmp > 65535)
    13a6:	69 a9       	ldd	r22, Y+49	; 0x31
    13a8:	7a a9       	ldd	r23, Y+50	; 0x32
    13aa:	8b a9       	ldd	r24, Y+51	; 0x33
    13ac:	9c a9       	ldd	r25, Y+52	; 0x34
    13ae:	20 e0       	ldi	r18, 0x00	; 0
    13b0:	3f ef       	ldi	r19, 0xFF	; 255
    13b2:	4f e7       	ldi	r20, 0x7F	; 127
    13b4:	57 e4       	ldi	r21, 0x47	; 71
    13b6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    13ba:	18 16       	cp	r1, r24
    13bc:	4c f5       	brge	.+82     	; 0x1410 <menu+0x656>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13be:	6d a9       	ldd	r22, Y+53	; 0x35
    13c0:	7e a9       	ldd	r23, Y+54	; 0x36
    13c2:	8f a9       	ldd	r24, Y+55	; 0x37
    13c4:	98 ad       	ldd	r25, Y+56	; 0x38
    13c6:	20 e0       	ldi	r18, 0x00	; 0
    13c8:	30 e0       	ldi	r19, 0x00	; 0
    13ca:	40 e2       	ldi	r20, 0x20	; 32
    13cc:	51 e4       	ldi	r21, 0x41	; 65
    13ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13d2:	dc 01       	movw	r26, r24
    13d4:	cb 01       	movw	r24, r22
    13d6:	bc 01       	movw	r22, r24
    13d8:	cd 01       	movw	r24, r26
    13da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13de:	dc 01       	movw	r26, r24
    13e0:	cb 01       	movw	r24, r22
    13e2:	98 ab       	std	Y+48, r25	; 0x30
    13e4:	8f a7       	std	Y+47, r24	; 0x2f
    13e6:	0f c0       	rjmp	.+30     	; 0x1406 <menu+0x64c>
    13e8:	88 ec       	ldi	r24, 0xC8	; 200
    13ea:	90 e0       	ldi	r25, 0x00	; 0
    13ec:	9e a7       	std	Y+46, r25	; 0x2e
    13ee:	8d a7       	std	Y+45, r24	; 0x2d
    13f0:	8d a5       	ldd	r24, Y+45	; 0x2d
    13f2:	9e a5       	ldd	r25, Y+46	; 0x2e
    13f4:	01 97       	sbiw	r24, 0x01	; 1
    13f6:	f1 f7       	brne	.-4      	; 0x13f4 <menu+0x63a>
    13f8:	9e a7       	std	Y+46, r25	; 0x2e
    13fa:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13fc:	8f a5       	ldd	r24, Y+47	; 0x2f
    13fe:	98 a9       	ldd	r25, Y+48	; 0x30
    1400:	01 97       	sbiw	r24, 0x01	; 1
    1402:	98 ab       	std	Y+48, r25	; 0x30
    1404:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1406:	8f a5       	ldd	r24, Y+47	; 0x2f
    1408:	98 a9       	ldd	r25, Y+48	; 0x30
    140a:	00 97       	sbiw	r24, 0x00	; 0
    140c:	69 f7       	brne	.-38     	; 0x13e8 <menu+0x62e>
    140e:	14 c0       	rjmp	.+40     	; 0x1438 <menu+0x67e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1410:	69 a9       	ldd	r22, Y+49	; 0x31
    1412:	7a a9       	ldd	r23, Y+50	; 0x32
    1414:	8b a9       	ldd	r24, Y+51	; 0x33
    1416:	9c a9       	ldd	r25, Y+52	; 0x34
    1418:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    141c:	dc 01       	movw	r26, r24
    141e:	cb 01       	movw	r24, r22
    1420:	98 ab       	std	Y+48, r25	; 0x30
    1422:	8f a7       	std	Y+47, r24	; 0x2f
    1424:	8f a5       	ldd	r24, Y+47	; 0x2f
    1426:	98 a9       	ldd	r25, Y+48	; 0x30
    1428:	9c a7       	std	Y+44, r25	; 0x2c
    142a:	8b a7       	std	Y+43, r24	; 0x2b
    142c:	8b a5       	ldd	r24, Y+43	; 0x2b
    142e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1430:	01 97       	sbiw	r24, 0x01	; 1
    1432:	f1 f7       	brne	.-4      	; 0x1430 <menu+0x676>
    1434:	9c a7       	std	Y+44, r25	; 0x2c
    1436:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(200);
		pass_State_1=UART_recieveByte();
    1438:	0e 94 e3 17 	call	0x2fc6	; 0x2fc6 <UART_recieveByte>
    143c:	fe 01       	movw	r30, r28
    143e:	ed 59       	subi	r30, 0x9D	; 157
    1440:	ff 4f       	sbci	r31, 0xFF	; 255
    1442:	80 83       	st	Z, r24
		switch(pass_State_1){
    1444:	fe 01       	movw	r30, r28
    1446:	ed 59       	subi	r30, 0x9D	; 157
    1448:	ff 4f       	sbci	r31, 0xFF	; 255
    144a:	80 81       	ld	r24, Z
    144c:	28 2f       	mov	r18, r24
    144e:	30 e0       	ldi	r19, 0x00	; 0
    1450:	ac 96       	adiw	r28, 0x2c	; 44
    1452:	3f af       	std	Y+63, r19	; 0x3f
    1454:	2e af       	std	Y+62, r18	; 0x3e
    1456:	ac 97       	sbiw	r28, 0x2c	; 44
    1458:	ac 96       	adiw	r28, 0x2c	; 44
    145a:	8e ad       	ldd	r24, Y+62	; 0x3e
    145c:	9f ad       	ldd	r25, Y+63	; 0x3f
    145e:	ac 97       	sbiw	r28, 0x2c	; 44
    1460:	8a 30       	cpi	r24, 0x0A	; 10
    1462:	91 05       	cpc	r25, r1
    1464:	49 f0       	breq	.+18     	; 0x1478 <menu+0x6be>
    1466:	ac 96       	adiw	r28, 0x2c	; 44
    1468:	ee ad       	ldd	r30, Y+62	; 0x3e
    146a:	ff ad       	ldd	r31, Y+63	; 0x3f
    146c:	ac 97       	sbiw	r28, 0x2c	; 44
    146e:	eb 30       	cpi	r30, 0x0B	; 11
    1470:	f1 05       	cpc	r31, r1
    1472:	09 f4       	brne	.+2      	; 0x1476 <menu+0x6bc>
    1474:	90 c0       	rjmp	.+288    	; 0x1596 <menu+0x7dc>
    1476:	1f c1       	rjmp	.+574    	; 0x16b6 <menu+0x8fc>
		case CORRECT_PASS:
			LCD_clearScreen();
    1478:	0e 94 30 17 	call	0x2e60	; 0x2e60 <LCD_clearScreen>
			LCD_displayString("CORRECT PASS");
    147c:	8a ec       	ldi	r24, 0xCA	; 202
    147e:	90 e0       	ldi	r25, 0x00	; 0
    1480:	0e 94 89 16 	call	0x2d12	; 0x2d12 <LCD_displayString>
			LCD_moveCursor(1,0);
    1484:	81 e0       	ldi	r24, 0x01	; 1
    1486:	60 e0       	ldi	r22, 0x00	; 0
    1488:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <LCD_moveCursor>
    148c:	80 e0       	ldi	r24, 0x00	; 0
    148e:	90 e0       	ldi	r25, 0x00	; 0
    1490:	aa e7       	ldi	r26, 0x7A	; 122
    1492:	b4 e4       	ldi	r27, 0x44	; 68
    1494:	8f a3       	std	Y+39, r24	; 0x27
    1496:	98 a7       	std	Y+40, r25	; 0x28
    1498:	a9 a7       	std	Y+41, r26	; 0x29
    149a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    149c:	6f a1       	ldd	r22, Y+39	; 0x27
    149e:	78 a5       	ldd	r23, Y+40	; 0x28
    14a0:	89 a5       	ldd	r24, Y+41	; 0x29
    14a2:	9a a5       	ldd	r25, Y+42	; 0x2a
    14a4:	20 e0       	ldi	r18, 0x00	; 0
    14a6:	30 e0       	ldi	r19, 0x00	; 0
    14a8:	4a ef       	ldi	r20, 0xFA	; 250
    14aa:	54 e4       	ldi	r21, 0x44	; 68
    14ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14b0:	dc 01       	movw	r26, r24
    14b2:	cb 01       	movw	r24, r22
    14b4:	8b a3       	std	Y+35, r24	; 0x23
    14b6:	9c a3       	std	Y+36, r25	; 0x24
    14b8:	ad a3       	std	Y+37, r26	; 0x25
    14ba:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    14bc:	6b a1       	ldd	r22, Y+35	; 0x23
    14be:	7c a1       	ldd	r23, Y+36	; 0x24
    14c0:	8d a1       	ldd	r24, Y+37	; 0x25
    14c2:	9e a1       	ldd	r25, Y+38	; 0x26
    14c4:	20 e0       	ldi	r18, 0x00	; 0
    14c6:	30 e0       	ldi	r19, 0x00	; 0
    14c8:	40 e8       	ldi	r20, 0x80	; 128
    14ca:	5f e3       	ldi	r21, 0x3F	; 63
    14cc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14d0:	88 23       	and	r24, r24
    14d2:	2c f4       	brge	.+10     	; 0x14de <menu+0x724>
		__ticks = 1;
    14d4:	81 e0       	ldi	r24, 0x01	; 1
    14d6:	90 e0       	ldi	r25, 0x00	; 0
    14d8:	9a a3       	std	Y+34, r25	; 0x22
    14da:	89 a3       	std	Y+33, r24	; 0x21
    14dc:	3f c0       	rjmp	.+126    	; 0x155c <menu+0x7a2>
	else if (__tmp > 65535)
    14de:	6b a1       	ldd	r22, Y+35	; 0x23
    14e0:	7c a1       	ldd	r23, Y+36	; 0x24
    14e2:	8d a1       	ldd	r24, Y+37	; 0x25
    14e4:	9e a1       	ldd	r25, Y+38	; 0x26
    14e6:	20 e0       	ldi	r18, 0x00	; 0
    14e8:	3f ef       	ldi	r19, 0xFF	; 255
    14ea:	4f e7       	ldi	r20, 0x7F	; 127
    14ec:	57 e4       	ldi	r21, 0x47	; 71
    14ee:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14f2:	18 16       	cp	r1, r24
    14f4:	4c f5       	brge	.+82     	; 0x1548 <menu+0x78e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14f6:	6f a1       	ldd	r22, Y+39	; 0x27
    14f8:	78 a5       	ldd	r23, Y+40	; 0x28
    14fa:	89 a5       	ldd	r24, Y+41	; 0x29
    14fc:	9a a5       	ldd	r25, Y+42	; 0x2a
    14fe:	20 e0       	ldi	r18, 0x00	; 0
    1500:	30 e0       	ldi	r19, 0x00	; 0
    1502:	40 e2       	ldi	r20, 0x20	; 32
    1504:	51 e4       	ldi	r21, 0x41	; 65
    1506:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    150a:	dc 01       	movw	r26, r24
    150c:	cb 01       	movw	r24, r22
    150e:	bc 01       	movw	r22, r24
    1510:	cd 01       	movw	r24, r26
    1512:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1516:	dc 01       	movw	r26, r24
    1518:	cb 01       	movw	r24, r22
    151a:	9a a3       	std	Y+34, r25	; 0x22
    151c:	89 a3       	std	Y+33, r24	; 0x21
    151e:	0f c0       	rjmp	.+30     	; 0x153e <menu+0x784>
    1520:	88 ec       	ldi	r24, 0xC8	; 200
    1522:	90 e0       	ldi	r25, 0x00	; 0
    1524:	98 a3       	std	Y+32, r25	; 0x20
    1526:	8f 8f       	std	Y+31, r24	; 0x1f
    1528:	8f 8d       	ldd	r24, Y+31	; 0x1f
    152a:	98 a1       	ldd	r25, Y+32	; 0x20
    152c:	01 97       	sbiw	r24, 0x01	; 1
    152e:	f1 f7       	brne	.-4      	; 0x152c <menu+0x772>
    1530:	98 a3       	std	Y+32, r25	; 0x20
    1532:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1534:	89 a1       	ldd	r24, Y+33	; 0x21
    1536:	9a a1       	ldd	r25, Y+34	; 0x22
    1538:	01 97       	sbiw	r24, 0x01	; 1
    153a:	9a a3       	std	Y+34, r25	; 0x22
    153c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    153e:	89 a1       	ldd	r24, Y+33	; 0x21
    1540:	9a a1       	ldd	r25, Y+34	; 0x22
    1542:	00 97       	sbiw	r24, 0x00	; 0
    1544:	69 f7       	brne	.-38     	; 0x1520 <menu+0x766>
    1546:	14 c0       	rjmp	.+40     	; 0x1570 <menu+0x7b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1548:	6b a1       	ldd	r22, Y+35	; 0x23
    154a:	7c a1       	ldd	r23, Y+36	; 0x24
    154c:	8d a1       	ldd	r24, Y+37	; 0x25
    154e:	9e a1       	ldd	r25, Y+38	; 0x26
    1550:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1554:	dc 01       	movw	r26, r24
    1556:	cb 01       	movw	r24, r22
    1558:	9a a3       	std	Y+34, r25	; 0x22
    155a:	89 a3       	std	Y+33, r24	; 0x21
    155c:	89 a1       	ldd	r24, Y+33	; 0x21
    155e:	9a a1       	ldd	r25, Y+34	; 0x22
    1560:	9e 8f       	std	Y+30, r25	; 0x1e
    1562:	8d 8f       	std	Y+29, r24	; 0x1d
    1564:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1566:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1568:	01 97       	sbiw	r24, 0x01	; 1
    156a:	f1 f7       	brne	.-4      	; 0x1568 <menu+0x7ae>
    156c:	9e 8f       	std	Y+30, r25	; 0x1e
    156e:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(1000);
			send_pass(ptr);
    1570:	fe 01       	movw	r30, r28
    1572:	ea 59       	subi	r30, 0x9A	; 154
    1574:	ff 4f       	sbci	r31, 0xFF	; 255
    1576:	80 81       	ld	r24, Z
    1578:	91 81       	ldd	r25, Z+1	; 0x01
    157a:	0e 94 0f 0c 	call	0x181e	; 0x181e <send_pass>
			pass_State_1=0;
    157e:	fe 01       	movw	r30, r28
    1580:	ed 59       	subi	r30, 0x9D	; 157
    1582:	ff 4f       	sbci	r31, 0xFF	; 255
    1584:	10 82       	st	Z, r1
			*pass_Limit=0;
    1586:	fe 01       	movw	r30, r28
    1588:	e8 59       	subi	r30, 0x98	; 152
    158a:	ff 4f       	sbci	r31, 0xFF	; 255
    158c:	01 90       	ld	r0, Z+
    158e:	f0 81       	ld	r31, Z
    1590:	e0 2d       	mov	r30, r0
    1592:	10 82       	st	Z, r1
    1594:	0c c1       	rjmp	.+536    	; 0x17ae <menu+0x9f4>
			break;

		case INVALID_PASS:
			LCD_clearScreen();
    1596:	0e 94 30 17 	call	0x2e60	; 0x2e60 <LCD_clearScreen>
			LCD_displayString("INVALID PASS");
    159a:	85 ee       	ldi	r24, 0xE5	; 229
    159c:	90 e0       	ldi	r25, 0x00	; 0
    159e:	0e 94 89 16 	call	0x2d12	; 0x2d12 <LCD_displayString>
			LCD_moveCursor(1,0);
    15a2:	81 e0       	ldi	r24, 0x01	; 1
    15a4:	60 e0       	ldi	r22, 0x00	; 0
    15a6:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <LCD_moveCursor>
    15aa:	80 e0       	ldi	r24, 0x00	; 0
    15ac:	90 e0       	ldi	r25, 0x00	; 0
    15ae:	aa e7       	ldi	r26, 0x7A	; 122
    15b0:	b4 e4       	ldi	r27, 0x44	; 68
    15b2:	89 8f       	std	Y+25, r24	; 0x19
    15b4:	9a 8f       	std	Y+26, r25	; 0x1a
    15b6:	ab 8f       	std	Y+27, r26	; 0x1b
    15b8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15ba:	69 8d       	ldd	r22, Y+25	; 0x19
    15bc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    15be:	8b 8d       	ldd	r24, Y+27	; 0x1b
    15c0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    15c2:	20 e0       	ldi	r18, 0x00	; 0
    15c4:	30 e0       	ldi	r19, 0x00	; 0
    15c6:	4a ef       	ldi	r20, 0xFA	; 250
    15c8:	54 e4       	ldi	r21, 0x44	; 68
    15ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15ce:	dc 01       	movw	r26, r24
    15d0:	cb 01       	movw	r24, r22
    15d2:	8d 8b       	std	Y+21, r24	; 0x15
    15d4:	9e 8b       	std	Y+22, r25	; 0x16
    15d6:	af 8b       	std	Y+23, r26	; 0x17
    15d8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    15da:	6d 89       	ldd	r22, Y+21	; 0x15
    15dc:	7e 89       	ldd	r23, Y+22	; 0x16
    15de:	8f 89       	ldd	r24, Y+23	; 0x17
    15e0:	98 8d       	ldd	r25, Y+24	; 0x18
    15e2:	20 e0       	ldi	r18, 0x00	; 0
    15e4:	30 e0       	ldi	r19, 0x00	; 0
    15e6:	40 e8       	ldi	r20, 0x80	; 128
    15e8:	5f e3       	ldi	r21, 0x3F	; 63
    15ea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    15ee:	88 23       	and	r24, r24
    15f0:	2c f4       	brge	.+10     	; 0x15fc <menu+0x842>
		__ticks = 1;
    15f2:	81 e0       	ldi	r24, 0x01	; 1
    15f4:	90 e0       	ldi	r25, 0x00	; 0
    15f6:	9c 8b       	std	Y+20, r25	; 0x14
    15f8:	8b 8b       	std	Y+19, r24	; 0x13
    15fa:	3f c0       	rjmp	.+126    	; 0x167a <menu+0x8c0>
	else if (__tmp > 65535)
    15fc:	6d 89       	ldd	r22, Y+21	; 0x15
    15fe:	7e 89       	ldd	r23, Y+22	; 0x16
    1600:	8f 89       	ldd	r24, Y+23	; 0x17
    1602:	98 8d       	ldd	r25, Y+24	; 0x18
    1604:	20 e0       	ldi	r18, 0x00	; 0
    1606:	3f ef       	ldi	r19, 0xFF	; 255
    1608:	4f e7       	ldi	r20, 0x7F	; 127
    160a:	57 e4       	ldi	r21, 0x47	; 71
    160c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1610:	18 16       	cp	r1, r24
    1612:	4c f5       	brge	.+82     	; 0x1666 <menu+0x8ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1614:	69 8d       	ldd	r22, Y+25	; 0x19
    1616:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1618:	8b 8d       	ldd	r24, Y+27	; 0x1b
    161a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    161c:	20 e0       	ldi	r18, 0x00	; 0
    161e:	30 e0       	ldi	r19, 0x00	; 0
    1620:	40 e2       	ldi	r20, 0x20	; 32
    1622:	51 e4       	ldi	r21, 0x41	; 65
    1624:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1628:	dc 01       	movw	r26, r24
    162a:	cb 01       	movw	r24, r22
    162c:	bc 01       	movw	r22, r24
    162e:	cd 01       	movw	r24, r26
    1630:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1634:	dc 01       	movw	r26, r24
    1636:	cb 01       	movw	r24, r22
    1638:	9c 8b       	std	Y+20, r25	; 0x14
    163a:	8b 8b       	std	Y+19, r24	; 0x13
    163c:	0f c0       	rjmp	.+30     	; 0x165c <menu+0x8a2>
    163e:	88 ec       	ldi	r24, 0xC8	; 200
    1640:	90 e0       	ldi	r25, 0x00	; 0
    1642:	9a 8b       	std	Y+18, r25	; 0x12
    1644:	89 8b       	std	Y+17, r24	; 0x11
    1646:	89 89       	ldd	r24, Y+17	; 0x11
    1648:	9a 89       	ldd	r25, Y+18	; 0x12
    164a:	01 97       	sbiw	r24, 0x01	; 1
    164c:	f1 f7       	brne	.-4      	; 0x164a <menu+0x890>
    164e:	9a 8b       	std	Y+18, r25	; 0x12
    1650:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1652:	8b 89       	ldd	r24, Y+19	; 0x13
    1654:	9c 89       	ldd	r25, Y+20	; 0x14
    1656:	01 97       	sbiw	r24, 0x01	; 1
    1658:	9c 8b       	std	Y+20, r25	; 0x14
    165a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    165c:	8b 89       	ldd	r24, Y+19	; 0x13
    165e:	9c 89       	ldd	r25, Y+20	; 0x14
    1660:	00 97       	sbiw	r24, 0x00	; 0
    1662:	69 f7       	brne	.-38     	; 0x163e <menu+0x884>
    1664:	14 c0       	rjmp	.+40     	; 0x168e <menu+0x8d4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1666:	6d 89       	ldd	r22, Y+21	; 0x15
    1668:	7e 89       	ldd	r23, Y+22	; 0x16
    166a:	8f 89       	ldd	r24, Y+23	; 0x17
    166c:	98 8d       	ldd	r25, Y+24	; 0x18
    166e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1672:	dc 01       	movw	r26, r24
    1674:	cb 01       	movw	r24, r22
    1676:	9c 8b       	std	Y+20, r25	; 0x14
    1678:	8b 8b       	std	Y+19, r24	; 0x13
    167a:	8b 89       	ldd	r24, Y+19	; 0x13
    167c:	9c 89       	ldd	r25, Y+20	; 0x14
    167e:	98 8b       	std	Y+16, r25	; 0x10
    1680:	8f 87       	std	Y+15, r24	; 0x0f
    1682:	8f 85       	ldd	r24, Y+15	; 0x0f
    1684:	98 89       	ldd	r25, Y+16	; 0x10
    1686:	01 97       	sbiw	r24, 0x01	; 1
    1688:	f1 f7       	brne	.-4      	; 0x1686 <menu+0x8cc>
    168a:	98 8b       	std	Y+16, r25	; 0x10
    168c:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(1000);
			pass_State_1=0;
    168e:	fe 01       	movw	r30, r28
    1690:	ed 59       	subi	r30, 0x9D	; 157
    1692:	ff 4f       	sbci	r31, 0xFF	; 255
    1694:	10 82       	st	Z, r1
			(*pass_Limit)++;
    1696:	fe 01       	movw	r30, r28
    1698:	e8 59       	subi	r30, 0x98	; 152
    169a:	ff 4f       	sbci	r31, 0xFF	; 255
    169c:	01 90       	ld	r0, Z+
    169e:	f0 81       	ld	r31, Z
    16a0:	e0 2d       	mov	r30, r0
    16a2:	80 81       	ld	r24, Z
    16a4:	8f 5f       	subi	r24, 0xFF	; 255
    16a6:	fe 01       	movw	r30, r28
    16a8:	e8 59       	subi	r30, 0x98	; 152
    16aa:	ff 4f       	sbci	r31, 0xFF	; 255
    16ac:	01 90       	ld	r0, Z+
    16ae:	f0 81       	ld	r31, Z
    16b0:	e0 2d       	mov	r30, r0
    16b2:	80 83       	st	Z, r24
    16b4:	7c c0       	rjmp	.+248    	; 0x17ae <menu+0x9f4>
			break;
		default:
			LCD_clearScreen();
    16b6:	0e 94 30 17 	call	0x2e60	; 0x2e60 <LCD_clearScreen>
			LCD_intgerToString(pass_State_1);
    16ba:	fe 01       	movw	r30, r28
    16bc:	ed 59       	subi	r30, 0x9D	; 157
    16be:	ff 4f       	sbci	r31, 0xFF	; 255
    16c0:	80 81       	ld	r24, Z
    16c2:	88 2f       	mov	r24, r24
    16c4:	90 e0       	ldi	r25, 0x00	; 0
    16c6:	0e 94 0d 17 	call	0x2e1a	; 0x2e1a <LCD_intgerToString>
    16ca:	80 e0       	ldi	r24, 0x00	; 0
    16cc:	90 e0       	ldi	r25, 0x00	; 0
    16ce:	aa e7       	ldi	r26, 0x7A	; 122
    16d0:	b4 e4       	ldi	r27, 0x44	; 68
    16d2:	8b 87       	std	Y+11, r24	; 0x0b
    16d4:	9c 87       	std	Y+12, r25	; 0x0c
    16d6:	ad 87       	std	Y+13, r26	; 0x0d
    16d8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16da:	6b 85       	ldd	r22, Y+11	; 0x0b
    16dc:	7c 85       	ldd	r23, Y+12	; 0x0c
    16de:	8d 85       	ldd	r24, Y+13	; 0x0d
    16e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    16e2:	20 e0       	ldi	r18, 0x00	; 0
    16e4:	30 e0       	ldi	r19, 0x00	; 0
    16e6:	4a ef       	ldi	r20, 0xFA	; 250
    16e8:	54 e4       	ldi	r21, 0x44	; 68
    16ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16ee:	dc 01       	movw	r26, r24
    16f0:	cb 01       	movw	r24, r22
    16f2:	8f 83       	std	Y+7, r24	; 0x07
    16f4:	98 87       	std	Y+8, r25	; 0x08
    16f6:	a9 87       	std	Y+9, r26	; 0x09
    16f8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    16fa:	6f 81       	ldd	r22, Y+7	; 0x07
    16fc:	78 85       	ldd	r23, Y+8	; 0x08
    16fe:	89 85       	ldd	r24, Y+9	; 0x09
    1700:	9a 85       	ldd	r25, Y+10	; 0x0a
    1702:	20 e0       	ldi	r18, 0x00	; 0
    1704:	30 e0       	ldi	r19, 0x00	; 0
    1706:	40 e8       	ldi	r20, 0x80	; 128
    1708:	5f e3       	ldi	r21, 0x3F	; 63
    170a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    170e:	88 23       	and	r24, r24
    1710:	2c f4       	brge	.+10     	; 0x171c <menu+0x962>
		__ticks = 1;
    1712:	81 e0       	ldi	r24, 0x01	; 1
    1714:	90 e0       	ldi	r25, 0x00	; 0
    1716:	9e 83       	std	Y+6, r25	; 0x06
    1718:	8d 83       	std	Y+5, r24	; 0x05
    171a:	3f c0       	rjmp	.+126    	; 0x179a <menu+0x9e0>
	else if (__tmp > 65535)
    171c:	6f 81       	ldd	r22, Y+7	; 0x07
    171e:	78 85       	ldd	r23, Y+8	; 0x08
    1720:	89 85       	ldd	r24, Y+9	; 0x09
    1722:	9a 85       	ldd	r25, Y+10	; 0x0a
    1724:	20 e0       	ldi	r18, 0x00	; 0
    1726:	3f ef       	ldi	r19, 0xFF	; 255
    1728:	4f e7       	ldi	r20, 0x7F	; 127
    172a:	57 e4       	ldi	r21, 0x47	; 71
    172c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1730:	18 16       	cp	r1, r24
    1732:	4c f5       	brge	.+82     	; 0x1786 <menu+0x9cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1734:	6b 85       	ldd	r22, Y+11	; 0x0b
    1736:	7c 85       	ldd	r23, Y+12	; 0x0c
    1738:	8d 85       	ldd	r24, Y+13	; 0x0d
    173a:	9e 85       	ldd	r25, Y+14	; 0x0e
    173c:	20 e0       	ldi	r18, 0x00	; 0
    173e:	30 e0       	ldi	r19, 0x00	; 0
    1740:	40 e2       	ldi	r20, 0x20	; 32
    1742:	51 e4       	ldi	r21, 0x41	; 65
    1744:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1748:	dc 01       	movw	r26, r24
    174a:	cb 01       	movw	r24, r22
    174c:	bc 01       	movw	r22, r24
    174e:	cd 01       	movw	r24, r26
    1750:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1754:	dc 01       	movw	r26, r24
    1756:	cb 01       	movw	r24, r22
    1758:	9e 83       	std	Y+6, r25	; 0x06
    175a:	8d 83       	std	Y+5, r24	; 0x05
    175c:	0f c0       	rjmp	.+30     	; 0x177c <menu+0x9c2>
    175e:	88 ec       	ldi	r24, 0xC8	; 200
    1760:	90 e0       	ldi	r25, 0x00	; 0
    1762:	9c 83       	std	Y+4, r25	; 0x04
    1764:	8b 83       	std	Y+3, r24	; 0x03
    1766:	8b 81       	ldd	r24, Y+3	; 0x03
    1768:	9c 81       	ldd	r25, Y+4	; 0x04
    176a:	01 97       	sbiw	r24, 0x01	; 1
    176c:	f1 f7       	brne	.-4      	; 0x176a <menu+0x9b0>
    176e:	9c 83       	std	Y+4, r25	; 0x04
    1770:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1772:	8d 81       	ldd	r24, Y+5	; 0x05
    1774:	9e 81       	ldd	r25, Y+6	; 0x06
    1776:	01 97       	sbiw	r24, 0x01	; 1
    1778:	9e 83       	std	Y+6, r25	; 0x06
    177a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    177c:	8d 81       	ldd	r24, Y+5	; 0x05
    177e:	9e 81       	ldd	r25, Y+6	; 0x06
    1780:	00 97       	sbiw	r24, 0x00	; 0
    1782:	69 f7       	brne	.-38     	; 0x175e <menu+0x9a4>
    1784:	14 c0       	rjmp	.+40     	; 0x17ae <menu+0x9f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1786:	6f 81       	ldd	r22, Y+7	; 0x07
    1788:	78 85       	ldd	r23, Y+8	; 0x08
    178a:	89 85       	ldd	r24, Y+9	; 0x09
    178c:	9a 85       	ldd	r25, Y+10	; 0x0a
    178e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1792:	dc 01       	movw	r26, r24
    1794:	cb 01       	movw	r24, r22
    1796:	9e 83       	std	Y+6, r25	; 0x06
    1798:	8d 83       	std	Y+5, r24	; 0x05
    179a:	8d 81       	ldd	r24, Y+5	; 0x05
    179c:	9e 81       	ldd	r25, Y+6	; 0x06
    179e:	9a 83       	std	Y+2, r25	; 0x02
    17a0:	89 83       	std	Y+1, r24	; 0x01
    17a2:	89 81       	ldd	r24, Y+1	; 0x01
    17a4:	9a 81       	ldd	r25, Y+2	; 0x02
    17a6:	01 97       	sbiw	r24, 0x01	; 1
    17a8:	f1 f7       	brne	.-4      	; 0x17a6 <menu+0x9ec>
    17aa:	9a 83       	std	Y+2, r25	; 0x02
    17ac:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(1000);
			break;
		}
	}

}
    17ae:	c3 59       	subi	r28, 0x93	; 147
    17b0:	df 4f       	sbci	r29, 0xFF	; 255
    17b2:	0f b6       	in	r0, 0x3f	; 63
    17b4:	f8 94       	cli
    17b6:	de bf       	out	0x3e, r29	; 62
    17b8:	0f be       	out	0x3f, r0	; 63
    17ba:	cd bf       	out	0x3d, r28	; 61
    17bc:	cf 91       	pop	r28
    17be:	df 91       	pop	r29
    17c0:	1f 91       	pop	r17
    17c2:	0f 91       	pop	r16
    17c4:	08 95       	ret

000017c6 <Null_to_Hash>:
void Null_to_Hash(uint8 *ptr){ 		/*function to replace null in string by hash to get sent by uart*/
    17c6:	df 93       	push	r29
    17c8:	cf 93       	push	r28
    17ca:	00 d0       	rcall	.+0      	; 0x17cc <Null_to_Hash+0x6>
    17cc:	00 d0       	rcall	.+0      	; 0x17ce <Null_to_Hash+0x8>
    17ce:	cd b7       	in	r28, 0x3d	; 61
    17d0:	de b7       	in	r29, 0x3e	; 62
    17d2:	9c 83       	std	Y+4, r25	; 0x04
    17d4:	8b 83       	std	Y+3, r24	; 0x03
	int i=0;
    17d6:	1a 82       	std	Y+2, r1	; 0x02
    17d8:	19 82       	std	Y+1, r1	; 0x01
	while(1){
	if (ptr[i]==NULL_PTR){
    17da:	29 81       	ldd	r18, Y+1	; 0x01
    17dc:	3a 81       	ldd	r19, Y+2	; 0x02
    17de:	8b 81       	ldd	r24, Y+3	; 0x03
    17e0:	9c 81       	ldd	r25, Y+4	; 0x04
    17e2:	fc 01       	movw	r30, r24
    17e4:	e2 0f       	add	r30, r18
    17e6:	f3 1f       	adc	r31, r19
    17e8:	80 81       	ld	r24, Z
    17ea:	88 2f       	mov	r24, r24
    17ec:	90 e0       	ldi	r25, 0x00	; 0
    17ee:	00 97       	sbiw	r24, 0x00	; 0
    17f0:	81 f4       	brne	.+32     	; 0x1812 <Null_to_Hash+0x4c>
		ptr[i]='#';
    17f2:	29 81       	ldd	r18, Y+1	; 0x01
    17f4:	3a 81       	ldd	r19, Y+2	; 0x02
    17f6:	8b 81       	ldd	r24, Y+3	; 0x03
    17f8:	9c 81       	ldd	r25, Y+4	; 0x04
    17fa:	fc 01       	movw	r30, r24
    17fc:	e2 0f       	add	r30, r18
    17fe:	f3 1f       	adc	r31, r19
    1800:	83 e2       	ldi	r24, 0x23	; 35
    1802:	80 83       	st	Z, r24
		break;
		}
	i++;
	}
}
    1804:	0f 90       	pop	r0
    1806:	0f 90       	pop	r0
    1808:	0f 90       	pop	r0
    180a:	0f 90       	pop	r0
    180c:	cf 91       	pop	r28
    180e:	df 91       	pop	r29
    1810:	08 95       	ret
	while(1){
	if (ptr[i]==NULL_PTR){
		ptr[i]='#';
		break;
		}
	i++;
    1812:	89 81       	ldd	r24, Y+1	; 0x01
    1814:	9a 81       	ldd	r25, Y+2	; 0x02
    1816:	01 96       	adiw	r24, 0x01	; 1
    1818:	9a 83       	std	Y+2, r25	; 0x02
    181a:	89 83       	std	Y+1, r24	; 0x01
    181c:	de cf       	rjmp	.-68     	; 0x17da <Null_to_Hash+0x14>

0000181e <send_pass>:
	}
}
void send_pass(uint8 *pass){		/*function to send password by uart*/
    181e:	df 93       	push	r29
    1820:	cf 93       	push	r28
    1822:	cd b7       	in	r28, 0x3d	; 61
    1824:	de b7       	in	r29, 0x3e	; 62
    1826:	61 97       	sbiw	r28, 0x11	; 17
    1828:	0f b6       	in	r0, 0x3f	; 63
    182a:	f8 94       	cli
    182c:	de bf       	out	0x3e, r29	; 62
    182e:	0f be       	out	0x3f, r0	; 63
    1830:	cd bf       	out	0x3d, r28	; 61
    1832:	99 8b       	std	Y+17, r25	; 0x11
    1834:	88 8b       	std	Y+16, r24	; 0x10
	uint8 state= FALSE;
    1836:	1f 86       	std	Y+15, r1	; 0x0f
    1838:	77 c0       	rjmp	.+238    	; 0x1928 <send_pass+0x10a>
	while (state==FALSE){
			state=First_Time_Pass(pass);
    183a:	88 89       	ldd	r24, Y+16	; 0x10
    183c:	99 89       	ldd	r25, Y+17	; 0x11
    183e:	0e 94 a3 05 	call	0xb46	; 0xb46 <First_Time_Pass>
    1842:	8f 87       	std	Y+15, r24	; 0x0f
    1844:	80 e0       	ldi	r24, 0x00	; 0
    1846:	90 e0       	ldi	r25, 0x00	; 0
    1848:	aa ef       	ldi	r26, 0xFA	; 250
    184a:	b4 e4       	ldi	r27, 0x44	; 68
    184c:	8b 87       	std	Y+11, r24	; 0x0b
    184e:	9c 87       	std	Y+12, r25	; 0x0c
    1850:	ad 87       	std	Y+13, r26	; 0x0d
    1852:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1854:	6b 85       	ldd	r22, Y+11	; 0x0b
    1856:	7c 85       	ldd	r23, Y+12	; 0x0c
    1858:	8d 85       	ldd	r24, Y+13	; 0x0d
    185a:	9e 85       	ldd	r25, Y+14	; 0x0e
    185c:	20 e0       	ldi	r18, 0x00	; 0
    185e:	30 e0       	ldi	r19, 0x00	; 0
    1860:	4a ef       	ldi	r20, 0xFA	; 250
    1862:	54 e4       	ldi	r21, 0x44	; 68
    1864:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1868:	dc 01       	movw	r26, r24
    186a:	cb 01       	movw	r24, r22
    186c:	8f 83       	std	Y+7, r24	; 0x07
    186e:	98 87       	std	Y+8, r25	; 0x08
    1870:	a9 87       	std	Y+9, r26	; 0x09
    1872:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1874:	6f 81       	ldd	r22, Y+7	; 0x07
    1876:	78 85       	ldd	r23, Y+8	; 0x08
    1878:	89 85       	ldd	r24, Y+9	; 0x09
    187a:	9a 85       	ldd	r25, Y+10	; 0x0a
    187c:	20 e0       	ldi	r18, 0x00	; 0
    187e:	30 e0       	ldi	r19, 0x00	; 0
    1880:	40 e8       	ldi	r20, 0x80	; 128
    1882:	5f e3       	ldi	r21, 0x3F	; 63
    1884:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1888:	88 23       	and	r24, r24
    188a:	2c f4       	brge	.+10     	; 0x1896 <send_pass+0x78>
		__ticks = 1;
    188c:	81 e0       	ldi	r24, 0x01	; 1
    188e:	90 e0       	ldi	r25, 0x00	; 0
    1890:	9e 83       	std	Y+6, r25	; 0x06
    1892:	8d 83       	std	Y+5, r24	; 0x05
    1894:	3f c0       	rjmp	.+126    	; 0x1914 <send_pass+0xf6>
	else if (__tmp > 65535)
    1896:	6f 81       	ldd	r22, Y+7	; 0x07
    1898:	78 85       	ldd	r23, Y+8	; 0x08
    189a:	89 85       	ldd	r24, Y+9	; 0x09
    189c:	9a 85       	ldd	r25, Y+10	; 0x0a
    189e:	20 e0       	ldi	r18, 0x00	; 0
    18a0:	3f ef       	ldi	r19, 0xFF	; 255
    18a2:	4f e7       	ldi	r20, 0x7F	; 127
    18a4:	57 e4       	ldi	r21, 0x47	; 71
    18a6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18aa:	18 16       	cp	r1, r24
    18ac:	4c f5       	brge	.+82     	; 0x1900 <send_pass+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    18b0:	7c 85       	ldd	r23, Y+12	; 0x0c
    18b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    18b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    18b6:	20 e0       	ldi	r18, 0x00	; 0
    18b8:	30 e0       	ldi	r19, 0x00	; 0
    18ba:	40 e2       	ldi	r20, 0x20	; 32
    18bc:	51 e4       	ldi	r21, 0x41	; 65
    18be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18c2:	dc 01       	movw	r26, r24
    18c4:	cb 01       	movw	r24, r22
    18c6:	bc 01       	movw	r22, r24
    18c8:	cd 01       	movw	r24, r26
    18ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18ce:	dc 01       	movw	r26, r24
    18d0:	cb 01       	movw	r24, r22
    18d2:	9e 83       	std	Y+6, r25	; 0x06
    18d4:	8d 83       	std	Y+5, r24	; 0x05
    18d6:	0f c0       	rjmp	.+30     	; 0x18f6 <send_pass+0xd8>
    18d8:	88 ec       	ldi	r24, 0xC8	; 200
    18da:	90 e0       	ldi	r25, 0x00	; 0
    18dc:	9c 83       	std	Y+4, r25	; 0x04
    18de:	8b 83       	std	Y+3, r24	; 0x03
    18e0:	8b 81       	ldd	r24, Y+3	; 0x03
    18e2:	9c 81       	ldd	r25, Y+4	; 0x04
    18e4:	01 97       	sbiw	r24, 0x01	; 1
    18e6:	f1 f7       	brne	.-4      	; 0x18e4 <send_pass+0xc6>
    18e8:	9c 83       	std	Y+4, r25	; 0x04
    18ea:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18ec:	8d 81       	ldd	r24, Y+5	; 0x05
    18ee:	9e 81       	ldd	r25, Y+6	; 0x06
    18f0:	01 97       	sbiw	r24, 0x01	; 1
    18f2:	9e 83       	std	Y+6, r25	; 0x06
    18f4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18f6:	8d 81       	ldd	r24, Y+5	; 0x05
    18f8:	9e 81       	ldd	r25, Y+6	; 0x06
    18fa:	00 97       	sbiw	r24, 0x00	; 0
    18fc:	69 f7       	brne	.-38     	; 0x18d8 <send_pass+0xba>
    18fe:	14 c0       	rjmp	.+40     	; 0x1928 <send_pass+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1900:	6f 81       	ldd	r22, Y+7	; 0x07
    1902:	78 85       	ldd	r23, Y+8	; 0x08
    1904:	89 85       	ldd	r24, Y+9	; 0x09
    1906:	9a 85       	ldd	r25, Y+10	; 0x0a
    1908:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    190c:	dc 01       	movw	r26, r24
    190e:	cb 01       	movw	r24, r22
    1910:	9e 83       	std	Y+6, r25	; 0x06
    1912:	8d 83       	std	Y+5, r24	; 0x05
    1914:	8d 81       	ldd	r24, Y+5	; 0x05
    1916:	9e 81       	ldd	r25, Y+6	; 0x06
    1918:	9a 83       	std	Y+2, r25	; 0x02
    191a:	89 83       	std	Y+1, r24	; 0x01
    191c:	89 81       	ldd	r24, Y+1	; 0x01
    191e:	9a 81       	ldd	r25, Y+2	; 0x02
    1920:	01 97       	sbiw	r24, 0x01	; 1
    1922:	f1 f7       	brne	.-4      	; 0x1920 <send_pass+0x102>
    1924:	9a 83       	std	Y+2, r25	; 0x02
    1926:	89 83       	std	Y+1, r24	; 0x01
	i++;
	}
}
void send_pass(uint8 *pass){		/*function to send password by uart*/
	uint8 state= FALSE;
	while (state==FALSE){
    1928:	8f 85       	ldd	r24, Y+15	; 0x0f
    192a:	88 23       	and	r24, r24
    192c:	09 f4       	brne	.+2      	; 0x1930 <send_pass+0x112>
    192e:	85 cf       	rjmp	.-246    	; 0x183a <send_pass+0x1c>
			state=First_Time_Pass(pass);
			_delay_ms(2000);
			}
		Null_to_Hash(pass);
    1930:	88 89       	ldd	r24, Y+16	; 0x10
    1932:	99 89       	ldd	r25, Y+17	; 0x11
    1934:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <Null_to_Hash>
		UART_sendByte(SEND_PASS);
    1938:	80 e0       	ldi	r24, 0x00	; 0
    193a:	0e 94 cc 17 	call	0x2f98	; 0x2f98 <UART_sendByte>
		UART_sendString(pass);	/* Send the required string to MC2 through UART */
    193e:	88 89       	ldd	r24, Y+16	; 0x10
    1940:	99 89       	ldd	r25, Y+17	; 0x11
    1942:	0e 94 f2 17 	call	0x2fe4	; 0x2fe4 <UART_sendString>
}
    1946:	61 96       	adiw	r28, 0x11	; 17
    1948:	0f b6       	in	r0, 0x3f	; 63
    194a:	f8 94       	cli
    194c:	de bf       	out	0x3e, r29	; 62
    194e:	0f be       	out	0x3f, r0	; 63
    1950:	cd bf       	out	0x3d, r28	; 61
    1952:	cf 91       	pop	r28
    1954:	df 91       	pop	r29
    1956:	08 95       	ret

00001958 <__vector_9>:

/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/
ISR(TIMER0_OVF_vect)
{
    1958:	1f 92       	push	r1
    195a:	0f 92       	push	r0
    195c:	0f b6       	in	r0, 0x3f	; 63
    195e:	0f 92       	push	r0
    1960:	11 24       	eor	r1, r1
    1962:	2f 93       	push	r18
    1964:	3f 93       	push	r19
    1966:	4f 93       	push	r20
    1968:	5f 93       	push	r21
    196a:	6f 93       	push	r22
    196c:	7f 93       	push	r23
    196e:	8f 93       	push	r24
    1970:	9f 93       	push	r25
    1972:	af 93       	push	r26
    1974:	bf 93       	push	r27
    1976:	ef 93       	push	r30
    1978:	ff 93       	push	r31
    197a:	df 93       	push	r29
    197c:	cf 93       	push	r28
    197e:	cd b7       	in	r28, 0x3d	; 61
    1980:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    1982:	80 91 10 01 	lds	r24, 0x0110
    1986:	90 91 11 01 	lds	r25, 0x0111
    198a:	00 97       	sbiw	r24, 0x00	; 0
    198c:	29 f0       	breq	.+10     	; 0x1998 <__vector_9+0x40>
	{
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    198e:	e0 91 10 01 	lds	r30, 0x0110
    1992:	f0 91 11 01 	lds	r31, 0x0111
    1996:	09 95       	icall
	}
}
    1998:	cf 91       	pop	r28
    199a:	df 91       	pop	r29
    199c:	ff 91       	pop	r31
    199e:	ef 91       	pop	r30
    19a0:	bf 91       	pop	r27
    19a2:	af 91       	pop	r26
    19a4:	9f 91       	pop	r25
    19a6:	8f 91       	pop	r24
    19a8:	7f 91       	pop	r23
    19aa:	6f 91       	pop	r22
    19ac:	5f 91       	pop	r21
    19ae:	4f 91       	pop	r20
    19b0:	3f 91       	pop	r19
    19b2:	2f 91       	pop	r18
    19b4:	0f 90       	pop	r0
    19b6:	0f be       	out	0x3f, r0	; 63
    19b8:	0f 90       	pop	r0
    19ba:	1f 90       	pop	r1
    19bc:	18 95       	reti

000019be <__vector_19>:

ISR(TIMER0_COMP_vect)
{
    19be:	1f 92       	push	r1
    19c0:	0f 92       	push	r0
    19c2:	0f b6       	in	r0, 0x3f	; 63
    19c4:	0f 92       	push	r0
    19c6:	11 24       	eor	r1, r1
    19c8:	2f 93       	push	r18
    19ca:	3f 93       	push	r19
    19cc:	4f 93       	push	r20
    19ce:	5f 93       	push	r21
    19d0:	6f 93       	push	r22
    19d2:	7f 93       	push	r23
    19d4:	8f 93       	push	r24
    19d6:	9f 93       	push	r25
    19d8:	af 93       	push	r26
    19da:	bf 93       	push	r27
    19dc:	ef 93       	push	r30
    19de:	ff 93       	push	r31
    19e0:	df 93       	push	r29
    19e2:	cf 93       	push	r28
    19e4:	cd b7       	in	r28, 0x3d	; 61
    19e6:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    19e8:	80 91 10 01 	lds	r24, 0x0110
    19ec:	90 91 11 01 	lds	r25, 0x0111
    19f0:	00 97       	sbiw	r24, 0x00	; 0
    19f2:	29 f0       	breq	.+10     	; 0x19fe <__vector_19+0x40>
	{
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    19f4:	e0 91 10 01 	lds	r30, 0x0110
    19f8:	f0 91 11 01 	lds	r31, 0x0111
    19fc:	09 95       	icall
	}
}
    19fe:	cf 91       	pop	r28
    1a00:	df 91       	pop	r29
    1a02:	ff 91       	pop	r31
    1a04:	ef 91       	pop	r30
    1a06:	bf 91       	pop	r27
    1a08:	af 91       	pop	r26
    1a0a:	9f 91       	pop	r25
    1a0c:	8f 91       	pop	r24
    1a0e:	7f 91       	pop	r23
    1a10:	6f 91       	pop	r22
    1a12:	5f 91       	pop	r21
    1a14:	4f 91       	pop	r20
    1a16:	3f 91       	pop	r19
    1a18:	2f 91       	pop	r18
    1a1a:	0f 90       	pop	r0
    1a1c:	0f be       	out	0x3f, r0	; 63
    1a1e:	0f 90       	pop	r0
    1a20:	1f 90       	pop	r1
    1a22:	18 95       	reti

00001a24 <Timer0_init>:


/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void Timer0_init(const Timer0_ConfigType * Config_Ptr){
    1a24:	df 93       	push	r29
    1a26:	cf 93       	push	r28
    1a28:	00 d0       	rcall	.+0      	; 0x1a2a <Timer0_init+0x6>
    1a2a:	cd b7       	in	r28, 0x3d	; 61
    1a2c:	de b7       	in	r29, 0x3e	; 62
    1a2e:	9a 83       	std	Y+2, r25	; 0x02
    1a30:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = 0;
    1a32:	e2 e5       	ldi	r30, 0x52	; 82
    1a34:	f0 e0       	ldi	r31, 0x00	; 0
    1a36:	10 82       	st	Z, r1
	SREG  |= (1<<7);
    1a38:	af e5       	ldi	r26, 0x5F	; 95
    1a3a:	b0 e0       	ldi	r27, 0x00	; 0
    1a3c:	ef e5       	ldi	r30, 0x5F	; 95
    1a3e:	f0 e0       	ldi	r31, 0x00	; 0
    1a40:	80 81       	ld	r24, Z
    1a42:	80 68       	ori	r24, 0x80	; 128
    1a44:	8c 93       	st	X, r24
	SET_BIT(TCCR0,FOC0);			/*Non PWM mode FOC0=1*/
    1a46:	a3 e5       	ldi	r26, 0x53	; 83
    1a48:	b0 e0       	ldi	r27, 0x00	; 0
    1a4a:	e3 e5       	ldi	r30, 0x53	; 83
    1a4c:	f0 e0       	ldi	r31, 0x00	; 0
    1a4e:	80 81       	ld	r24, Z
    1a50:	80 68       	ori	r24, 0x80	; 128
    1a52:	8c 93       	st	X, r24
	TCCR0=(TCCR0 & 0xF8) | (Config_Ptr->clock);	/*Configuring F_CPU*/
    1a54:	a3 e5       	ldi	r26, 0x53	; 83
    1a56:	b0 e0       	ldi	r27, 0x00	; 0
    1a58:	e3 e5       	ldi	r30, 0x53	; 83
    1a5a:	f0 e0       	ldi	r31, 0x00	; 0
    1a5c:	80 81       	ld	r24, Z
    1a5e:	98 2f       	mov	r25, r24
    1a60:	98 7f       	andi	r25, 0xF8	; 248
    1a62:	e9 81       	ldd	r30, Y+1	; 0x01
    1a64:	fa 81       	ldd	r31, Y+2	; 0x02
    1a66:	80 81       	ld	r24, Z
    1a68:	89 2b       	or	r24, r25
    1a6a:	8c 93       	st	X, r24
	if(Config_Ptr->mode==NORMAL){
    1a6c:	e9 81       	ldd	r30, Y+1	; 0x01
    1a6e:	fa 81       	ldd	r31, Y+2	; 0x02
    1a70:	81 81       	ldd	r24, Z+1	; 0x01
    1a72:	88 23       	and	r24, r24
    1a74:	21 f5       	brne	.+72     	; 0x1abe <Timer0_init+0x9a>
		SET_BIT(TIMSK,TOIE0);		/*Enable Timer0 Overflow Interrupt*/
    1a76:	a9 e5       	ldi	r26, 0x59	; 89
    1a78:	b0 e0       	ldi	r27, 0x00	; 0
    1a7a:	e9 e5       	ldi	r30, 0x59	; 89
    1a7c:	f0 e0       	ldi	r31, 0x00	; 0
    1a7e:	80 81       	ld	r24, Z
    1a80:	81 60       	ori	r24, 0x01	; 1
    1a82:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR0,WGM01);
    1a84:	a3 e5       	ldi	r26, 0x53	; 83
    1a86:	b0 e0       	ldi	r27, 0x00	; 0
    1a88:	e3 e5       	ldi	r30, 0x53	; 83
    1a8a:	f0 e0       	ldi	r31, 0x00	; 0
    1a8c:	80 81       	ld	r24, Z
    1a8e:	87 7f       	andi	r24, 0xF7	; 247
    1a90:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR0,WGM00); 	/*Normal Mode WGM01=0 & WGM00=0*/
    1a92:	a3 e5       	ldi	r26, 0x53	; 83
    1a94:	b0 e0       	ldi	r27, 0x00	; 0
    1a96:	e3 e5       	ldi	r30, 0x53	; 83
    1a98:	f0 e0       	ldi	r31, 0x00	; 0
    1a9a:	80 81       	ld	r24, Z
    1a9c:	8f 7b       	andi	r24, 0xBF	; 191
    1a9e:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR0,COM00);
    1aa0:	a3 e5       	ldi	r26, 0x53	; 83
    1aa2:	b0 e0       	ldi	r27, 0x00	; 0
    1aa4:	e3 e5       	ldi	r30, 0x53	; 83
    1aa6:	f0 e0       	ldi	r31, 0x00	; 0
    1aa8:	80 81       	ld	r24, Z
    1aaa:	8f 7e       	andi	r24, 0xEF	; 239
    1aac:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR0,COM01);		/*Normal Mode COM00=0 & COM01=0*/
    1aae:	a3 e5       	ldi	r26, 0x53	; 83
    1ab0:	b0 e0       	ldi	r27, 0x00	; 0
    1ab2:	e3 e5       	ldi	r30, 0x53	; 83
    1ab4:	f0 e0       	ldi	r31, 0x00	; 0
    1ab6:	80 81       	ld	r24, Z
    1ab8:	8f 7d       	andi	r24, 0xDF	; 223
    1aba:	8c 93       	st	X, r24
    1abc:	70 c0       	rjmp	.+224    	; 0x1b9e <Timer0_init+0x17a>
	}
	else if(Config_Ptr->mode==CTC){
    1abe:	e9 81       	ldd	r30, Y+1	; 0x01
    1ac0:	fa 81       	ldd	r31, Y+2	; 0x02
    1ac2:	81 81       	ldd	r24, Z+1	; 0x01
    1ac4:	81 30       	cpi	r24, 0x01	; 1
    1ac6:	09 f0       	breq	.+2      	; 0x1aca <Timer0_init+0xa6>
    1ac8:	6a c0       	rjmp	.+212    	; 0x1b9e <Timer0_init+0x17a>
		SET_BIT(TIMSK,OCIE0);		/*Enable Timer0 Compare Interrupt*/
    1aca:	a9 e5       	ldi	r26, 0x59	; 89
    1acc:	b0 e0       	ldi	r27, 0x00	; 0
    1ace:	e9 e5       	ldi	r30, 0x59	; 89
    1ad0:	f0 e0       	ldi	r31, 0x00	; 0
    1ad2:	80 81       	ld	r24, Z
    1ad4:	82 60       	ori	r24, 0x02	; 2
    1ad6:	8c 93       	st	X, r24
		SET_BIT(TCCR0,WGM01);
    1ad8:	a3 e5       	ldi	r26, 0x53	; 83
    1ada:	b0 e0       	ldi	r27, 0x00	; 0
    1adc:	e3 e5       	ldi	r30, 0x53	; 83
    1ade:	f0 e0       	ldi	r31, 0x00	; 0
    1ae0:	80 81       	ld	r24, Z
    1ae2:	88 60       	ori	r24, 0x08	; 8
    1ae4:	8c 93       	st	X, r24
		OCR0  =Config_Ptr->compare_value ;
    1ae6:	ac e5       	ldi	r26, 0x5C	; 92
    1ae8:	b0 e0       	ldi	r27, 0x00	; 0
    1aea:	e9 81       	ldd	r30, Y+1	; 0x01
    1aec:	fa 81       	ldd	r31, Y+2	; 0x02
    1aee:	82 81       	ldd	r24, Z+2	; 0x02
    1af0:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR0,WGM00); 	/*Compare Mode WGM01=1 & WGM00=0*/
    1af2:	a3 e5       	ldi	r26, 0x53	; 83
    1af4:	b0 e0       	ldi	r27, 0x00	; 0
    1af6:	e3 e5       	ldi	r30, 0x53	; 83
    1af8:	f0 e0       	ldi	r31, 0x00	; 0
    1afa:	80 81       	ld	r24, Z
    1afc:	8f 7b       	andi	r24, 0xBF	; 191
    1afe:	8c 93       	st	X, r24
		if (Config_Ptr->pin==DISCONNECTED_OC0){
    1b00:	e9 81       	ldd	r30, Y+1	; 0x01
    1b02:	fa 81       	ldd	r31, Y+2	; 0x02
    1b04:	83 81       	ldd	r24, Z+3	; 0x03
    1b06:	88 23       	and	r24, r24
    1b08:	79 f4       	brne	.+30     	; 0x1b28 <Timer0_init+0x104>
			CLEAR_BIT(TCCR0,COM00);
    1b0a:	a3 e5       	ldi	r26, 0x53	; 83
    1b0c:	b0 e0       	ldi	r27, 0x00	; 0
    1b0e:	e3 e5       	ldi	r30, 0x53	; 83
    1b10:	f0 e0       	ldi	r31, 0x00	; 0
    1b12:	80 81       	ld	r24, Z
    1b14:	8f 7e       	andi	r24, 0xEF	; 239
    1b16:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR0,COM01);
    1b18:	a3 e5       	ldi	r26, 0x53	; 83
    1b1a:	b0 e0       	ldi	r27, 0x00	; 0
    1b1c:	e3 e5       	ldi	r30, 0x53	; 83
    1b1e:	f0 e0       	ldi	r31, 0x00	; 0
    1b20:	80 81       	ld	r24, Z
    1b22:	8f 7d       	andi	r24, 0xDF	; 223
    1b24:	8c 93       	st	X, r24
    1b26:	3b c0       	rjmp	.+118    	; 0x1b9e <Timer0_init+0x17a>
		}
		else if(Config_Ptr->pin==TOGGLE_OC0){
    1b28:	e9 81       	ldd	r30, Y+1	; 0x01
    1b2a:	fa 81       	ldd	r31, Y+2	; 0x02
    1b2c:	83 81       	ldd	r24, Z+3	; 0x03
    1b2e:	81 30       	cpi	r24, 0x01	; 1
    1b30:	79 f4       	brne	.+30     	; 0x1b50 <Timer0_init+0x12c>
			SET_BIT(TCCR0,COM00);
    1b32:	a3 e5       	ldi	r26, 0x53	; 83
    1b34:	b0 e0       	ldi	r27, 0x00	; 0
    1b36:	e3 e5       	ldi	r30, 0x53	; 83
    1b38:	f0 e0       	ldi	r31, 0x00	; 0
    1b3a:	80 81       	ld	r24, Z
    1b3c:	80 61       	ori	r24, 0x10	; 16
    1b3e:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR0,COM01);
    1b40:	a3 e5       	ldi	r26, 0x53	; 83
    1b42:	b0 e0       	ldi	r27, 0x00	; 0
    1b44:	e3 e5       	ldi	r30, 0x53	; 83
    1b46:	f0 e0       	ldi	r31, 0x00	; 0
    1b48:	80 81       	ld	r24, Z
    1b4a:	8f 7d       	andi	r24, 0xDF	; 223
    1b4c:	8c 93       	st	X, r24
    1b4e:	27 c0       	rjmp	.+78     	; 0x1b9e <Timer0_init+0x17a>
		}
		else if(Config_Ptr->pin==CLEAR_OC0){
    1b50:	e9 81       	ldd	r30, Y+1	; 0x01
    1b52:	fa 81       	ldd	r31, Y+2	; 0x02
    1b54:	83 81       	ldd	r24, Z+3	; 0x03
    1b56:	82 30       	cpi	r24, 0x02	; 2
    1b58:	79 f4       	brne	.+30     	; 0x1b78 <Timer0_init+0x154>
			SET_BIT(TCCR0,COM01);
    1b5a:	a3 e5       	ldi	r26, 0x53	; 83
    1b5c:	b0 e0       	ldi	r27, 0x00	; 0
    1b5e:	e3 e5       	ldi	r30, 0x53	; 83
    1b60:	f0 e0       	ldi	r31, 0x00	; 0
    1b62:	80 81       	ld	r24, Z
    1b64:	80 62       	ori	r24, 0x20	; 32
    1b66:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR0,COM00);
    1b68:	a3 e5       	ldi	r26, 0x53	; 83
    1b6a:	b0 e0       	ldi	r27, 0x00	; 0
    1b6c:	e3 e5       	ldi	r30, 0x53	; 83
    1b6e:	f0 e0       	ldi	r31, 0x00	; 0
    1b70:	80 81       	ld	r24, Z
    1b72:	8f 7e       	andi	r24, 0xEF	; 239
    1b74:	8c 93       	st	X, r24
    1b76:	13 c0       	rjmp	.+38     	; 0x1b9e <Timer0_init+0x17a>
		}
		else if(Config_Ptr->pin==CLEAR_OC0){
    1b78:	e9 81       	ldd	r30, Y+1	; 0x01
    1b7a:	fa 81       	ldd	r31, Y+2	; 0x02
    1b7c:	83 81       	ldd	r24, Z+3	; 0x03
    1b7e:	82 30       	cpi	r24, 0x02	; 2
    1b80:	71 f4       	brne	.+28     	; 0x1b9e <Timer0_init+0x17a>
			SET_BIT(TCCR0,COM01);
    1b82:	a3 e5       	ldi	r26, 0x53	; 83
    1b84:	b0 e0       	ldi	r27, 0x00	; 0
    1b86:	e3 e5       	ldi	r30, 0x53	; 83
    1b88:	f0 e0       	ldi	r31, 0x00	; 0
    1b8a:	80 81       	ld	r24, Z
    1b8c:	80 62       	ori	r24, 0x20	; 32
    1b8e:	8c 93       	st	X, r24
			SET_BIT(TCCR0,COM00);
    1b90:	a3 e5       	ldi	r26, 0x53	; 83
    1b92:	b0 e0       	ldi	r27, 0x00	; 0
    1b94:	e3 e5       	ldi	r30, 0x53	; 83
    1b96:	f0 e0       	ldi	r31, 0x00	; 0
    1b98:	80 81       	ld	r24, Z
    1b9a:	80 61       	ori	r24, 0x10	; 16
    1b9c:	8c 93       	st	X, r24
		}
	}
}
    1b9e:	0f 90       	pop	r0
    1ba0:	0f 90       	pop	r0
    1ba2:	cf 91       	pop	r28
    1ba4:	df 91       	pop	r29
    1ba6:	08 95       	ret

00001ba8 <Timer0_setCallBack>:


void Timer0_setCallBack(void(*a_ptr)(void))
{
    1ba8:	df 93       	push	r29
    1baa:	cf 93       	push	r28
    1bac:	00 d0       	rcall	.+0      	; 0x1bae <Timer0_setCallBack+0x6>
    1bae:	cd b7       	in	r28, 0x3d	; 61
    1bb0:	de b7       	in	r29, 0x3e	; 62
    1bb2:	9a 83       	std	Y+2, r25	; 0x02
    1bb4:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
    1bb6:	89 81       	ldd	r24, Y+1	; 0x01
    1bb8:	9a 81       	ldd	r25, Y+2	; 0x02
    1bba:	90 93 11 01 	sts	0x0111, r25
    1bbe:	80 93 10 01 	sts	0x0110, r24
}
    1bc2:	0f 90       	pop	r0
    1bc4:	0f 90       	pop	r0
    1bc6:	cf 91       	pop	r28
    1bc8:	df 91       	pop	r29
    1bca:	08 95       	ret

00001bcc <Timer0_DeInit>:

void Timer0_DeInit(void)
{
    1bcc:	df 93       	push	r29
    1bce:	cf 93       	push	r28
    1bd0:	cd b7       	in	r28, 0x3d	; 61
    1bd2:	de b7       	in	r29, 0x3e	; 62
	/* Clear All Timer1 Registers */
	TCCR0 = 0;
    1bd4:	e3 e5       	ldi	r30, 0x53	; 83
    1bd6:	f0 e0       	ldi	r31, 0x00	; 0
    1bd8:	10 82       	st	Z, r1

	/* Disable the Input Capture interrupt */
	CLEAR_BIT(TIMSK,TOIE0);
    1bda:	a9 e5       	ldi	r26, 0x59	; 89
    1bdc:	b0 e0       	ldi	r27, 0x00	; 0
    1bde:	e9 e5       	ldi	r30, 0x59	; 89
    1be0:	f0 e0       	ldi	r31, 0x00	; 0
    1be2:	80 81       	ld	r24, Z
    1be4:	8e 7f       	andi	r24, 0xFE	; 254
    1be6:	8c 93       	st	X, r24
	CLEAR_BIT(TIMSK,OCIE0);
    1be8:	a9 e5       	ldi	r26, 0x59	; 89
    1bea:	b0 e0       	ldi	r27, 0x00	; 0
    1bec:	e9 e5       	ldi	r30, 0x59	; 89
    1bee:	f0 e0       	ldi	r31, 0x00	; 0
    1bf0:	80 81       	ld	r24, Z
    1bf2:	8d 7f       	andi	r24, 0xFD	; 253
    1bf4:	8c 93       	st	X, r24
}
    1bf6:	cf 91       	pop	r28
    1bf8:	df 91       	pop	r29
    1bfa:	08 95       	ret

00001bfc <delay_Timer0>:
uint16	 Timer_Counter=0;
Timer0_ConfigType Config;



void delay_Timer0(uint8 cmp_value,uint8 Num_Secs){
    1bfc:	df 93       	push	r29
    1bfe:	cf 93       	push	r28
    1c00:	00 d0       	rcall	.+0      	; 0x1c02 <delay_Timer0+0x6>
    1c02:	cd b7       	in	r28, 0x3d	; 61
    1c04:	de b7       	in	r29, 0x3e	; 62
    1c06:	89 83       	std	Y+1, r24	; 0x01
    1c08:	6a 83       	std	Y+2, r22	; 0x02
	Config.clock=F_CPU_1024;
    1c0a:	85 e0       	ldi	r24, 0x05	; 5
    1c0c:	80 93 14 01 	sts	0x0114, r24
	Config.mode=CTC;
    1c10:	81 e0       	ldi	r24, 0x01	; 1
    1c12:	80 93 15 01 	sts	0x0115, r24
	Config.compare_value=cmp_value;
    1c16:	89 81       	ldd	r24, Y+1	; 0x01
    1c18:	80 93 16 01 	sts	0x0116, r24
	Config.pin=DISCONNECTED_OC0;
    1c1c:	10 92 17 01 	sts	0x0117, r1
	Timer0_setCallBack(&delay_ISR);
    1c20:	88 e3       	ldi	r24, 0x38	; 56
    1c22:	9e e0       	ldi	r25, 0x0E	; 14
    1c24:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <Timer0_setCallBack>
	Timer0_init(&Config);
    1c28:	84 e1       	ldi	r24, 0x14	; 20
    1c2a:	91 e0       	ldi	r25, 0x01	; 1
    1c2c:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <Timer0_init>
	while(Timer_Counter<=(Num_Secs*31)){}
    1c30:	8a 81       	ldd	r24, Y+2	; 0x02
    1c32:	28 2f       	mov	r18, r24
    1c34:	30 e0       	ldi	r19, 0x00	; 0
    1c36:	8f e1       	ldi	r24, 0x1F	; 31
    1c38:	90 e0       	ldi	r25, 0x00	; 0
    1c3a:	ac 01       	movw	r20, r24
    1c3c:	24 9f       	mul	r18, r20
    1c3e:	c0 01       	movw	r24, r0
    1c40:	25 9f       	mul	r18, r21
    1c42:	90 0d       	add	r25, r0
    1c44:	34 9f       	mul	r19, r20
    1c46:	90 0d       	add	r25, r0
    1c48:	11 24       	eor	r1, r1
    1c4a:	9c 01       	movw	r18, r24
    1c4c:	80 91 12 01 	lds	r24, 0x0112
    1c50:	90 91 13 01 	lds	r25, 0x0113
    1c54:	28 17       	cp	r18, r24
    1c56:	39 07       	cpc	r19, r25
    1c58:	58 f7       	brcc	.-42     	; 0x1c30 <delay_Timer0+0x34>
	Timer0_DeInit();
    1c5a:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <Timer0_DeInit>
	Timer_Counter=0;
    1c5e:	10 92 13 01 	sts	0x0113, r1
    1c62:	10 92 12 01 	sts	0x0112, r1
}
    1c66:	0f 90       	pop	r0
    1c68:	0f 90       	pop	r0
    1c6a:	cf 91       	pop	r28
    1c6c:	df 91       	pop	r29
    1c6e:	08 95       	ret

00001c70 <delay_ISR>:

void delay_ISR(void){
    1c70:	df 93       	push	r29
    1c72:	cf 93       	push	r28
    1c74:	cd b7       	in	r28, 0x3d	; 61
    1c76:	de b7       	in	r29, 0x3e	; 62
	Timer_Counter++;
    1c78:	80 91 12 01 	lds	r24, 0x0112
    1c7c:	90 91 13 01 	lds	r25, 0x0113
    1c80:	01 96       	adiw	r24, 0x01	; 1
    1c82:	90 93 13 01 	sts	0x0113, r25
    1c86:	80 93 12 01 	sts	0x0112, r24

}
    1c8a:	cf 91       	pop	r28
    1c8c:	df 91       	pop	r29
    1c8e:	08 95       	ret

00001c90 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1c90:	df 93       	push	r29
    1c92:	cf 93       	push	r28
    1c94:	00 d0       	rcall	.+0      	; 0x1c96 <GPIO_setupPinDirection+0x6>
    1c96:	00 d0       	rcall	.+0      	; 0x1c98 <GPIO_setupPinDirection+0x8>
    1c98:	0f 92       	push	r0
    1c9a:	cd b7       	in	r28, 0x3d	; 61
    1c9c:	de b7       	in	r29, 0x3e	; 62
    1c9e:	89 83       	std	Y+1, r24	; 0x01
    1ca0:	6a 83       	std	Y+2, r22	; 0x02
    1ca2:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1ca4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca6:	88 30       	cpi	r24, 0x08	; 8
    1ca8:	08 f0       	brcs	.+2      	; 0x1cac <GPIO_setupPinDirection+0x1c>
    1caa:	d5 c0       	rjmp	.+426    	; 0x1e56 <GPIO_setupPinDirection+0x1c6>
    1cac:	89 81       	ldd	r24, Y+1	; 0x01
    1cae:	84 30       	cpi	r24, 0x04	; 4
    1cb0:	08 f0       	brcs	.+2      	; 0x1cb4 <GPIO_setupPinDirection+0x24>
    1cb2:	d1 c0       	rjmp	.+418    	; 0x1e56 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1cb4:	89 81       	ldd	r24, Y+1	; 0x01
    1cb6:	28 2f       	mov	r18, r24
    1cb8:	30 e0       	ldi	r19, 0x00	; 0
    1cba:	3d 83       	std	Y+5, r19	; 0x05
    1cbc:	2c 83       	std	Y+4, r18	; 0x04
    1cbe:	8c 81       	ldd	r24, Y+4	; 0x04
    1cc0:	9d 81       	ldd	r25, Y+5	; 0x05
    1cc2:	81 30       	cpi	r24, 0x01	; 1
    1cc4:	91 05       	cpc	r25, r1
    1cc6:	09 f4       	brne	.+2      	; 0x1cca <GPIO_setupPinDirection+0x3a>
    1cc8:	43 c0       	rjmp	.+134    	; 0x1d50 <GPIO_setupPinDirection+0xc0>
    1cca:	2c 81       	ldd	r18, Y+4	; 0x04
    1ccc:	3d 81       	ldd	r19, Y+5	; 0x05
    1cce:	22 30       	cpi	r18, 0x02	; 2
    1cd0:	31 05       	cpc	r19, r1
    1cd2:	2c f4       	brge	.+10     	; 0x1cde <GPIO_setupPinDirection+0x4e>
    1cd4:	8c 81       	ldd	r24, Y+4	; 0x04
    1cd6:	9d 81       	ldd	r25, Y+5	; 0x05
    1cd8:	00 97       	sbiw	r24, 0x00	; 0
    1cda:	71 f0       	breq	.+28     	; 0x1cf8 <GPIO_setupPinDirection+0x68>
    1cdc:	bc c0       	rjmp	.+376    	; 0x1e56 <GPIO_setupPinDirection+0x1c6>
    1cde:	2c 81       	ldd	r18, Y+4	; 0x04
    1ce0:	3d 81       	ldd	r19, Y+5	; 0x05
    1ce2:	22 30       	cpi	r18, 0x02	; 2
    1ce4:	31 05       	cpc	r19, r1
    1ce6:	09 f4       	brne	.+2      	; 0x1cea <GPIO_setupPinDirection+0x5a>
    1ce8:	5f c0       	rjmp	.+190    	; 0x1da8 <GPIO_setupPinDirection+0x118>
    1cea:	8c 81       	ldd	r24, Y+4	; 0x04
    1cec:	9d 81       	ldd	r25, Y+5	; 0x05
    1cee:	83 30       	cpi	r24, 0x03	; 3
    1cf0:	91 05       	cpc	r25, r1
    1cf2:	09 f4       	brne	.+2      	; 0x1cf6 <GPIO_setupPinDirection+0x66>
    1cf4:	85 c0       	rjmp	.+266    	; 0x1e00 <GPIO_setupPinDirection+0x170>
    1cf6:	af c0       	rjmp	.+350    	; 0x1e56 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1cf8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cfa:	81 30       	cpi	r24, 0x01	; 1
    1cfc:	a1 f4       	brne	.+40     	; 0x1d26 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1cfe:	aa e3       	ldi	r26, 0x3A	; 58
    1d00:	b0 e0       	ldi	r27, 0x00	; 0
    1d02:	ea e3       	ldi	r30, 0x3A	; 58
    1d04:	f0 e0       	ldi	r31, 0x00	; 0
    1d06:	80 81       	ld	r24, Z
    1d08:	48 2f       	mov	r20, r24
    1d0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d0c:	28 2f       	mov	r18, r24
    1d0e:	30 e0       	ldi	r19, 0x00	; 0
    1d10:	81 e0       	ldi	r24, 0x01	; 1
    1d12:	90 e0       	ldi	r25, 0x00	; 0
    1d14:	02 2e       	mov	r0, r18
    1d16:	02 c0       	rjmp	.+4      	; 0x1d1c <GPIO_setupPinDirection+0x8c>
    1d18:	88 0f       	add	r24, r24
    1d1a:	99 1f       	adc	r25, r25
    1d1c:	0a 94       	dec	r0
    1d1e:	e2 f7       	brpl	.-8      	; 0x1d18 <GPIO_setupPinDirection+0x88>
    1d20:	84 2b       	or	r24, r20
    1d22:	8c 93       	st	X, r24
    1d24:	98 c0       	rjmp	.+304    	; 0x1e56 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1d26:	aa e3       	ldi	r26, 0x3A	; 58
    1d28:	b0 e0       	ldi	r27, 0x00	; 0
    1d2a:	ea e3       	ldi	r30, 0x3A	; 58
    1d2c:	f0 e0       	ldi	r31, 0x00	; 0
    1d2e:	80 81       	ld	r24, Z
    1d30:	48 2f       	mov	r20, r24
    1d32:	8a 81       	ldd	r24, Y+2	; 0x02
    1d34:	28 2f       	mov	r18, r24
    1d36:	30 e0       	ldi	r19, 0x00	; 0
    1d38:	81 e0       	ldi	r24, 0x01	; 1
    1d3a:	90 e0       	ldi	r25, 0x00	; 0
    1d3c:	02 2e       	mov	r0, r18
    1d3e:	02 c0       	rjmp	.+4      	; 0x1d44 <GPIO_setupPinDirection+0xb4>
    1d40:	88 0f       	add	r24, r24
    1d42:	99 1f       	adc	r25, r25
    1d44:	0a 94       	dec	r0
    1d46:	e2 f7       	brpl	.-8      	; 0x1d40 <GPIO_setupPinDirection+0xb0>
    1d48:	80 95       	com	r24
    1d4a:	84 23       	and	r24, r20
    1d4c:	8c 93       	st	X, r24
    1d4e:	83 c0       	rjmp	.+262    	; 0x1e56 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1d50:	8b 81       	ldd	r24, Y+3	; 0x03
    1d52:	81 30       	cpi	r24, 0x01	; 1
    1d54:	a1 f4       	brne	.+40     	; 0x1d7e <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1d56:	a7 e3       	ldi	r26, 0x37	; 55
    1d58:	b0 e0       	ldi	r27, 0x00	; 0
    1d5a:	e7 e3       	ldi	r30, 0x37	; 55
    1d5c:	f0 e0       	ldi	r31, 0x00	; 0
    1d5e:	80 81       	ld	r24, Z
    1d60:	48 2f       	mov	r20, r24
    1d62:	8a 81       	ldd	r24, Y+2	; 0x02
    1d64:	28 2f       	mov	r18, r24
    1d66:	30 e0       	ldi	r19, 0x00	; 0
    1d68:	81 e0       	ldi	r24, 0x01	; 1
    1d6a:	90 e0       	ldi	r25, 0x00	; 0
    1d6c:	02 2e       	mov	r0, r18
    1d6e:	02 c0       	rjmp	.+4      	; 0x1d74 <GPIO_setupPinDirection+0xe4>
    1d70:	88 0f       	add	r24, r24
    1d72:	99 1f       	adc	r25, r25
    1d74:	0a 94       	dec	r0
    1d76:	e2 f7       	brpl	.-8      	; 0x1d70 <GPIO_setupPinDirection+0xe0>
    1d78:	84 2b       	or	r24, r20
    1d7a:	8c 93       	st	X, r24
    1d7c:	6c c0       	rjmp	.+216    	; 0x1e56 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1d7e:	a7 e3       	ldi	r26, 0x37	; 55
    1d80:	b0 e0       	ldi	r27, 0x00	; 0
    1d82:	e7 e3       	ldi	r30, 0x37	; 55
    1d84:	f0 e0       	ldi	r31, 0x00	; 0
    1d86:	80 81       	ld	r24, Z
    1d88:	48 2f       	mov	r20, r24
    1d8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d8c:	28 2f       	mov	r18, r24
    1d8e:	30 e0       	ldi	r19, 0x00	; 0
    1d90:	81 e0       	ldi	r24, 0x01	; 1
    1d92:	90 e0       	ldi	r25, 0x00	; 0
    1d94:	02 2e       	mov	r0, r18
    1d96:	02 c0       	rjmp	.+4      	; 0x1d9c <GPIO_setupPinDirection+0x10c>
    1d98:	88 0f       	add	r24, r24
    1d9a:	99 1f       	adc	r25, r25
    1d9c:	0a 94       	dec	r0
    1d9e:	e2 f7       	brpl	.-8      	; 0x1d98 <GPIO_setupPinDirection+0x108>
    1da0:	80 95       	com	r24
    1da2:	84 23       	and	r24, r20
    1da4:	8c 93       	st	X, r24
    1da6:	57 c0       	rjmp	.+174    	; 0x1e56 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1da8:	8b 81       	ldd	r24, Y+3	; 0x03
    1daa:	81 30       	cpi	r24, 0x01	; 1
    1dac:	a1 f4       	brne	.+40     	; 0x1dd6 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1dae:	a4 e3       	ldi	r26, 0x34	; 52
    1db0:	b0 e0       	ldi	r27, 0x00	; 0
    1db2:	e4 e3       	ldi	r30, 0x34	; 52
    1db4:	f0 e0       	ldi	r31, 0x00	; 0
    1db6:	80 81       	ld	r24, Z
    1db8:	48 2f       	mov	r20, r24
    1dba:	8a 81       	ldd	r24, Y+2	; 0x02
    1dbc:	28 2f       	mov	r18, r24
    1dbe:	30 e0       	ldi	r19, 0x00	; 0
    1dc0:	81 e0       	ldi	r24, 0x01	; 1
    1dc2:	90 e0       	ldi	r25, 0x00	; 0
    1dc4:	02 2e       	mov	r0, r18
    1dc6:	02 c0       	rjmp	.+4      	; 0x1dcc <GPIO_setupPinDirection+0x13c>
    1dc8:	88 0f       	add	r24, r24
    1dca:	99 1f       	adc	r25, r25
    1dcc:	0a 94       	dec	r0
    1dce:	e2 f7       	brpl	.-8      	; 0x1dc8 <GPIO_setupPinDirection+0x138>
    1dd0:	84 2b       	or	r24, r20
    1dd2:	8c 93       	st	X, r24
    1dd4:	40 c0       	rjmp	.+128    	; 0x1e56 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1dd6:	a4 e3       	ldi	r26, 0x34	; 52
    1dd8:	b0 e0       	ldi	r27, 0x00	; 0
    1dda:	e4 e3       	ldi	r30, 0x34	; 52
    1ddc:	f0 e0       	ldi	r31, 0x00	; 0
    1dde:	80 81       	ld	r24, Z
    1de0:	48 2f       	mov	r20, r24
    1de2:	8a 81       	ldd	r24, Y+2	; 0x02
    1de4:	28 2f       	mov	r18, r24
    1de6:	30 e0       	ldi	r19, 0x00	; 0
    1de8:	81 e0       	ldi	r24, 0x01	; 1
    1dea:	90 e0       	ldi	r25, 0x00	; 0
    1dec:	02 2e       	mov	r0, r18
    1dee:	02 c0       	rjmp	.+4      	; 0x1df4 <GPIO_setupPinDirection+0x164>
    1df0:	88 0f       	add	r24, r24
    1df2:	99 1f       	adc	r25, r25
    1df4:	0a 94       	dec	r0
    1df6:	e2 f7       	brpl	.-8      	; 0x1df0 <GPIO_setupPinDirection+0x160>
    1df8:	80 95       	com	r24
    1dfa:	84 23       	and	r24, r20
    1dfc:	8c 93       	st	X, r24
    1dfe:	2b c0       	rjmp	.+86     	; 0x1e56 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1e00:	8b 81       	ldd	r24, Y+3	; 0x03
    1e02:	81 30       	cpi	r24, 0x01	; 1
    1e04:	a1 f4       	brne	.+40     	; 0x1e2e <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1e06:	a1 e3       	ldi	r26, 0x31	; 49
    1e08:	b0 e0       	ldi	r27, 0x00	; 0
    1e0a:	e1 e3       	ldi	r30, 0x31	; 49
    1e0c:	f0 e0       	ldi	r31, 0x00	; 0
    1e0e:	80 81       	ld	r24, Z
    1e10:	48 2f       	mov	r20, r24
    1e12:	8a 81       	ldd	r24, Y+2	; 0x02
    1e14:	28 2f       	mov	r18, r24
    1e16:	30 e0       	ldi	r19, 0x00	; 0
    1e18:	81 e0       	ldi	r24, 0x01	; 1
    1e1a:	90 e0       	ldi	r25, 0x00	; 0
    1e1c:	02 2e       	mov	r0, r18
    1e1e:	02 c0       	rjmp	.+4      	; 0x1e24 <GPIO_setupPinDirection+0x194>
    1e20:	88 0f       	add	r24, r24
    1e22:	99 1f       	adc	r25, r25
    1e24:	0a 94       	dec	r0
    1e26:	e2 f7       	brpl	.-8      	; 0x1e20 <GPIO_setupPinDirection+0x190>
    1e28:	84 2b       	or	r24, r20
    1e2a:	8c 93       	st	X, r24
    1e2c:	14 c0       	rjmp	.+40     	; 0x1e56 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1e2e:	a1 e3       	ldi	r26, 0x31	; 49
    1e30:	b0 e0       	ldi	r27, 0x00	; 0
    1e32:	e1 e3       	ldi	r30, 0x31	; 49
    1e34:	f0 e0       	ldi	r31, 0x00	; 0
    1e36:	80 81       	ld	r24, Z
    1e38:	48 2f       	mov	r20, r24
    1e3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e3c:	28 2f       	mov	r18, r24
    1e3e:	30 e0       	ldi	r19, 0x00	; 0
    1e40:	81 e0       	ldi	r24, 0x01	; 1
    1e42:	90 e0       	ldi	r25, 0x00	; 0
    1e44:	02 2e       	mov	r0, r18
    1e46:	02 c0       	rjmp	.+4      	; 0x1e4c <GPIO_setupPinDirection+0x1bc>
    1e48:	88 0f       	add	r24, r24
    1e4a:	99 1f       	adc	r25, r25
    1e4c:	0a 94       	dec	r0
    1e4e:	e2 f7       	brpl	.-8      	; 0x1e48 <GPIO_setupPinDirection+0x1b8>
    1e50:	80 95       	com	r24
    1e52:	84 23       	and	r24, r20
    1e54:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1e56:	0f 90       	pop	r0
    1e58:	0f 90       	pop	r0
    1e5a:	0f 90       	pop	r0
    1e5c:	0f 90       	pop	r0
    1e5e:	0f 90       	pop	r0
    1e60:	cf 91       	pop	r28
    1e62:	df 91       	pop	r29
    1e64:	08 95       	ret

00001e66 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1e66:	df 93       	push	r29
    1e68:	cf 93       	push	r28
    1e6a:	00 d0       	rcall	.+0      	; 0x1e6c <GPIO_writePin+0x6>
    1e6c:	00 d0       	rcall	.+0      	; 0x1e6e <GPIO_writePin+0x8>
    1e6e:	0f 92       	push	r0
    1e70:	cd b7       	in	r28, 0x3d	; 61
    1e72:	de b7       	in	r29, 0x3e	; 62
    1e74:	89 83       	std	Y+1, r24	; 0x01
    1e76:	6a 83       	std	Y+2, r22	; 0x02
    1e78:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1e7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e7c:	88 30       	cpi	r24, 0x08	; 8
    1e7e:	08 f0       	brcs	.+2      	; 0x1e82 <GPIO_writePin+0x1c>
    1e80:	d5 c0       	rjmp	.+426    	; 0x202c <GPIO_writePin+0x1c6>
    1e82:	89 81       	ldd	r24, Y+1	; 0x01
    1e84:	84 30       	cpi	r24, 0x04	; 4
    1e86:	08 f0       	brcs	.+2      	; 0x1e8a <GPIO_writePin+0x24>
    1e88:	d1 c0       	rjmp	.+418    	; 0x202c <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1e8a:	89 81       	ldd	r24, Y+1	; 0x01
    1e8c:	28 2f       	mov	r18, r24
    1e8e:	30 e0       	ldi	r19, 0x00	; 0
    1e90:	3d 83       	std	Y+5, r19	; 0x05
    1e92:	2c 83       	std	Y+4, r18	; 0x04
    1e94:	8c 81       	ldd	r24, Y+4	; 0x04
    1e96:	9d 81       	ldd	r25, Y+5	; 0x05
    1e98:	81 30       	cpi	r24, 0x01	; 1
    1e9a:	91 05       	cpc	r25, r1
    1e9c:	09 f4       	brne	.+2      	; 0x1ea0 <GPIO_writePin+0x3a>
    1e9e:	43 c0       	rjmp	.+134    	; 0x1f26 <GPIO_writePin+0xc0>
    1ea0:	2c 81       	ldd	r18, Y+4	; 0x04
    1ea2:	3d 81       	ldd	r19, Y+5	; 0x05
    1ea4:	22 30       	cpi	r18, 0x02	; 2
    1ea6:	31 05       	cpc	r19, r1
    1ea8:	2c f4       	brge	.+10     	; 0x1eb4 <GPIO_writePin+0x4e>
    1eaa:	8c 81       	ldd	r24, Y+4	; 0x04
    1eac:	9d 81       	ldd	r25, Y+5	; 0x05
    1eae:	00 97       	sbiw	r24, 0x00	; 0
    1eb0:	71 f0       	breq	.+28     	; 0x1ece <GPIO_writePin+0x68>
    1eb2:	bc c0       	rjmp	.+376    	; 0x202c <GPIO_writePin+0x1c6>
    1eb4:	2c 81       	ldd	r18, Y+4	; 0x04
    1eb6:	3d 81       	ldd	r19, Y+5	; 0x05
    1eb8:	22 30       	cpi	r18, 0x02	; 2
    1eba:	31 05       	cpc	r19, r1
    1ebc:	09 f4       	brne	.+2      	; 0x1ec0 <GPIO_writePin+0x5a>
    1ebe:	5f c0       	rjmp	.+190    	; 0x1f7e <GPIO_writePin+0x118>
    1ec0:	8c 81       	ldd	r24, Y+4	; 0x04
    1ec2:	9d 81       	ldd	r25, Y+5	; 0x05
    1ec4:	83 30       	cpi	r24, 0x03	; 3
    1ec6:	91 05       	cpc	r25, r1
    1ec8:	09 f4       	brne	.+2      	; 0x1ecc <GPIO_writePin+0x66>
    1eca:	85 c0       	rjmp	.+266    	; 0x1fd6 <GPIO_writePin+0x170>
    1ecc:	af c0       	rjmp	.+350    	; 0x202c <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1ece:	8b 81       	ldd	r24, Y+3	; 0x03
    1ed0:	81 30       	cpi	r24, 0x01	; 1
    1ed2:	a1 f4       	brne	.+40     	; 0x1efc <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1ed4:	ab e3       	ldi	r26, 0x3B	; 59
    1ed6:	b0 e0       	ldi	r27, 0x00	; 0
    1ed8:	eb e3       	ldi	r30, 0x3B	; 59
    1eda:	f0 e0       	ldi	r31, 0x00	; 0
    1edc:	80 81       	ld	r24, Z
    1ede:	48 2f       	mov	r20, r24
    1ee0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ee2:	28 2f       	mov	r18, r24
    1ee4:	30 e0       	ldi	r19, 0x00	; 0
    1ee6:	81 e0       	ldi	r24, 0x01	; 1
    1ee8:	90 e0       	ldi	r25, 0x00	; 0
    1eea:	02 2e       	mov	r0, r18
    1eec:	02 c0       	rjmp	.+4      	; 0x1ef2 <GPIO_writePin+0x8c>
    1eee:	88 0f       	add	r24, r24
    1ef0:	99 1f       	adc	r25, r25
    1ef2:	0a 94       	dec	r0
    1ef4:	e2 f7       	brpl	.-8      	; 0x1eee <GPIO_writePin+0x88>
    1ef6:	84 2b       	or	r24, r20
    1ef8:	8c 93       	st	X, r24
    1efa:	98 c0       	rjmp	.+304    	; 0x202c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1efc:	ab e3       	ldi	r26, 0x3B	; 59
    1efe:	b0 e0       	ldi	r27, 0x00	; 0
    1f00:	eb e3       	ldi	r30, 0x3B	; 59
    1f02:	f0 e0       	ldi	r31, 0x00	; 0
    1f04:	80 81       	ld	r24, Z
    1f06:	48 2f       	mov	r20, r24
    1f08:	8a 81       	ldd	r24, Y+2	; 0x02
    1f0a:	28 2f       	mov	r18, r24
    1f0c:	30 e0       	ldi	r19, 0x00	; 0
    1f0e:	81 e0       	ldi	r24, 0x01	; 1
    1f10:	90 e0       	ldi	r25, 0x00	; 0
    1f12:	02 2e       	mov	r0, r18
    1f14:	02 c0       	rjmp	.+4      	; 0x1f1a <GPIO_writePin+0xb4>
    1f16:	88 0f       	add	r24, r24
    1f18:	99 1f       	adc	r25, r25
    1f1a:	0a 94       	dec	r0
    1f1c:	e2 f7       	brpl	.-8      	; 0x1f16 <GPIO_writePin+0xb0>
    1f1e:	80 95       	com	r24
    1f20:	84 23       	and	r24, r20
    1f22:	8c 93       	st	X, r24
    1f24:	83 c0       	rjmp	.+262    	; 0x202c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1f26:	8b 81       	ldd	r24, Y+3	; 0x03
    1f28:	81 30       	cpi	r24, 0x01	; 1
    1f2a:	a1 f4       	brne	.+40     	; 0x1f54 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1f2c:	a8 e3       	ldi	r26, 0x38	; 56
    1f2e:	b0 e0       	ldi	r27, 0x00	; 0
    1f30:	e8 e3       	ldi	r30, 0x38	; 56
    1f32:	f0 e0       	ldi	r31, 0x00	; 0
    1f34:	80 81       	ld	r24, Z
    1f36:	48 2f       	mov	r20, r24
    1f38:	8a 81       	ldd	r24, Y+2	; 0x02
    1f3a:	28 2f       	mov	r18, r24
    1f3c:	30 e0       	ldi	r19, 0x00	; 0
    1f3e:	81 e0       	ldi	r24, 0x01	; 1
    1f40:	90 e0       	ldi	r25, 0x00	; 0
    1f42:	02 2e       	mov	r0, r18
    1f44:	02 c0       	rjmp	.+4      	; 0x1f4a <GPIO_writePin+0xe4>
    1f46:	88 0f       	add	r24, r24
    1f48:	99 1f       	adc	r25, r25
    1f4a:	0a 94       	dec	r0
    1f4c:	e2 f7       	brpl	.-8      	; 0x1f46 <GPIO_writePin+0xe0>
    1f4e:	84 2b       	or	r24, r20
    1f50:	8c 93       	st	X, r24
    1f52:	6c c0       	rjmp	.+216    	; 0x202c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1f54:	a8 e3       	ldi	r26, 0x38	; 56
    1f56:	b0 e0       	ldi	r27, 0x00	; 0
    1f58:	e8 e3       	ldi	r30, 0x38	; 56
    1f5a:	f0 e0       	ldi	r31, 0x00	; 0
    1f5c:	80 81       	ld	r24, Z
    1f5e:	48 2f       	mov	r20, r24
    1f60:	8a 81       	ldd	r24, Y+2	; 0x02
    1f62:	28 2f       	mov	r18, r24
    1f64:	30 e0       	ldi	r19, 0x00	; 0
    1f66:	81 e0       	ldi	r24, 0x01	; 1
    1f68:	90 e0       	ldi	r25, 0x00	; 0
    1f6a:	02 2e       	mov	r0, r18
    1f6c:	02 c0       	rjmp	.+4      	; 0x1f72 <GPIO_writePin+0x10c>
    1f6e:	88 0f       	add	r24, r24
    1f70:	99 1f       	adc	r25, r25
    1f72:	0a 94       	dec	r0
    1f74:	e2 f7       	brpl	.-8      	; 0x1f6e <GPIO_writePin+0x108>
    1f76:	80 95       	com	r24
    1f78:	84 23       	and	r24, r20
    1f7a:	8c 93       	st	X, r24
    1f7c:	57 c0       	rjmp	.+174    	; 0x202c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1f7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f80:	81 30       	cpi	r24, 0x01	; 1
    1f82:	a1 f4       	brne	.+40     	; 0x1fac <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1f84:	a5 e3       	ldi	r26, 0x35	; 53
    1f86:	b0 e0       	ldi	r27, 0x00	; 0
    1f88:	e5 e3       	ldi	r30, 0x35	; 53
    1f8a:	f0 e0       	ldi	r31, 0x00	; 0
    1f8c:	80 81       	ld	r24, Z
    1f8e:	48 2f       	mov	r20, r24
    1f90:	8a 81       	ldd	r24, Y+2	; 0x02
    1f92:	28 2f       	mov	r18, r24
    1f94:	30 e0       	ldi	r19, 0x00	; 0
    1f96:	81 e0       	ldi	r24, 0x01	; 1
    1f98:	90 e0       	ldi	r25, 0x00	; 0
    1f9a:	02 2e       	mov	r0, r18
    1f9c:	02 c0       	rjmp	.+4      	; 0x1fa2 <GPIO_writePin+0x13c>
    1f9e:	88 0f       	add	r24, r24
    1fa0:	99 1f       	adc	r25, r25
    1fa2:	0a 94       	dec	r0
    1fa4:	e2 f7       	brpl	.-8      	; 0x1f9e <GPIO_writePin+0x138>
    1fa6:	84 2b       	or	r24, r20
    1fa8:	8c 93       	st	X, r24
    1faa:	40 c0       	rjmp	.+128    	; 0x202c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1fac:	a5 e3       	ldi	r26, 0x35	; 53
    1fae:	b0 e0       	ldi	r27, 0x00	; 0
    1fb0:	e5 e3       	ldi	r30, 0x35	; 53
    1fb2:	f0 e0       	ldi	r31, 0x00	; 0
    1fb4:	80 81       	ld	r24, Z
    1fb6:	48 2f       	mov	r20, r24
    1fb8:	8a 81       	ldd	r24, Y+2	; 0x02
    1fba:	28 2f       	mov	r18, r24
    1fbc:	30 e0       	ldi	r19, 0x00	; 0
    1fbe:	81 e0       	ldi	r24, 0x01	; 1
    1fc0:	90 e0       	ldi	r25, 0x00	; 0
    1fc2:	02 2e       	mov	r0, r18
    1fc4:	02 c0       	rjmp	.+4      	; 0x1fca <GPIO_writePin+0x164>
    1fc6:	88 0f       	add	r24, r24
    1fc8:	99 1f       	adc	r25, r25
    1fca:	0a 94       	dec	r0
    1fcc:	e2 f7       	brpl	.-8      	; 0x1fc6 <GPIO_writePin+0x160>
    1fce:	80 95       	com	r24
    1fd0:	84 23       	and	r24, r20
    1fd2:	8c 93       	st	X, r24
    1fd4:	2b c0       	rjmp	.+86     	; 0x202c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1fd6:	8b 81       	ldd	r24, Y+3	; 0x03
    1fd8:	81 30       	cpi	r24, 0x01	; 1
    1fda:	a1 f4       	brne	.+40     	; 0x2004 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1fdc:	a2 e3       	ldi	r26, 0x32	; 50
    1fde:	b0 e0       	ldi	r27, 0x00	; 0
    1fe0:	e2 e3       	ldi	r30, 0x32	; 50
    1fe2:	f0 e0       	ldi	r31, 0x00	; 0
    1fe4:	80 81       	ld	r24, Z
    1fe6:	48 2f       	mov	r20, r24
    1fe8:	8a 81       	ldd	r24, Y+2	; 0x02
    1fea:	28 2f       	mov	r18, r24
    1fec:	30 e0       	ldi	r19, 0x00	; 0
    1fee:	81 e0       	ldi	r24, 0x01	; 1
    1ff0:	90 e0       	ldi	r25, 0x00	; 0
    1ff2:	02 2e       	mov	r0, r18
    1ff4:	02 c0       	rjmp	.+4      	; 0x1ffa <GPIO_writePin+0x194>
    1ff6:	88 0f       	add	r24, r24
    1ff8:	99 1f       	adc	r25, r25
    1ffa:	0a 94       	dec	r0
    1ffc:	e2 f7       	brpl	.-8      	; 0x1ff6 <GPIO_writePin+0x190>
    1ffe:	84 2b       	or	r24, r20
    2000:	8c 93       	st	X, r24
    2002:	14 c0       	rjmp	.+40     	; 0x202c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    2004:	a2 e3       	ldi	r26, 0x32	; 50
    2006:	b0 e0       	ldi	r27, 0x00	; 0
    2008:	e2 e3       	ldi	r30, 0x32	; 50
    200a:	f0 e0       	ldi	r31, 0x00	; 0
    200c:	80 81       	ld	r24, Z
    200e:	48 2f       	mov	r20, r24
    2010:	8a 81       	ldd	r24, Y+2	; 0x02
    2012:	28 2f       	mov	r18, r24
    2014:	30 e0       	ldi	r19, 0x00	; 0
    2016:	81 e0       	ldi	r24, 0x01	; 1
    2018:	90 e0       	ldi	r25, 0x00	; 0
    201a:	02 2e       	mov	r0, r18
    201c:	02 c0       	rjmp	.+4      	; 0x2022 <GPIO_writePin+0x1bc>
    201e:	88 0f       	add	r24, r24
    2020:	99 1f       	adc	r25, r25
    2022:	0a 94       	dec	r0
    2024:	e2 f7       	brpl	.-8      	; 0x201e <GPIO_writePin+0x1b8>
    2026:	80 95       	com	r24
    2028:	84 23       	and	r24, r20
    202a:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    202c:	0f 90       	pop	r0
    202e:	0f 90       	pop	r0
    2030:	0f 90       	pop	r0
    2032:	0f 90       	pop	r0
    2034:	0f 90       	pop	r0
    2036:	cf 91       	pop	r28
    2038:	df 91       	pop	r29
    203a:	08 95       	ret

0000203c <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    203c:	df 93       	push	r29
    203e:	cf 93       	push	r28
    2040:	00 d0       	rcall	.+0      	; 0x2042 <GPIO_readPin+0x6>
    2042:	00 d0       	rcall	.+0      	; 0x2044 <GPIO_readPin+0x8>
    2044:	0f 92       	push	r0
    2046:	cd b7       	in	r28, 0x3d	; 61
    2048:	de b7       	in	r29, 0x3e	; 62
    204a:	8a 83       	std	Y+2, r24	; 0x02
    204c:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    204e:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    2050:	8b 81       	ldd	r24, Y+3	; 0x03
    2052:	88 30       	cpi	r24, 0x08	; 8
    2054:	08 f0       	brcs	.+2      	; 0x2058 <GPIO_readPin+0x1c>
    2056:	84 c0       	rjmp	.+264    	; 0x2160 <GPIO_readPin+0x124>
    2058:	8a 81       	ldd	r24, Y+2	; 0x02
    205a:	84 30       	cpi	r24, 0x04	; 4
    205c:	08 f0       	brcs	.+2      	; 0x2060 <GPIO_readPin+0x24>
    205e:	80 c0       	rjmp	.+256    	; 0x2160 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    2060:	8a 81       	ldd	r24, Y+2	; 0x02
    2062:	28 2f       	mov	r18, r24
    2064:	30 e0       	ldi	r19, 0x00	; 0
    2066:	3d 83       	std	Y+5, r19	; 0x05
    2068:	2c 83       	std	Y+4, r18	; 0x04
    206a:	4c 81       	ldd	r20, Y+4	; 0x04
    206c:	5d 81       	ldd	r21, Y+5	; 0x05
    206e:	41 30       	cpi	r20, 0x01	; 1
    2070:	51 05       	cpc	r21, r1
    2072:	79 f1       	breq	.+94     	; 0x20d2 <GPIO_readPin+0x96>
    2074:	8c 81       	ldd	r24, Y+4	; 0x04
    2076:	9d 81       	ldd	r25, Y+5	; 0x05
    2078:	82 30       	cpi	r24, 0x02	; 2
    207a:	91 05       	cpc	r25, r1
    207c:	34 f4       	brge	.+12     	; 0x208a <GPIO_readPin+0x4e>
    207e:	2c 81       	ldd	r18, Y+4	; 0x04
    2080:	3d 81       	ldd	r19, Y+5	; 0x05
    2082:	21 15       	cp	r18, r1
    2084:	31 05       	cpc	r19, r1
    2086:	69 f0       	breq	.+26     	; 0x20a2 <GPIO_readPin+0x66>
    2088:	6b c0       	rjmp	.+214    	; 0x2160 <GPIO_readPin+0x124>
    208a:	4c 81       	ldd	r20, Y+4	; 0x04
    208c:	5d 81       	ldd	r21, Y+5	; 0x05
    208e:	42 30       	cpi	r20, 0x02	; 2
    2090:	51 05       	cpc	r21, r1
    2092:	b9 f1       	breq	.+110    	; 0x2102 <GPIO_readPin+0xc6>
    2094:	8c 81       	ldd	r24, Y+4	; 0x04
    2096:	9d 81       	ldd	r25, Y+5	; 0x05
    2098:	83 30       	cpi	r24, 0x03	; 3
    209a:	91 05       	cpc	r25, r1
    209c:	09 f4       	brne	.+2      	; 0x20a0 <GPIO_readPin+0x64>
    209e:	49 c0       	rjmp	.+146    	; 0x2132 <GPIO_readPin+0xf6>
    20a0:	5f c0       	rjmp	.+190    	; 0x2160 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    20a2:	e9 e3       	ldi	r30, 0x39	; 57
    20a4:	f0 e0       	ldi	r31, 0x00	; 0
    20a6:	80 81       	ld	r24, Z
    20a8:	28 2f       	mov	r18, r24
    20aa:	30 e0       	ldi	r19, 0x00	; 0
    20ac:	8b 81       	ldd	r24, Y+3	; 0x03
    20ae:	88 2f       	mov	r24, r24
    20b0:	90 e0       	ldi	r25, 0x00	; 0
    20b2:	a9 01       	movw	r20, r18
    20b4:	02 c0       	rjmp	.+4      	; 0x20ba <GPIO_readPin+0x7e>
    20b6:	55 95       	asr	r21
    20b8:	47 95       	ror	r20
    20ba:	8a 95       	dec	r24
    20bc:	e2 f7       	brpl	.-8      	; 0x20b6 <GPIO_readPin+0x7a>
    20be:	ca 01       	movw	r24, r20
    20c0:	81 70       	andi	r24, 0x01	; 1
    20c2:	90 70       	andi	r25, 0x00	; 0
    20c4:	88 23       	and	r24, r24
    20c6:	19 f0       	breq	.+6      	; 0x20ce <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    20c8:	81 e0       	ldi	r24, 0x01	; 1
    20ca:	89 83       	std	Y+1, r24	; 0x01
    20cc:	49 c0       	rjmp	.+146    	; 0x2160 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    20ce:	19 82       	std	Y+1, r1	; 0x01
    20d0:	47 c0       	rjmp	.+142    	; 0x2160 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    20d2:	e6 e3       	ldi	r30, 0x36	; 54
    20d4:	f0 e0       	ldi	r31, 0x00	; 0
    20d6:	80 81       	ld	r24, Z
    20d8:	28 2f       	mov	r18, r24
    20da:	30 e0       	ldi	r19, 0x00	; 0
    20dc:	8b 81       	ldd	r24, Y+3	; 0x03
    20de:	88 2f       	mov	r24, r24
    20e0:	90 e0       	ldi	r25, 0x00	; 0
    20e2:	a9 01       	movw	r20, r18
    20e4:	02 c0       	rjmp	.+4      	; 0x20ea <GPIO_readPin+0xae>
    20e6:	55 95       	asr	r21
    20e8:	47 95       	ror	r20
    20ea:	8a 95       	dec	r24
    20ec:	e2 f7       	brpl	.-8      	; 0x20e6 <GPIO_readPin+0xaa>
    20ee:	ca 01       	movw	r24, r20
    20f0:	81 70       	andi	r24, 0x01	; 1
    20f2:	90 70       	andi	r25, 0x00	; 0
    20f4:	88 23       	and	r24, r24
    20f6:	19 f0       	breq	.+6      	; 0x20fe <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    20f8:	81 e0       	ldi	r24, 0x01	; 1
    20fa:	89 83       	std	Y+1, r24	; 0x01
    20fc:	31 c0       	rjmp	.+98     	; 0x2160 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    20fe:	19 82       	std	Y+1, r1	; 0x01
    2100:	2f c0       	rjmp	.+94     	; 0x2160 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    2102:	e3 e3       	ldi	r30, 0x33	; 51
    2104:	f0 e0       	ldi	r31, 0x00	; 0
    2106:	80 81       	ld	r24, Z
    2108:	28 2f       	mov	r18, r24
    210a:	30 e0       	ldi	r19, 0x00	; 0
    210c:	8b 81       	ldd	r24, Y+3	; 0x03
    210e:	88 2f       	mov	r24, r24
    2110:	90 e0       	ldi	r25, 0x00	; 0
    2112:	a9 01       	movw	r20, r18
    2114:	02 c0       	rjmp	.+4      	; 0x211a <GPIO_readPin+0xde>
    2116:	55 95       	asr	r21
    2118:	47 95       	ror	r20
    211a:	8a 95       	dec	r24
    211c:	e2 f7       	brpl	.-8      	; 0x2116 <GPIO_readPin+0xda>
    211e:	ca 01       	movw	r24, r20
    2120:	81 70       	andi	r24, 0x01	; 1
    2122:	90 70       	andi	r25, 0x00	; 0
    2124:	88 23       	and	r24, r24
    2126:	19 f0       	breq	.+6      	; 0x212e <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    2128:	81 e0       	ldi	r24, 0x01	; 1
    212a:	89 83       	std	Y+1, r24	; 0x01
    212c:	19 c0       	rjmp	.+50     	; 0x2160 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    212e:	19 82       	std	Y+1, r1	; 0x01
    2130:	17 c0       	rjmp	.+46     	; 0x2160 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    2132:	e0 e3       	ldi	r30, 0x30	; 48
    2134:	f0 e0       	ldi	r31, 0x00	; 0
    2136:	80 81       	ld	r24, Z
    2138:	28 2f       	mov	r18, r24
    213a:	30 e0       	ldi	r19, 0x00	; 0
    213c:	8b 81       	ldd	r24, Y+3	; 0x03
    213e:	88 2f       	mov	r24, r24
    2140:	90 e0       	ldi	r25, 0x00	; 0
    2142:	a9 01       	movw	r20, r18
    2144:	02 c0       	rjmp	.+4      	; 0x214a <GPIO_readPin+0x10e>
    2146:	55 95       	asr	r21
    2148:	47 95       	ror	r20
    214a:	8a 95       	dec	r24
    214c:	e2 f7       	brpl	.-8      	; 0x2146 <GPIO_readPin+0x10a>
    214e:	ca 01       	movw	r24, r20
    2150:	81 70       	andi	r24, 0x01	; 1
    2152:	90 70       	andi	r25, 0x00	; 0
    2154:	88 23       	and	r24, r24
    2156:	19 f0       	breq	.+6      	; 0x215e <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    2158:	81 e0       	ldi	r24, 0x01	; 1
    215a:	89 83       	std	Y+1, r24	; 0x01
    215c:	01 c0       	rjmp	.+2      	; 0x2160 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    215e:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    2160:	89 81       	ldd	r24, Y+1	; 0x01
}
    2162:	0f 90       	pop	r0
    2164:	0f 90       	pop	r0
    2166:	0f 90       	pop	r0
    2168:	0f 90       	pop	r0
    216a:	0f 90       	pop	r0
    216c:	cf 91       	pop	r28
    216e:	df 91       	pop	r29
    2170:	08 95       	ret

00002172 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    2172:	df 93       	push	r29
    2174:	cf 93       	push	r28
    2176:	00 d0       	rcall	.+0      	; 0x2178 <GPIO_setupPortDirection+0x6>
    2178:	00 d0       	rcall	.+0      	; 0x217a <GPIO_setupPortDirection+0x8>
    217a:	cd b7       	in	r28, 0x3d	; 61
    217c:	de b7       	in	r29, 0x3e	; 62
    217e:	89 83       	std	Y+1, r24	; 0x01
    2180:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2182:	89 81       	ldd	r24, Y+1	; 0x01
    2184:	84 30       	cpi	r24, 0x04	; 4
    2186:	90 f5       	brcc	.+100    	; 0x21ec <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    2188:	89 81       	ldd	r24, Y+1	; 0x01
    218a:	28 2f       	mov	r18, r24
    218c:	30 e0       	ldi	r19, 0x00	; 0
    218e:	3c 83       	std	Y+4, r19	; 0x04
    2190:	2b 83       	std	Y+3, r18	; 0x03
    2192:	8b 81       	ldd	r24, Y+3	; 0x03
    2194:	9c 81       	ldd	r25, Y+4	; 0x04
    2196:	81 30       	cpi	r24, 0x01	; 1
    2198:	91 05       	cpc	r25, r1
    219a:	d1 f0       	breq	.+52     	; 0x21d0 <GPIO_setupPortDirection+0x5e>
    219c:	2b 81       	ldd	r18, Y+3	; 0x03
    219e:	3c 81       	ldd	r19, Y+4	; 0x04
    21a0:	22 30       	cpi	r18, 0x02	; 2
    21a2:	31 05       	cpc	r19, r1
    21a4:	2c f4       	brge	.+10     	; 0x21b0 <GPIO_setupPortDirection+0x3e>
    21a6:	8b 81       	ldd	r24, Y+3	; 0x03
    21a8:	9c 81       	ldd	r25, Y+4	; 0x04
    21aa:	00 97       	sbiw	r24, 0x00	; 0
    21ac:	61 f0       	breq	.+24     	; 0x21c6 <GPIO_setupPortDirection+0x54>
    21ae:	1e c0       	rjmp	.+60     	; 0x21ec <GPIO_setupPortDirection+0x7a>
    21b0:	2b 81       	ldd	r18, Y+3	; 0x03
    21b2:	3c 81       	ldd	r19, Y+4	; 0x04
    21b4:	22 30       	cpi	r18, 0x02	; 2
    21b6:	31 05       	cpc	r19, r1
    21b8:	81 f0       	breq	.+32     	; 0x21da <GPIO_setupPortDirection+0x68>
    21ba:	8b 81       	ldd	r24, Y+3	; 0x03
    21bc:	9c 81       	ldd	r25, Y+4	; 0x04
    21be:	83 30       	cpi	r24, 0x03	; 3
    21c0:	91 05       	cpc	r25, r1
    21c2:	81 f0       	breq	.+32     	; 0x21e4 <GPIO_setupPortDirection+0x72>
    21c4:	13 c0       	rjmp	.+38     	; 0x21ec <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    21c6:	ea e3       	ldi	r30, 0x3A	; 58
    21c8:	f0 e0       	ldi	r31, 0x00	; 0
    21ca:	8a 81       	ldd	r24, Y+2	; 0x02
    21cc:	80 83       	st	Z, r24
    21ce:	0e c0       	rjmp	.+28     	; 0x21ec <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    21d0:	e7 e3       	ldi	r30, 0x37	; 55
    21d2:	f0 e0       	ldi	r31, 0x00	; 0
    21d4:	8a 81       	ldd	r24, Y+2	; 0x02
    21d6:	80 83       	st	Z, r24
    21d8:	09 c0       	rjmp	.+18     	; 0x21ec <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    21da:	e4 e3       	ldi	r30, 0x34	; 52
    21dc:	f0 e0       	ldi	r31, 0x00	; 0
    21de:	8a 81       	ldd	r24, Y+2	; 0x02
    21e0:	80 83       	st	Z, r24
    21e2:	04 c0       	rjmp	.+8      	; 0x21ec <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    21e4:	e1 e3       	ldi	r30, 0x31	; 49
    21e6:	f0 e0       	ldi	r31, 0x00	; 0
    21e8:	8a 81       	ldd	r24, Y+2	; 0x02
    21ea:	80 83       	st	Z, r24
			break;
		}
	}
}
    21ec:	0f 90       	pop	r0
    21ee:	0f 90       	pop	r0
    21f0:	0f 90       	pop	r0
    21f2:	0f 90       	pop	r0
    21f4:	cf 91       	pop	r28
    21f6:	df 91       	pop	r29
    21f8:	08 95       	ret

000021fa <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    21fa:	df 93       	push	r29
    21fc:	cf 93       	push	r28
    21fe:	00 d0       	rcall	.+0      	; 0x2200 <GPIO_writePort+0x6>
    2200:	00 d0       	rcall	.+0      	; 0x2202 <GPIO_writePort+0x8>
    2202:	cd b7       	in	r28, 0x3d	; 61
    2204:	de b7       	in	r29, 0x3e	; 62
    2206:	89 83       	std	Y+1, r24	; 0x01
    2208:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    220a:	89 81       	ldd	r24, Y+1	; 0x01
    220c:	84 30       	cpi	r24, 0x04	; 4
    220e:	90 f5       	brcc	.+100    	; 0x2274 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    2210:	89 81       	ldd	r24, Y+1	; 0x01
    2212:	28 2f       	mov	r18, r24
    2214:	30 e0       	ldi	r19, 0x00	; 0
    2216:	3c 83       	std	Y+4, r19	; 0x04
    2218:	2b 83       	std	Y+3, r18	; 0x03
    221a:	8b 81       	ldd	r24, Y+3	; 0x03
    221c:	9c 81       	ldd	r25, Y+4	; 0x04
    221e:	81 30       	cpi	r24, 0x01	; 1
    2220:	91 05       	cpc	r25, r1
    2222:	d1 f0       	breq	.+52     	; 0x2258 <GPIO_writePort+0x5e>
    2224:	2b 81       	ldd	r18, Y+3	; 0x03
    2226:	3c 81       	ldd	r19, Y+4	; 0x04
    2228:	22 30       	cpi	r18, 0x02	; 2
    222a:	31 05       	cpc	r19, r1
    222c:	2c f4       	brge	.+10     	; 0x2238 <GPIO_writePort+0x3e>
    222e:	8b 81       	ldd	r24, Y+3	; 0x03
    2230:	9c 81       	ldd	r25, Y+4	; 0x04
    2232:	00 97       	sbiw	r24, 0x00	; 0
    2234:	61 f0       	breq	.+24     	; 0x224e <GPIO_writePort+0x54>
    2236:	1e c0       	rjmp	.+60     	; 0x2274 <GPIO_writePort+0x7a>
    2238:	2b 81       	ldd	r18, Y+3	; 0x03
    223a:	3c 81       	ldd	r19, Y+4	; 0x04
    223c:	22 30       	cpi	r18, 0x02	; 2
    223e:	31 05       	cpc	r19, r1
    2240:	81 f0       	breq	.+32     	; 0x2262 <GPIO_writePort+0x68>
    2242:	8b 81       	ldd	r24, Y+3	; 0x03
    2244:	9c 81       	ldd	r25, Y+4	; 0x04
    2246:	83 30       	cpi	r24, 0x03	; 3
    2248:	91 05       	cpc	r25, r1
    224a:	81 f0       	breq	.+32     	; 0x226c <GPIO_writePort+0x72>
    224c:	13 c0       	rjmp	.+38     	; 0x2274 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    224e:	eb e3       	ldi	r30, 0x3B	; 59
    2250:	f0 e0       	ldi	r31, 0x00	; 0
    2252:	8a 81       	ldd	r24, Y+2	; 0x02
    2254:	80 83       	st	Z, r24
    2256:	0e c0       	rjmp	.+28     	; 0x2274 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    2258:	e8 e3       	ldi	r30, 0x38	; 56
    225a:	f0 e0       	ldi	r31, 0x00	; 0
    225c:	8a 81       	ldd	r24, Y+2	; 0x02
    225e:	80 83       	st	Z, r24
    2260:	09 c0       	rjmp	.+18     	; 0x2274 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    2262:	e5 e3       	ldi	r30, 0x35	; 53
    2264:	f0 e0       	ldi	r31, 0x00	; 0
    2266:	8a 81       	ldd	r24, Y+2	; 0x02
    2268:	80 83       	st	Z, r24
    226a:	04 c0       	rjmp	.+8      	; 0x2274 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    226c:	e2 e3       	ldi	r30, 0x32	; 50
    226e:	f0 e0       	ldi	r31, 0x00	; 0
    2270:	8a 81       	ldd	r24, Y+2	; 0x02
    2272:	80 83       	st	Z, r24
			break;
		}
	}
}
    2274:	0f 90       	pop	r0
    2276:	0f 90       	pop	r0
    2278:	0f 90       	pop	r0
    227a:	0f 90       	pop	r0
    227c:	cf 91       	pop	r28
    227e:	df 91       	pop	r29
    2280:	08 95       	ret

00002282 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    2282:	df 93       	push	r29
    2284:	cf 93       	push	r28
    2286:	00 d0       	rcall	.+0      	; 0x2288 <GPIO_readPort+0x6>
    2288:	00 d0       	rcall	.+0      	; 0x228a <GPIO_readPort+0x8>
    228a:	cd b7       	in	r28, 0x3d	; 61
    228c:	de b7       	in	r29, 0x3e	; 62
    228e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    2290:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2292:	8a 81       	ldd	r24, Y+2	; 0x02
    2294:	84 30       	cpi	r24, 0x04	; 4
    2296:	90 f5       	brcc	.+100    	; 0x22fc <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    2298:	8a 81       	ldd	r24, Y+2	; 0x02
    229a:	28 2f       	mov	r18, r24
    229c:	30 e0       	ldi	r19, 0x00	; 0
    229e:	3c 83       	std	Y+4, r19	; 0x04
    22a0:	2b 83       	std	Y+3, r18	; 0x03
    22a2:	8b 81       	ldd	r24, Y+3	; 0x03
    22a4:	9c 81       	ldd	r25, Y+4	; 0x04
    22a6:	81 30       	cpi	r24, 0x01	; 1
    22a8:	91 05       	cpc	r25, r1
    22aa:	d1 f0       	breq	.+52     	; 0x22e0 <GPIO_readPort+0x5e>
    22ac:	2b 81       	ldd	r18, Y+3	; 0x03
    22ae:	3c 81       	ldd	r19, Y+4	; 0x04
    22b0:	22 30       	cpi	r18, 0x02	; 2
    22b2:	31 05       	cpc	r19, r1
    22b4:	2c f4       	brge	.+10     	; 0x22c0 <GPIO_readPort+0x3e>
    22b6:	8b 81       	ldd	r24, Y+3	; 0x03
    22b8:	9c 81       	ldd	r25, Y+4	; 0x04
    22ba:	00 97       	sbiw	r24, 0x00	; 0
    22bc:	61 f0       	breq	.+24     	; 0x22d6 <GPIO_readPort+0x54>
    22be:	1e c0       	rjmp	.+60     	; 0x22fc <GPIO_readPort+0x7a>
    22c0:	2b 81       	ldd	r18, Y+3	; 0x03
    22c2:	3c 81       	ldd	r19, Y+4	; 0x04
    22c4:	22 30       	cpi	r18, 0x02	; 2
    22c6:	31 05       	cpc	r19, r1
    22c8:	81 f0       	breq	.+32     	; 0x22ea <GPIO_readPort+0x68>
    22ca:	8b 81       	ldd	r24, Y+3	; 0x03
    22cc:	9c 81       	ldd	r25, Y+4	; 0x04
    22ce:	83 30       	cpi	r24, 0x03	; 3
    22d0:	91 05       	cpc	r25, r1
    22d2:	81 f0       	breq	.+32     	; 0x22f4 <GPIO_readPort+0x72>
    22d4:	13 c0       	rjmp	.+38     	; 0x22fc <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    22d6:	e9 e3       	ldi	r30, 0x39	; 57
    22d8:	f0 e0       	ldi	r31, 0x00	; 0
    22da:	80 81       	ld	r24, Z
    22dc:	89 83       	std	Y+1, r24	; 0x01
    22de:	0e c0       	rjmp	.+28     	; 0x22fc <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    22e0:	e6 e3       	ldi	r30, 0x36	; 54
    22e2:	f0 e0       	ldi	r31, 0x00	; 0
    22e4:	80 81       	ld	r24, Z
    22e6:	89 83       	std	Y+1, r24	; 0x01
    22e8:	09 c0       	rjmp	.+18     	; 0x22fc <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    22ea:	e3 e3       	ldi	r30, 0x33	; 51
    22ec:	f0 e0       	ldi	r31, 0x00	; 0
    22ee:	80 81       	ld	r24, Z
    22f0:	89 83       	std	Y+1, r24	; 0x01
    22f2:	04 c0       	rjmp	.+8      	; 0x22fc <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    22f4:	e0 e3       	ldi	r30, 0x30	; 48
    22f6:	f0 e0       	ldi	r31, 0x00	; 0
    22f8:	80 81       	ld	r24, Z
    22fa:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    22fc:	89 81       	ldd	r24, Y+1	; 0x01
}
    22fe:	0f 90       	pop	r0
    2300:	0f 90       	pop	r0
    2302:	0f 90       	pop	r0
    2304:	0f 90       	pop	r0
    2306:	cf 91       	pop	r28
    2308:	df 91       	pop	r29
    230a:	08 95       	ret

0000230c <KEYPAD_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KEYPAD_getPressedKey(void)
{
    230c:	df 93       	push	r29
    230e:	cf 93       	push	r28
    2310:	00 d0       	rcall	.+0      	; 0x2312 <KEYPAD_getPressedKey+0x6>
    2312:	0f 92       	push	r0
    2314:	cd b7       	in	r28, 0x3d	; 61
    2316:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	uint8 keypad_port_value = 0;
    2318:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    231a:	1b 82       	std	Y+3, r1	; 0x03
    231c:	43 c0       	rjmp	.+134    	; 0x23a4 <KEYPAD_getPressedKey+0x98>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this column will be output pin
			 */
			GPIO_setupPortDirection(KEYPAD_PORT_ID,PORT_INPUT);
    231e:	81 e0       	ldi	r24, 0x01	; 1
    2320:	60 e0       	ldi	r22, 0x00	; 0
    2322:	0e 94 b9 10 	call	0x2172	; 0x2172 <GPIO_setupPortDirection>
			GPIO_setupPinDirection(KEYPAD_PORT_ID,KEYPAD_FIRST_COLUMN_PIN_ID+col,PIN_OUTPUT);
    2326:	8b 81       	ldd	r24, Y+3	; 0x03
    2328:	98 2f       	mov	r25, r24
    232a:	9c 5f       	subi	r25, 0xFC	; 252
    232c:	81 e0       	ldi	r24, 0x01	; 1
    232e:	69 2f       	mov	r22, r25
    2330:	41 e0       	ldi	r20, 0x01	; 1
    2332:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <GPIO_setupPinDirection>
			
#if(KEYPAD_BUTTON_PRESSED == LOGIC_LOW)
			/* Clear the column output pin and set the rest pins value */
			keypad_port_value = ~(1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
    2336:	8b 81       	ldd	r24, Y+3	; 0x03
    2338:	88 2f       	mov	r24, r24
    233a:	90 e0       	ldi	r25, 0x00	; 0
    233c:	9c 01       	movw	r18, r24
    233e:	2c 5f       	subi	r18, 0xFC	; 252
    2340:	3f 4f       	sbci	r19, 0xFF	; 255
    2342:	81 e0       	ldi	r24, 0x01	; 1
    2344:	90 e0       	ldi	r25, 0x00	; 0
    2346:	02 c0       	rjmp	.+4      	; 0x234c <KEYPAD_getPressedKey+0x40>
    2348:	88 0f       	add	r24, r24
    234a:	99 1f       	adc	r25, r25
    234c:	2a 95       	dec	r18
    234e:	e2 f7       	brpl	.-8      	; 0x2348 <KEYPAD_getPressedKey+0x3c>
    2350:	80 95       	com	r24
    2352:	89 83       	std	Y+1, r24	; 0x01
#else
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);
    2354:	81 e0       	ldi	r24, 0x01	; 1
    2356:	69 81       	ldd	r22, Y+1	; 0x01
    2358:	0e 94 fd 10 	call	0x21fa	; 0x21fa <GPIO_writePort>

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    235c:	1a 82       	std	Y+2, r1	; 0x02
    235e:	1c c0       	rjmp	.+56     	; 0x2398 <KEYPAD_getPressedKey+0x8c>
			{
				/* Check if the switch is pressed in this row */
				if(GPIO_readPin(KEYPAD_PORT_ID,row+KEYPAD_FIRST_ROW_PIN_ID) == KEYPAD_BUTTON_PRESSED)
    2360:	81 e0       	ldi	r24, 0x01	; 1
    2362:	6a 81       	ldd	r22, Y+2	; 0x02
    2364:	0e 94 1e 10 	call	0x203c	; 0x203c <GPIO_readPin>
    2368:	88 23       	and	r24, r24
    236a:	99 f4       	brne	.+38     	; 0x2392 <KEYPAD_getPressedKey+0x86>
				{
					#if (KEYPAD_NUM_COLS == 3)
						return KEYPAD_4x3_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
					#elif (KEYPAD_NUM_COLS == 4)
						return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    236c:	8a 81       	ldd	r24, Y+2	; 0x02
    236e:	88 2f       	mov	r24, r24
    2370:	90 e0       	ldi	r25, 0x00	; 0
    2372:	88 0f       	add	r24, r24
    2374:	99 1f       	adc	r25, r25
    2376:	88 0f       	add	r24, r24
    2378:	99 1f       	adc	r25, r25
    237a:	98 2f       	mov	r25, r24
    237c:	8b 81       	ldd	r24, Y+3	; 0x03
    237e:	89 0f       	add	r24, r25
    2380:	8f 5f       	subi	r24, 0xFF	; 255
    2382:	0e 94 d7 11 	call	0x23ae	; 0x23ae <KEYPAD_4x4_adjustKeyNumber>
					#endif
				}
			}
		}
	}	
}
    2386:	0f 90       	pop	r0
    2388:	0f 90       	pop	r0
    238a:	0f 90       	pop	r0
    238c:	cf 91       	pop	r28
    238e:	df 91       	pop	r29
    2390:	08 95       	ret
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    2392:	8a 81       	ldd	r24, Y+2	; 0x02
    2394:	8f 5f       	subi	r24, 0xFF	; 255
    2396:	8a 83       	std	Y+2, r24	; 0x02
    2398:	8a 81       	ldd	r24, Y+2	; 0x02
    239a:	84 30       	cpi	r24, 0x04	; 4
    239c:	08 f3       	brcs	.-62     	; 0x2360 <KEYPAD_getPressedKey+0x54>
{
	uint8 col,row;
	uint8 keypad_port_value = 0;
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    239e:	8b 81       	ldd	r24, Y+3	; 0x03
    23a0:	8f 5f       	subi	r24, 0xFF	; 255
    23a2:	8b 83       	std	Y+3, r24	; 0x03
    23a4:	8b 81       	ldd	r24, Y+3	; 0x03
    23a6:	84 30       	cpi	r24, 0x04	; 4
    23a8:	08 f4       	brcc	.+2      	; 0x23ac <KEYPAD_getPressedKey+0xa0>
    23aa:	b9 cf       	rjmp	.-142    	; 0x231e <KEYPAD_getPressedKey+0x12>
    23ac:	b6 cf       	rjmp	.-148    	; 0x231a <KEYPAD_getPressedKey+0xe>

000023ae <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    23ae:	df 93       	push	r29
    23b0:	cf 93       	push	r28
    23b2:	00 d0       	rcall	.+0      	; 0x23b4 <KEYPAD_4x4_adjustKeyNumber+0x6>
    23b4:	00 d0       	rcall	.+0      	; 0x23b6 <KEYPAD_4x4_adjustKeyNumber+0x8>
    23b6:	cd b7       	in	r28, 0x3d	; 61
    23b8:	de b7       	in	r29, 0x3e	; 62
    23ba:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    23bc:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    23be:	8a 81       	ldd	r24, Y+2	; 0x02
    23c0:	28 2f       	mov	r18, r24
    23c2:	30 e0       	ldi	r19, 0x00	; 0
    23c4:	3c 83       	std	Y+4, r19	; 0x04
    23c6:	2b 83       	std	Y+3, r18	; 0x03
    23c8:	8b 81       	ldd	r24, Y+3	; 0x03
    23ca:	9c 81       	ldd	r25, Y+4	; 0x04
    23cc:	88 30       	cpi	r24, 0x08	; 8
    23ce:	91 05       	cpc	r25, r1
    23d0:	09 f4       	brne	.+2      	; 0x23d4 <KEYPAD_4x4_adjustKeyNumber+0x26>
    23d2:	70 c0       	rjmp	.+224    	; 0x24b4 <KEYPAD_4x4_adjustKeyNumber+0x106>
    23d4:	2b 81       	ldd	r18, Y+3	; 0x03
    23d6:	3c 81       	ldd	r19, Y+4	; 0x04
    23d8:	29 30       	cpi	r18, 0x09	; 9
    23da:	31 05       	cpc	r19, r1
    23dc:	5c f5       	brge	.+86     	; 0x2434 <KEYPAD_4x4_adjustKeyNumber+0x86>
    23de:	8b 81       	ldd	r24, Y+3	; 0x03
    23e0:	9c 81       	ldd	r25, Y+4	; 0x04
    23e2:	84 30       	cpi	r24, 0x04	; 4
    23e4:	91 05       	cpc	r25, r1
    23e6:	09 f4       	brne	.+2      	; 0x23ea <KEYPAD_4x4_adjustKeyNumber+0x3c>
    23e8:	59 c0       	rjmp	.+178    	; 0x249c <KEYPAD_4x4_adjustKeyNumber+0xee>
    23ea:	2b 81       	ldd	r18, Y+3	; 0x03
    23ec:	3c 81       	ldd	r19, Y+4	; 0x04
    23ee:	25 30       	cpi	r18, 0x05	; 5
    23f0:	31 05       	cpc	r19, r1
    23f2:	9c f4       	brge	.+38     	; 0x241a <KEYPAD_4x4_adjustKeyNumber+0x6c>
    23f4:	8b 81       	ldd	r24, Y+3	; 0x03
    23f6:	9c 81       	ldd	r25, Y+4	; 0x04
    23f8:	82 30       	cpi	r24, 0x02	; 2
    23fa:	91 05       	cpc	r25, r1
    23fc:	09 f4       	brne	.+2      	; 0x2400 <KEYPAD_4x4_adjustKeyNumber+0x52>
    23fe:	48 c0       	rjmp	.+144    	; 0x2490 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    2400:	2b 81       	ldd	r18, Y+3	; 0x03
    2402:	3c 81       	ldd	r19, Y+4	; 0x04
    2404:	23 30       	cpi	r18, 0x03	; 3
    2406:	31 05       	cpc	r19, r1
    2408:	0c f0       	brlt	.+2      	; 0x240c <KEYPAD_4x4_adjustKeyNumber+0x5e>
    240a:	45 c0       	rjmp	.+138    	; 0x2496 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    240c:	8b 81       	ldd	r24, Y+3	; 0x03
    240e:	9c 81       	ldd	r25, Y+4	; 0x04
    2410:	81 30       	cpi	r24, 0x01	; 1
    2412:	91 05       	cpc	r25, r1
    2414:	09 f4       	brne	.+2      	; 0x2418 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    2416:	39 c0       	rjmp	.+114    	; 0x248a <KEYPAD_4x4_adjustKeyNumber+0xdc>
    2418:	67 c0       	rjmp	.+206    	; 0x24e8 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    241a:	2b 81       	ldd	r18, Y+3	; 0x03
    241c:	3c 81       	ldd	r19, Y+4	; 0x04
    241e:	26 30       	cpi	r18, 0x06	; 6
    2420:	31 05       	cpc	r19, r1
    2422:	09 f4       	brne	.+2      	; 0x2426 <KEYPAD_4x4_adjustKeyNumber+0x78>
    2424:	41 c0       	rjmp	.+130    	; 0x24a8 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    2426:	8b 81       	ldd	r24, Y+3	; 0x03
    2428:	9c 81       	ldd	r25, Y+4	; 0x04
    242a:	87 30       	cpi	r24, 0x07	; 7
    242c:	91 05       	cpc	r25, r1
    242e:	0c f0       	brlt	.+2      	; 0x2432 <KEYPAD_4x4_adjustKeyNumber+0x84>
    2430:	3e c0       	rjmp	.+124    	; 0x24ae <KEYPAD_4x4_adjustKeyNumber+0x100>
    2432:	37 c0       	rjmp	.+110    	; 0x24a2 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    2434:	2b 81       	ldd	r18, Y+3	; 0x03
    2436:	3c 81       	ldd	r19, Y+4	; 0x04
    2438:	2c 30       	cpi	r18, 0x0C	; 12
    243a:	31 05       	cpc	r19, r1
    243c:	09 f4       	brne	.+2      	; 0x2440 <KEYPAD_4x4_adjustKeyNumber+0x92>
    243e:	46 c0       	rjmp	.+140    	; 0x24cc <KEYPAD_4x4_adjustKeyNumber+0x11e>
    2440:	8b 81       	ldd	r24, Y+3	; 0x03
    2442:	9c 81       	ldd	r25, Y+4	; 0x04
    2444:	8d 30       	cpi	r24, 0x0D	; 13
    2446:	91 05       	cpc	r25, r1
    2448:	5c f4       	brge	.+22     	; 0x2460 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    244a:	2b 81       	ldd	r18, Y+3	; 0x03
    244c:	3c 81       	ldd	r19, Y+4	; 0x04
    244e:	2a 30       	cpi	r18, 0x0A	; 10
    2450:	31 05       	cpc	r19, r1
    2452:	b1 f1       	breq	.+108    	; 0x24c0 <KEYPAD_4x4_adjustKeyNumber+0x112>
    2454:	8b 81       	ldd	r24, Y+3	; 0x03
    2456:	9c 81       	ldd	r25, Y+4	; 0x04
    2458:	8b 30       	cpi	r24, 0x0B	; 11
    245a:	91 05       	cpc	r25, r1
    245c:	a4 f5       	brge	.+104    	; 0x24c6 <KEYPAD_4x4_adjustKeyNumber+0x118>
    245e:	2d c0       	rjmp	.+90     	; 0x24ba <KEYPAD_4x4_adjustKeyNumber+0x10c>
    2460:	2b 81       	ldd	r18, Y+3	; 0x03
    2462:	3c 81       	ldd	r19, Y+4	; 0x04
    2464:	2e 30       	cpi	r18, 0x0E	; 14
    2466:	31 05       	cpc	r19, r1
    2468:	b9 f1       	breq	.+110    	; 0x24d8 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    246a:	8b 81       	ldd	r24, Y+3	; 0x03
    246c:	9c 81       	ldd	r25, Y+4	; 0x04
    246e:	8e 30       	cpi	r24, 0x0E	; 14
    2470:	91 05       	cpc	r25, r1
    2472:	7c f1       	brlt	.+94     	; 0x24d2 <KEYPAD_4x4_adjustKeyNumber+0x124>
    2474:	2b 81       	ldd	r18, Y+3	; 0x03
    2476:	3c 81       	ldd	r19, Y+4	; 0x04
    2478:	2f 30       	cpi	r18, 0x0F	; 15
    247a:	31 05       	cpc	r19, r1
    247c:	79 f1       	breq	.+94     	; 0x24dc <KEYPAD_4x4_adjustKeyNumber+0x12e>
    247e:	8b 81       	ldd	r24, Y+3	; 0x03
    2480:	9c 81       	ldd	r25, Y+4	; 0x04
    2482:	80 31       	cpi	r24, 0x10	; 16
    2484:	91 05       	cpc	r25, r1
    2486:	69 f1       	breq	.+90     	; 0x24e2 <KEYPAD_4x4_adjustKeyNumber+0x134>
    2488:	2f c0       	rjmp	.+94     	; 0x24e8 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    248a:	87 e0       	ldi	r24, 0x07	; 7
    248c:	89 83       	std	Y+1, r24	; 0x01
    248e:	2e c0       	rjmp	.+92     	; 0x24ec <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    2490:	88 e0       	ldi	r24, 0x08	; 8
    2492:	89 83       	std	Y+1, r24	; 0x01
    2494:	2b c0       	rjmp	.+86     	; 0x24ec <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    2496:	89 e0       	ldi	r24, 0x09	; 9
    2498:	89 83       	std	Y+1, r24	; 0x01
    249a:	28 c0       	rjmp	.+80     	; 0x24ec <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    249c:	85 e2       	ldi	r24, 0x25	; 37
    249e:	89 83       	std	Y+1, r24	; 0x01
    24a0:	25 c0       	rjmp	.+74     	; 0x24ec <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    24a2:	84 e0       	ldi	r24, 0x04	; 4
    24a4:	89 83       	std	Y+1, r24	; 0x01
    24a6:	22 c0       	rjmp	.+68     	; 0x24ec <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    24a8:	85 e0       	ldi	r24, 0x05	; 5
    24aa:	89 83       	std	Y+1, r24	; 0x01
    24ac:	1f c0       	rjmp	.+62     	; 0x24ec <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    24ae:	86 e0       	ldi	r24, 0x06	; 6
    24b0:	89 83       	std	Y+1, r24	; 0x01
    24b2:	1c c0       	rjmp	.+56     	; 0x24ec <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    24b4:	8a e2       	ldi	r24, 0x2A	; 42
    24b6:	89 83       	std	Y+1, r24	; 0x01
    24b8:	19 c0       	rjmp	.+50     	; 0x24ec <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    24ba:	81 e0       	ldi	r24, 0x01	; 1
    24bc:	89 83       	std	Y+1, r24	; 0x01
    24be:	16 c0       	rjmp	.+44     	; 0x24ec <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    24c0:	82 e0       	ldi	r24, 0x02	; 2
    24c2:	89 83       	std	Y+1, r24	; 0x01
    24c4:	13 c0       	rjmp	.+38     	; 0x24ec <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    24c6:	83 e0       	ldi	r24, 0x03	; 3
    24c8:	89 83       	std	Y+1, r24	; 0x01
    24ca:	10 c0       	rjmp	.+32     	; 0x24ec <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    24cc:	8d e2       	ldi	r24, 0x2D	; 45
    24ce:	89 83       	std	Y+1, r24	; 0x01
    24d0:	0d c0       	rjmp	.+26     	; 0x24ec <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    24d2:	8d e0       	ldi	r24, 0x0D	; 13
    24d4:	89 83       	std	Y+1, r24	; 0x01
    24d6:	0a c0       	rjmp	.+20     	; 0x24ec <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    24d8:	19 82       	std	Y+1, r1	; 0x01
    24da:	08 c0       	rjmp	.+16     	; 0x24ec <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    24dc:	8d e3       	ldi	r24, 0x3D	; 61
    24de:	89 83       	std	Y+1, r24	; 0x01
    24e0:	05 c0       	rjmp	.+10     	; 0x24ec <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    24e2:	8b e2       	ldi	r24, 0x2B	; 43
    24e4:	89 83       	std	Y+1, r24	; 0x01
    24e6:	02 c0       	rjmp	.+4      	; 0x24ec <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    24e8:	8a 81       	ldd	r24, Y+2	; 0x02
    24ea:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    24ec:	89 81       	ldd	r24, Y+1	; 0x01
} 
    24ee:	0f 90       	pop	r0
    24f0:	0f 90       	pop	r0
    24f2:	0f 90       	pop	r0
    24f4:	0f 90       	pop	r0
    24f6:	cf 91       	pop	r28
    24f8:	df 91       	pop	r29
    24fa:	08 95       	ret

000024fc <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    24fc:	df 93       	push	r29
    24fe:	cf 93       	push	r28
    2500:	cd b7       	in	r28, 0x3d	; 61
    2502:	de b7       	in	r29, 0x3e	; 62
	/* Configure the direction for RS, RW and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    2504:	80 e0       	ldi	r24, 0x00	; 0
    2506:	60 e0       	ldi	r22, 0x00	; 0
    2508:	41 e0       	ldi	r20, 0x01	; 1
    250a:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_OUTPUT);
    250e:	80 e0       	ldi	r24, 0x00	; 0
    2510:	61 e0       	ldi	r22, 0x01	; 1
    2512:	41 e0       	ldi	r20, 0x01	; 1
    2514:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    2518:	80 e0       	ldi	r24, 0x00	; 0
    251a:	62 e0       	ldi	r22, 0x02	; 2
    251c:	41 e0       	ldi	r20, 0x01	; 1
    251e:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <GPIO_setupPinDirection>

	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    2522:	82 e0       	ldi	r24, 0x02	; 2
    2524:	6f ef       	ldi	r22, 0xFF	; 255
    2526:	0e 94 b9 10 	call	0x2172	; 0x2172 <GPIO_setupPortDirection>

	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    252a:	88 e3       	ldi	r24, 0x38	; 56
    252c:	0e 94 a1 12 	call	0x2542	; 0x2542 <LCD_sendCommand>
	
	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    2530:	8c e0       	ldi	r24, 0x0C	; 12
    2532:	0e 94 a1 12 	call	0x2542	; 0x2542 <LCD_sendCommand>
	
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    2536:	81 e0       	ldi	r24, 0x01	; 1
    2538:	0e 94 a1 12 	call	0x2542	; 0x2542 <LCD_sendCommand>
}
    253c:	cf 91       	pop	r28
    253e:	df 91       	pop	r29
    2540:	08 95       	ret

00002542 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    2542:	df 93       	push	r29
    2544:	cf 93       	push	r28
    2546:	cd b7       	in	r28, 0x3d	; 61
    2548:	de b7       	in	r29, 0x3e	; 62
    254a:	e9 97       	sbiw	r28, 0x39	; 57
    254c:	0f b6       	in	r0, 0x3f	; 63
    254e:	f8 94       	cli
    2550:	de bf       	out	0x3e, r29	; 62
    2552:	0f be       	out	0x3f, r0	; 63
    2554:	cd bf       	out	0x3d, r28	; 61
    2556:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    2558:	80 e0       	ldi	r24, 0x00	; 0
    255a:	60 e0       	ldi	r22, 0x00	; 0
    255c:	40 e0       	ldi	r20, 0x00	; 0
    255e:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    2562:	80 e0       	ldi	r24, 0x00	; 0
    2564:	61 e0       	ldi	r22, 0x01	; 1
    2566:	40 e0       	ldi	r20, 0x00	; 0
    2568:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <GPIO_writePin>
    256c:	80 e0       	ldi	r24, 0x00	; 0
    256e:	90 e0       	ldi	r25, 0x00	; 0
    2570:	a0 e8       	ldi	r26, 0x80	; 128
    2572:	bf e3       	ldi	r27, 0x3F	; 63
    2574:	8d ab       	std	Y+53, r24	; 0x35
    2576:	9e ab       	std	Y+54, r25	; 0x36
    2578:	af ab       	std	Y+55, r26	; 0x37
    257a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    257c:	6d a9       	ldd	r22, Y+53	; 0x35
    257e:	7e a9       	ldd	r23, Y+54	; 0x36
    2580:	8f a9       	ldd	r24, Y+55	; 0x37
    2582:	98 ad       	ldd	r25, Y+56	; 0x38
    2584:	20 e0       	ldi	r18, 0x00	; 0
    2586:	30 e0       	ldi	r19, 0x00	; 0
    2588:	4a ef       	ldi	r20, 0xFA	; 250
    258a:	54 e4       	ldi	r21, 0x44	; 68
    258c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2590:	dc 01       	movw	r26, r24
    2592:	cb 01       	movw	r24, r22
    2594:	89 ab       	std	Y+49, r24	; 0x31
    2596:	9a ab       	std	Y+50, r25	; 0x32
    2598:	ab ab       	std	Y+51, r26	; 0x33
    259a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    259c:	69 a9       	ldd	r22, Y+49	; 0x31
    259e:	7a a9       	ldd	r23, Y+50	; 0x32
    25a0:	8b a9       	ldd	r24, Y+51	; 0x33
    25a2:	9c a9       	ldd	r25, Y+52	; 0x34
    25a4:	20 e0       	ldi	r18, 0x00	; 0
    25a6:	30 e0       	ldi	r19, 0x00	; 0
    25a8:	40 e8       	ldi	r20, 0x80	; 128
    25aa:	5f e3       	ldi	r21, 0x3F	; 63
    25ac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25b0:	88 23       	and	r24, r24
    25b2:	2c f4       	brge	.+10     	; 0x25be <LCD_sendCommand+0x7c>
		__ticks = 1;
    25b4:	81 e0       	ldi	r24, 0x01	; 1
    25b6:	90 e0       	ldi	r25, 0x00	; 0
    25b8:	98 ab       	std	Y+48, r25	; 0x30
    25ba:	8f a7       	std	Y+47, r24	; 0x2f
    25bc:	3f c0       	rjmp	.+126    	; 0x263c <LCD_sendCommand+0xfa>
	else if (__tmp > 65535)
    25be:	69 a9       	ldd	r22, Y+49	; 0x31
    25c0:	7a a9       	ldd	r23, Y+50	; 0x32
    25c2:	8b a9       	ldd	r24, Y+51	; 0x33
    25c4:	9c a9       	ldd	r25, Y+52	; 0x34
    25c6:	20 e0       	ldi	r18, 0x00	; 0
    25c8:	3f ef       	ldi	r19, 0xFF	; 255
    25ca:	4f e7       	ldi	r20, 0x7F	; 127
    25cc:	57 e4       	ldi	r21, 0x47	; 71
    25ce:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25d2:	18 16       	cp	r1, r24
    25d4:	4c f5       	brge	.+82     	; 0x2628 <LCD_sendCommand+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25d6:	6d a9       	ldd	r22, Y+53	; 0x35
    25d8:	7e a9       	ldd	r23, Y+54	; 0x36
    25da:	8f a9       	ldd	r24, Y+55	; 0x37
    25dc:	98 ad       	ldd	r25, Y+56	; 0x38
    25de:	20 e0       	ldi	r18, 0x00	; 0
    25e0:	30 e0       	ldi	r19, 0x00	; 0
    25e2:	40 e2       	ldi	r20, 0x20	; 32
    25e4:	51 e4       	ldi	r21, 0x41	; 65
    25e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25ea:	dc 01       	movw	r26, r24
    25ec:	cb 01       	movw	r24, r22
    25ee:	bc 01       	movw	r22, r24
    25f0:	cd 01       	movw	r24, r26
    25f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25f6:	dc 01       	movw	r26, r24
    25f8:	cb 01       	movw	r24, r22
    25fa:	98 ab       	std	Y+48, r25	; 0x30
    25fc:	8f a7       	std	Y+47, r24	; 0x2f
    25fe:	0f c0       	rjmp	.+30     	; 0x261e <LCD_sendCommand+0xdc>
    2600:	88 ec       	ldi	r24, 0xC8	; 200
    2602:	90 e0       	ldi	r25, 0x00	; 0
    2604:	9e a7       	std	Y+46, r25	; 0x2e
    2606:	8d a7       	std	Y+45, r24	; 0x2d
    2608:	8d a5       	ldd	r24, Y+45	; 0x2d
    260a:	9e a5       	ldd	r25, Y+46	; 0x2e
    260c:	01 97       	sbiw	r24, 0x01	; 1
    260e:	f1 f7       	brne	.-4      	; 0x260c <LCD_sendCommand+0xca>
    2610:	9e a7       	std	Y+46, r25	; 0x2e
    2612:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2614:	8f a5       	ldd	r24, Y+47	; 0x2f
    2616:	98 a9       	ldd	r25, Y+48	; 0x30
    2618:	01 97       	sbiw	r24, 0x01	; 1
    261a:	98 ab       	std	Y+48, r25	; 0x30
    261c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    261e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2620:	98 a9       	ldd	r25, Y+48	; 0x30
    2622:	00 97       	sbiw	r24, 0x00	; 0
    2624:	69 f7       	brne	.-38     	; 0x2600 <LCD_sendCommand+0xbe>
    2626:	14 c0       	rjmp	.+40     	; 0x2650 <LCD_sendCommand+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2628:	69 a9       	ldd	r22, Y+49	; 0x31
    262a:	7a a9       	ldd	r23, Y+50	; 0x32
    262c:	8b a9       	ldd	r24, Y+51	; 0x33
    262e:	9c a9       	ldd	r25, Y+52	; 0x34
    2630:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2634:	dc 01       	movw	r26, r24
    2636:	cb 01       	movw	r24, r22
    2638:	98 ab       	std	Y+48, r25	; 0x30
    263a:	8f a7       	std	Y+47, r24	; 0x2f
    263c:	8f a5       	ldd	r24, Y+47	; 0x2f
    263e:	98 a9       	ldd	r25, Y+48	; 0x30
    2640:	9c a7       	std	Y+44, r25	; 0x2c
    2642:	8b a7       	std	Y+43, r24	; 0x2b
    2644:	8b a5       	ldd	r24, Y+43	; 0x2b
    2646:	9c a5       	ldd	r25, Y+44	; 0x2c
    2648:	01 97       	sbiw	r24, 0x01	; 1
    264a:	f1 f7       	brne	.-4      	; 0x2648 <LCD_sendCommand+0x106>
    264c:	9c a7       	std	Y+44, r25	; 0x2c
    264e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2650:	80 e0       	ldi	r24, 0x00	; 0
    2652:	62 e0       	ldi	r22, 0x02	; 2
    2654:	41 e0       	ldi	r20, 0x01	; 1
    2656:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <GPIO_writePin>
    265a:	80 e0       	ldi	r24, 0x00	; 0
    265c:	90 e0       	ldi	r25, 0x00	; 0
    265e:	a0 e8       	ldi	r26, 0x80	; 128
    2660:	bf e3       	ldi	r27, 0x3F	; 63
    2662:	8f a3       	std	Y+39, r24	; 0x27
    2664:	98 a7       	std	Y+40, r25	; 0x28
    2666:	a9 a7       	std	Y+41, r26	; 0x29
    2668:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    266a:	6f a1       	ldd	r22, Y+39	; 0x27
    266c:	78 a5       	ldd	r23, Y+40	; 0x28
    266e:	89 a5       	ldd	r24, Y+41	; 0x29
    2670:	9a a5       	ldd	r25, Y+42	; 0x2a
    2672:	20 e0       	ldi	r18, 0x00	; 0
    2674:	30 e0       	ldi	r19, 0x00	; 0
    2676:	4a ef       	ldi	r20, 0xFA	; 250
    2678:	54 e4       	ldi	r21, 0x44	; 68
    267a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    267e:	dc 01       	movw	r26, r24
    2680:	cb 01       	movw	r24, r22
    2682:	8b a3       	std	Y+35, r24	; 0x23
    2684:	9c a3       	std	Y+36, r25	; 0x24
    2686:	ad a3       	std	Y+37, r26	; 0x25
    2688:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    268a:	6b a1       	ldd	r22, Y+35	; 0x23
    268c:	7c a1       	ldd	r23, Y+36	; 0x24
    268e:	8d a1       	ldd	r24, Y+37	; 0x25
    2690:	9e a1       	ldd	r25, Y+38	; 0x26
    2692:	20 e0       	ldi	r18, 0x00	; 0
    2694:	30 e0       	ldi	r19, 0x00	; 0
    2696:	40 e8       	ldi	r20, 0x80	; 128
    2698:	5f e3       	ldi	r21, 0x3F	; 63
    269a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    269e:	88 23       	and	r24, r24
    26a0:	2c f4       	brge	.+10     	; 0x26ac <LCD_sendCommand+0x16a>
		__ticks = 1;
    26a2:	81 e0       	ldi	r24, 0x01	; 1
    26a4:	90 e0       	ldi	r25, 0x00	; 0
    26a6:	9a a3       	std	Y+34, r25	; 0x22
    26a8:	89 a3       	std	Y+33, r24	; 0x21
    26aa:	3f c0       	rjmp	.+126    	; 0x272a <LCD_sendCommand+0x1e8>
	else if (__tmp > 65535)
    26ac:	6b a1       	ldd	r22, Y+35	; 0x23
    26ae:	7c a1       	ldd	r23, Y+36	; 0x24
    26b0:	8d a1       	ldd	r24, Y+37	; 0x25
    26b2:	9e a1       	ldd	r25, Y+38	; 0x26
    26b4:	20 e0       	ldi	r18, 0x00	; 0
    26b6:	3f ef       	ldi	r19, 0xFF	; 255
    26b8:	4f e7       	ldi	r20, 0x7F	; 127
    26ba:	57 e4       	ldi	r21, 0x47	; 71
    26bc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26c0:	18 16       	cp	r1, r24
    26c2:	4c f5       	brge	.+82     	; 0x2716 <LCD_sendCommand+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26c4:	6f a1       	ldd	r22, Y+39	; 0x27
    26c6:	78 a5       	ldd	r23, Y+40	; 0x28
    26c8:	89 a5       	ldd	r24, Y+41	; 0x29
    26ca:	9a a5       	ldd	r25, Y+42	; 0x2a
    26cc:	20 e0       	ldi	r18, 0x00	; 0
    26ce:	30 e0       	ldi	r19, 0x00	; 0
    26d0:	40 e2       	ldi	r20, 0x20	; 32
    26d2:	51 e4       	ldi	r21, 0x41	; 65
    26d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26d8:	dc 01       	movw	r26, r24
    26da:	cb 01       	movw	r24, r22
    26dc:	bc 01       	movw	r22, r24
    26de:	cd 01       	movw	r24, r26
    26e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26e4:	dc 01       	movw	r26, r24
    26e6:	cb 01       	movw	r24, r22
    26e8:	9a a3       	std	Y+34, r25	; 0x22
    26ea:	89 a3       	std	Y+33, r24	; 0x21
    26ec:	0f c0       	rjmp	.+30     	; 0x270c <LCD_sendCommand+0x1ca>
    26ee:	88 ec       	ldi	r24, 0xC8	; 200
    26f0:	90 e0       	ldi	r25, 0x00	; 0
    26f2:	98 a3       	std	Y+32, r25	; 0x20
    26f4:	8f 8f       	std	Y+31, r24	; 0x1f
    26f6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    26f8:	98 a1       	ldd	r25, Y+32	; 0x20
    26fa:	01 97       	sbiw	r24, 0x01	; 1
    26fc:	f1 f7       	brne	.-4      	; 0x26fa <LCD_sendCommand+0x1b8>
    26fe:	98 a3       	std	Y+32, r25	; 0x20
    2700:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2702:	89 a1       	ldd	r24, Y+33	; 0x21
    2704:	9a a1       	ldd	r25, Y+34	; 0x22
    2706:	01 97       	sbiw	r24, 0x01	; 1
    2708:	9a a3       	std	Y+34, r25	; 0x22
    270a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    270c:	89 a1       	ldd	r24, Y+33	; 0x21
    270e:	9a a1       	ldd	r25, Y+34	; 0x22
    2710:	00 97       	sbiw	r24, 0x00	; 0
    2712:	69 f7       	brne	.-38     	; 0x26ee <LCD_sendCommand+0x1ac>
    2714:	14 c0       	rjmp	.+40     	; 0x273e <LCD_sendCommand+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2716:	6b a1       	ldd	r22, Y+35	; 0x23
    2718:	7c a1       	ldd	r23, Y+36	; 0x24
    271a:	8d a1       	ldd	r24, Y+37	; 0x25
    271c:	9e a1       	ldd	r25, Y+38	; 0x26
    271e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2722:	dc 01       	movw	r26, r24
    2724:	cb 01       	movw	r24, r22
    2726:	9a a3       	std	Y+34, r25	; 0x22
    2728:	89 a3       	std	Y+33, r24	; 0x21
    272a:	89 a1       	ldd	r24, Y+33	; 0x21
    272c:	9a a1       	ldd	r25, Y+34	; 0x22
    272e:	9e 8f       	std	Y+30, r25	; 0x1e
    2730:	8d 8f       	std	Y+29, r24	; 0x1d
    2732:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2734:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2736:	01 97       	sbiw	r24, 0x01	; 1
    2738:	f1 f7       	brne	.-4      	; 0x2736 <LCD_sendCommand+0x1f4>
    273a:	9e 8f       	std	Y+30, r25	; 0x1e
    273c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    273e:	82 e0       	ldi	r24, 0x02	; 2
    2740:	69 ad       	ldd	r22, Y+57	; 0x39
    2742:	0e 94 fd 10 	call	0x21fa	; 0x21fa <GPIO_writePort>
    2746:	80 e0       	ldi	r24, 0x00	; 0
    2748:	90 e0       	ldi	r25, 0x00	; 0
    274a:	a0 e8       	ldi	r26, 0x80	; 128
    274c:	bf e3       	ldi	r27, 0x3F	; 63
    274e:	89 8f       	std	Y+25, r24	; 0x19
    2750:	9a 8f       	std	Y+26, r25	; 0x1a
    2752:	ab 8f       	std	Y+27, r26	; 0x1b
    2754:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2756:	69 8d       	ldd	r22, Y+25	; 0x19
    2758:	7a 8d       	ldd	r23, Y+26	; 0x1a
    275a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    275c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    275e:	20 e0       	ldi	r18, 0x00	; 0
    2760:	30 e0       	ldi	r19, 0x00	; 0
    2762:	4a ef       	ldi	r20, 0xFA	; 250
    2764:	54 e4       	ldi	r21, 0x44	; 68
    2766:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    276a:	dc 01       	movw	r26, r24
    276c:	cb 01       	movw	r24, r22
    276e:	8d 8b       	std	Y+21, r24	; 0x15
    2770:	9e 8b       	std	Y+22, r25	; 0x16
    2772:	af 8b       	std	Y+23, r26	; 0x17
    2774:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2776:	6d 89       	ldd	r22, Y+21	; 0x15
    2778:	7e 89       	ldd	r23, Y+22	; 0x16
    277a:	8f 89       	ldd	r24, Y+23	; 0x17
    277c:	98 8d       	ldd	r25, Y+24	; 0x18
    277e:	20 e0       	ldi	r18, 0x00	; 0
    2780:	30 e0       	ldi	r19, 0x00	; 0
    2782:	40 e8       	ldi	r20, 0x80	; 128
    2784:	5f e3       	ldi	r21, 0x3F	; 63
    2786:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    278a:	88 23       	and	r24, r24
    278c:	2c f4       	brge	.+10     	; 0x2798 <LCD_sendCommand+0x256>
		__ticks = 1;
    278e:	81 e0       	ldi	r24, 0x01	; 1
    2790:	90 e0       	ldi	r25, 0x00	; 0
    2792:	9c 8b       	std	Y+20, r25	; 0x14
    2794:	8b 8b       	std	Y+19, r24	; 0x13
    2796:	3f c0       	rjmp	.+126    	; 0x2816 <LCD_sendCommand+0x2d4>
	else if (__tmp > 65535)
    2798:	6d 89       	ldd	r22, Y+21	; 0x15
    279a:	7e 89       	ldd	r23, Y+22	; 0x16
    279c:	8f 89       	ldd	r24, Y+23	; 0x17
    279e:	98 8d       	ldd	r25, Y+24	; 0x18
    27a0:	20 e0       	ldi	r18, 0x00	; 0
    27a2:	3f ef       	ldi	r19, 0xFF	; 255
    27a4:	4f e7       	ldi	r20, 0x7F	; 127
    27a6:	57 e4       	ldi	r21, 0x47	; 71
    27a8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27ac:	18 16       	cp	r1, r24
    27ae:	4c f5       	brge	.+82     	; 0x2802 <LCD_sendCommand+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27b0:	69 8d       	ldd	r22, Y+25	; 0x19
    27b2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    27b4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    27b6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    27b8:	20 e0       	ldi	r18, 0x00	; 0
    27ba:	30 e0       	ldi	r19, 0x00	; 0
    27bc:	40 e2       	ldi	r20, 0x20	; 32
    27be:	51 e4       	ldi	r21, 0x41	; 65
    27c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27c4:	dc 01       	movw	r26, r24
    27c6:	cb 01       	movw	r24, r22
    27c8:	bc 01       	movw	r22, r24
    27ca:	cd 01       	movw	r24, r26
    27cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27d0:	dc 01       	movw	r26, r24
    27d2:	cb 01       	movw	r24, r22
    27d4:	9c 8b       	std	Y+20, r25	; 0x14
    27d6:	8b 8b       	std	Y+19, r24	; 0x13
    27d8:	0f c0       	rjmp	.+30     	; 0x27f8 <LCD_sendCommand+0x2b6>
    27da:	88 ec       	ldi	r24, 0xC8	; 200
    27dc:	90 e0       	ldi	r25, 0x00	; 0
    27de:	9a 8b       	std	Y+18, r25	; 0x12
    27e0:	89 8b       	std	Y+17, r24	; 0x11
    27e2:	89 89       	ldd	r24, Y+17	; 0x11
    27e4:	9a 89       	ldd	r25, Y+18	; 0x12
    27e6:	01 97       	sbiw	r24, 0x01	; 1
    27e8:	f1 f7       	brne	.-4      	; 0x27e6 <LCD_sendCommand+0x2a4>
    27ea:	9a 8b       	std	Y+18, r25	; 0x12
    27ec:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27ee:	8b 89       	ldd	r24, Y+19	; 0x13
    27f0:	9c 89       	ldd	r25, Y+20	; 0x14
    27f2:	01 97       	sbiw	r24, 0x01	; 1
    27f4:	9c 8b       	std	Y+20, r25	; 0x14
    27f6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27f8:	8b 89       	ldd	r24, Y+19	; 0x13
    27fa:	9c 89       	ldd	r25, Y+20	; 0x14
    27fc:	00 97       	sbiw	r24, 0x00	; 0
    27fe:	69 f7       	brne	.-38     	; 0x27da <LCD_sendCommand+0x298>
    2800:	14 c0       	rjmp	.+40     	; 0x282a <LCD_sendCommand+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2802:	6d 89       	ldd	r22, Y+21	; 0x15
    2804:	7e 89       	ldd	r23, Y+22	; 0x16
    2806:	8f 89       	ldd	r24, Y+23	; 0x17
    2808:	98 8d       	ldd	r25, Y+24	; 0x18
    280a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    280e:	dc 01       	movw	r26, r24
    2810:	cb 01       	movw	r24, r22
    2812:	9c 8b       	std	Y+20, r25	; 0x14
    2814:	8b 8b       	std	Y+19, r24	; 0x13
    2816:	8b 89       	ldd	r24, Y+19	; 0x13
    2818:	9c 89       	ldd	r25, Y+20	; 0x14
    281a:	98 8b       	std	Y+16, r25	; 0x10
    281c:	8f 87       	std	Y+15, r24	; 0x0f
    281e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2820:	98 89       	ldd	r25, Y+16	; 0x10
    2822:	01 97       	sbiw	r24, 0x01	; 1
    2824:	f1 f7       	brne	.-4      	; 0x2822 <LCD_sendCommand+0x2e0>
    2826:	98 8b       	std	Y+16, r25	; 0x10
    2828:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    282a:	80 e0       	ldi	r24, 0x00	; 0
    282c:	62 e0       	ldi	r22, 0x02	; 2
    282e:	40 e0       	ldi	r20, 0x00	; 0
    2830:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <GPIO_writePin>
    2834:	80 e0       	ldi	r24, 0x00	; 0
    2836:	90 e0       	ldi	r25, 0x00	; 0
    2838:	a0 e8       	ldi	r26, 0x80	; 128
    283a:	bf e3       	ldi	r27, 0x3F	; 63
    283c:	8b 87       	std	Y+11, r24	; 0x0b
    283e:	9c 87       	std	Y+12, r25	; 0x0c
    2840:	ad 87       	std	Y+13, r26	; 0x0d
    2842:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2844:	6b 85       	ldd	r22, Y+11	; 0x0b
    2846:	7c 85       	ldd	r23, Y+12	; 0x0c
    2848:	8d 85       	ldd	r24, Y+13	; 0x0d
    284a:	9e 85       	ldd	r25, Y+14	; 0x0e
    284c:	20 e0       	ldi	r18, 0x00	; 0
    284e:	30 e0       	ldi	r19, 0x00	; 0
    2850:	4a ef       	ldi	r20, 0xFA	; 250
    2852:	54 e4       	ldi	r21, 0x44	; 68
    2854:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2858:	dc 01       	movw	r26, r24
    285a:	cb 01       	movw	r24, r22
    285c:	8f 83       	std	Y+7, r24	; 0x07
    285e:	98 87       	std	Y+8, r25	; 0x08
    2860:	a9 87       	std	Y+9, r26	; 0x09
    2862:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2864:	6f 81       	ldd	r22, Y+7	; 0x07
    2866:	78 85       	ldd	r23, Y+8	; 0x08
    2868:	89 85       	ldd	r24, Y+9	; 0x09
    286a:	9a 85       	ldd	r25, Y+10	; 0x0a
    286c:	20 e0       	ldi	r18, 0x00	; 0
    286e:	30 e0       	ldi	r19, 0x00	; 0
    2870:	40 e8       	ldi	r20, 0x80	; 128
    2872:	5f e3       	ldi	r21, 0x3F	; 63
    2874:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2878:	88 23       	and	r24, r24
    287a:	2c f4       	brge	.+10     	; 0x2886 <LCD_sendCommand+0x344>
		__ticks = 1;
    287c:	81 e0       	ldi	r24, 0x01	; 1
    287e:	90 e0       	ldi	r25, 0x00	; 0
    2880:	9e 83       	std	Y+6, r25	; 0x06
    2882:	8d 83       	std	Y+5, r24	; 0x05
    2884:	3f c0       	rjmp	.+126    	; 0x2904 <LCD_sendCommand+0x3c2>
	else if (__tmp > 65535)
    2886:	6f 81       	ldd	r22, Y+7	; 0x07
    2888:	78 85       	ldd	r23, Y+8	; 0x08
    288a:	89 85       	ldd	r24, Y+9	; 0x09
    288c:	9a 85       	ldd	r25, Y+10	; 0x0a
    288e:	20 e0       	ldi	r18, 0x00	; 0
    2890:	3f ef       	ldi	r19, 0xFF	; 255
    2892:	4f e7       	ldi	r20, 0x7F	; 127
    2894:	57 e4       	ldi	r21, 0x47	; 71
    2896:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    289a:	18 16       	cp	r1, r24
    289c:	4c f5       	brge	.+82     	; 0x28f0 <LCD_sendCommand+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    289e:	6b 85       	ldd	r22, Y+11	; 0x0b
    28a0:	7c 85       	ldd	r23, Y+12	; 0x0c
    28a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    28a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    28a6:	20 e0       	ldi	r18, 0x00	; 0
    28a8:	30 e0       	ldi	r19, 0x00	; 0
    28aa:	40 e2       	ldi	r20, 0x20	; 32
    28ac:	51 e4       	ldi	r21, 0x41	; 65
    28ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28b2:	dc 01       	movw	r26, r24
    28b4:	cb 01       	movw	r24, r22
    28b6:	bc 01       	movw	r22, r24
    28b8:	cd 01       	movw	r24, r26
    28ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28be:	dc 01       	movw	r26, r24
    28c0:	cb 01       	movw	r24, r22
    28c2:	9e 83       	std	Y+6, r25	; 0x06
    28c4:	8d 83       	std	Y+5, r24	; 0x05
    28c6:	0f c0       	rjmp	.+30     	; 0x28e6 <LCD_sendCommand+0x3a4>
    28c8:	88 ec       	ldi	r24, 0xC8	; 200
    28ca:	90 e0       	ldi	r25, 0x00	; 0
    28cc:	9c 83       	std	Y+4, r25	; 0x04
    28ce:	8b 83       	std	Y+3, r24	; 0x03
    28d0:	8b 81       	ldd	r24, Y+3	; 0x03
    28d2:	9c 81       	ldd	r25, Y+4	; 0x04
    28d4:	01 97       	sbiw	r24, 0x01	; 1
    28d6:	f1 f7       	brne	.-4      	; 0x28d4 <LCD_sendCommand+0x392>
    28d8:	9c 83       	std	Y+4, r25	; 0x04
    28da:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28dc:	8d 81       	ldd	r24, Y+5	; 0x05
    28de:	9e 81       	ldd	r25, Y+6	; 0x06
    28e0:	01 97       	sbiw	r24, 0x01	; 1
    28e2:	9e 83       	std	Y+6, r25	; 0x06
    28e4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28e6:	8d 81       	ldd	r24, Y+5	; 0x05
    28e8:	9e 81       	ldd	r25, Y+6	; 0x06
    28ea:	00 97       	sbiw	r24, 0x00	; 0
    28ec:	69 f7       	brne	.-38     	; 0x28c8 <LCD_sendCommand+0x386>
    28ee:	14 c0       	rjmp	.+40     	; 0x2918 <LCD_sendCommand+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28f0:	6f 81       	ldd	r22, Y+7	; 0x07
    28f2:	78 85       	ldd	r23, Y+8	; 0x08
    28f4:	89 85       	ldd	r24, Y+9	; 0x09
    28f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    28f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28fc:	dc 01       	movw	r26, r24
    28fe:	cb 01       	movw	r24, r22
    2900:	9e 83       	std	Y+6, r25	; 0x06
    2902:	8d 83       	std	Y+5, r24	; 0x05
    2904:	8d 81       	ldd	r24, Y+5	; 0x05
    2906:	9e 81       	ldd	r25, Y+6	; 0x06
    2908:	9a 83       	std	Y+2, r25	; 0x02
    290a:	89 83       	std	Y+1, r24	; 0x01
    290c:	89 81       	ldd	r24, Y+1	; 0x01
    290e:	9a 81       	ldd	r25, Y+2	; 0x02
    2910:	01 97       	sbiw	r24, 0x01	; 1
    2912:	f1 f7       	brne	.-4      	; 0x2910 <LCD_sendCommand+0x3ce>
    2914:	9a 83       	std	Y+2, r25	; 0x02
    2916:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    2918:	e9 96       	adiw	r28, 0x39	; 57
    291a:	0f b6       	in	r0, 0x3f	; 63
    291c:	f8 94       	cli
    291e:	de bf       	out	0x3e, r29	; 62
    2920:	0f be       	out	0x3f, r0	; 63
    2922:	cd bf       	out	0x3d, r28	; 61
    2924:	cf 91       	pop	r28
    2926:	df 91       	pop	r29
    2928:	08 95       	ret

0000292a <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    292a:	df 93       	push	r29
    292c:	cf 93       	push	r28
    292e:	cd b7       	in	r28, 0x3d	; 61
    2930:	de b7       	in	r29, 0x3e	; 62
    2932:	e9 97       	sbiw	r28, 0x39	; 57
    2934:	0f b6       	in	r0, 0x3f	; 63
    2936:	f8 94       	cli
    2938:	de bf       	out	0x3e, r29	; 62
    293a:	0f be       	out	0x3f, r0	; 63
    293c:	cd bf       	out	0x3d, r28	; 61
    293e:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    2940:	80 e0       	ldi	r24, 0x00	; 0
    2942:	60 e0       	ldi	r22, 0x00	; 0
    2944:	41 e0       	ldi	r20, 0x01	; 1
    2946:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    294a:	80 e0       	ldi	r24, 0x00	; 0
    294c:	61 e0       	ldi	r22, 0x01	; 1
    294e:	40 e0       	ldi	r20, 0x00	; 0
    2950:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <GPIO_writePin>
    2954:	80 e0       	ldi	r24, 0x00	; 0
    2956:	90 e0       	ldi	r25, 0x00	; 0
    2958:	a0 e8       	ldi	r26, 0x80	; 128
    295a:	bf e3       	ldi	r27, 0x3F	; 63
    295c:	8d ab       	std	Y+53, r24	; 0x35
    295e:	9e ab       	std	Y+54, r25	; 0x36
    2960:	af ab       	std	Y+55, r26	; 0x37
    2962:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2964:	6d a9       	ldd	r22, Y+53	; 0x35
    2966:	7e a9       	ldd	r23, Y+54	; 0x36
    2968:	8f a9       	ldd	r24, Y+55	; 0x37
    296a:	98 ad       	ldd	r25, Y+56	; 0x38
    296c:	20 e0       	ldi	r18, 0x00	; 0
    296e:	30 e0       	ldi	r19, 0x00	; 0
    2970:	4a ef       	ldi	r20, 0xFA	; 250
    2972:	54 e4       	ldi	r21, 0x44	; 68
    2974:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2978:	dc 01       	movw	r26, r24
    297a:	cb 01       	movw	r24, r22
    297c:	89 ab       	std	Y+49, r24	; 0x31
    297e:	9a ab       	std	Y+50, r25	; 0x32
    2980:	ab ab       	std	Y+51, r26	; 0x33
    2982:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2984:	69 a9       	ldd	r22, Y+49	; 0x31
    2986:	7a a9       	ldd	r23, Y+50	; 0x32
    2988:	8b a9       	ldd	r24, Y+51	; 0x33
    298a:	9c a9       	ldd	r25, Y+52	; 0x34
    298c:	20 e0       	ldi	r18, 0x00	; 0
    298e:	30 e0       	ldi	r19, 0x00	; 0
    2990:	40 e8       	ldi	r20, 0x80	; 128
    2992:	5f e3       	ldi	r21, 0x3F	; 63
    2994:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2998:	88 23       	and	r24, r24
    299a:	2c f4       	brge	.+10     	; 0x29a6 <LCD_displayCharacter+0x7c>
		__ticks = 1;
    299c:	81 e0       	ldi	r24, 0x01	; 1
    299e:	90 e0       	ldi	r25, 0x00	; 0
    29a0:	98 ab       	std	Y+48, r25	; 0x30
    29a2:	8f a7       	std	Y+47, r24	; 0x2f
    29a4:	3f c0       	rjmp	.+126    	; 0x2a24 <LCD_displayCharacter+0xfa>
	else if (__tmp > 65535)
    29a6:	69 a9       	ldd	r22, Y+49	; 0x31
    29a8:	7a a9       	ldd	r23, Y+50	; 0x32
    29aa:	8b a9       	ldd	r24, Y+51	; 0x33
    29ac:	9c a9       	ldd	r25, Y+52	; 0x34
    29ae:	20 e0       	ldi	r18, 0x00	; 0
    29b0:	3f ef       	ldi	r19, 0xFF	; 255
    29b2:	4f e7       	ldi	r20, 0x7F	; 127
    29b4:	57 e4       	ldi	r21, 0x47	; 71
    29b6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29ba:	18 16       	cp	r1, r24
    29bc:	4c f5       	brge	.+82     	; 0x2a10 <LCD_displayCharacter+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29be:	6d a9       	ldd	r22, Y+53	; 0x35
    29c0:	7e a9       	ldd	r23, Y+54	; 0x36
    29c2:	8f a9       	ldd	r24, Y+55	; 0x37
    29c4:	98 ad       	ldd	r25, Y+56	; 0x38
    29c6:	20 e0       	ldi	r18, 0x00	; 0
    29c8:	30 e0       	ldi	r19, 0x00	; 0
    29ca:	40 e2       	ldi	r20, 0x20	; 32
    29cc:	51 e4       	ldi	r21, 0x41	; 65
    29ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29d2:	dc 01       	movw	r26, r24
    29d4:	cb 01       	movw	r24, r22
    29d6:	bc 01       	movw	r22, r24
    29d8:	cd 01       	movw	r24, r26
    29da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29de:	dc 01       	movw	r26, r24
    29e0:	cb 01       	movw	r24, r22
    29e2:	98 ab       	std	Y+48, r25	; 0x30
    29e4:	8f a7       	std	Y+47, r24	; 0x2f
    29e6:	0f c0       	rjmp	.+30     	; 0x2a06 <LCD_displayCharacter+0xdc>
    29e8:	88 ec       	ldi	r24, 0xC8	; 200
    29ea:	90 e0       	ldi	r25, 0x00	; 0
    29ec:	9e a7       	std	Y+46, r25	; 0x2e
    29ee:	8d a7       	std	Y+45, r24	; 0x2d
    29f0:	8d a5       	ldd	r24, Y+45	; 0x2d
    29f2:	9e a5       	ldd	r25, Y+46	; 0x2e
    29f4:	01 97       	sbiw	r24, 0x01	; 1
    29f6:	f1 f7       	brne	.-4      	; 0x29f4 <LCD_displayCharacter+0xca>
    29f8:	9e a7       	std	Y+46, r25	; 0x2e
    29fa:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29fc:	8f a5       	ldd	r24, Y+47	; 0x2f
    29fe:	98 a9       	ldd	r25, Y+48	; 0x30
    2a00:	01 97       	sbiw	r24, 0x01	; 1
    2a02:	98 ab       	std	Y+48, r25	; 0x30
    2a04:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a06:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a08:	98 a9       	ldd	r25, Y+48	; 0x30
    2a0a:	00 97       	sbiw	r24, 0x00	; 0
    2a0c:	69 f7       	brne	.-38     	; 0x29e8 <LCD_displayCharacter+0xbe>
    2a0e:	14 c0       	rjmp	.+40     	; 0x2a38 <LCD_displayCharacter+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a10:	69 a9       	ldd	r22, Y+49	; 0x31
    2a12:	7a a9       	ldd	r23, Y+50	; 0x32
    2a14:	8b a9       	ldd	r24, Y+51	; 0x33
    2a16:	9c a9       	ldd	r25, Y+52	; 0x34
    2a18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a1c:	dc 01       	movw	r26, r24
    2a1e:	cb 01       	movw	r24, r22
    2a20:	98 ab       	std	Y+48, r25	; 0x30
    2a22:	8f a7       	std	Y+47, r24	; 0x2f
    2a24:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a26:	98 a9       	ldd	r25, Y+48	; 0x30
    2a28:	9c a7       	std	Y+44, r25	; 0x2c
    2a2a:	8b a7       	std	Y+43, r24	; 0x2b
    2a2c:	8b a5       	ldd	r24, Y+43	; 0x2b
    2a2e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2a30:	01 97       	sbiw	r24, 0x01	; 1
    2a32:	f1 f7       	brne	.-4      	; 0x2a30 <LCD_displayCharacter+0x106>
    2a34:	9c a7       	std	Y+44, r25	; 0x2c
    2a36:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2a38:	80 e0       	ldi	r24, 0x00	; 0
    2a3a:	62 e0       	ldi	r22, 0x02	; 2
    2a3c:	41 e0       	ldi	r20, 0x01	; 1
    2a3e:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <GPIO_writePin>
    2a42:	80 e0       	ldi	r24, 0x00	; 0
    2a44:	90 e0       	ldi	r25, 0x00	; 0
    2a46:	a0 e8       	ldi	r26, 0x80	; 128
    2a48:	bf e3       	ldi	r27, 0x3F	; 63
    2a4a:	8f a3       	std	Y+39, r24	; 0x27
    2a4c:	98 a7       	std	Y+40, r25	; 0x28
    2a4e:	a9 a7       	std	Y+41, r26	; 0x29
    2a50:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a52:	6f a1       	ldd	r22, Y+39	; 0x27
    2a54:	78 a5       	ldd	r23, Y+40	; 0x28
    2a56:	89 a5       	ldd	r24, Y+41	; 0x29
    2a58:	9a a5       	ldd	r25, Y+42	; 0x2a
    2a5a:	20 e0       	ldi	r18, 0x00	; 0
    2a5c:	30 e0       	ldi	r19, 0x00	; 0
    2a5e:	4a ef       	ldi	r20, 0xFA	; 250
    2a60:	54 e4       	ldi	r21, 0x44	; 68
    2a62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a66:	dc 01       	movw	r26, r24
    2a68:	cb 01       	movw	r24, r22
    2a6a:	8b a3       	std	Y+35, r24	; 0x23
    2a6c:	9c a3       	std	Y+36, r25	; 0x24
    2a6e:	ad a3       	std	Y+37, r26	; 0x25
    2a70:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2a72:	6b a1       	ldd	r22, Y+35	; 0x23
    2a74:	7c a1       	ldd	r23, Y+36	; 0x24
    2a76:	8d a1       	ldd	r24, Y+37	; 0x25
    2a78:	9e a1       	ldd	r25, Y+38	; 0x26
    2a7a:	20 e0       	ldi	r18, 0x00	; 0
    2a7c:	30 e0       	ldi	r19, 0x00	; 0
    2a7e:	40 e8       	ldi	r20, 0x80	; 128
    2a80:	5f e3       	ldi	r21, 0x3F	; 63
    2a82:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a86:	88 23       	and	r24, r24
    2a88:	2c f4       	brge	.+10     	; 0x2a94 <LCD_displayCharacter+0x16a>
		__ticks = 1;
    2a8a:	81 e0       	ldi	r24, 0x01	; 1
    2a8c:	90 e0       	ldi	r25, 0x00	; 0
    2a8e:	9a a3       	std	Y+34, r25	; 0x22
    2a90:	89 a3       	std	Y+33, r24	; 0x21
    2a92:	3f c0       	rjmp	.+126    	; 0x2b12 <LCD_displayCharacter+0x1e8>
	else if (__tmp > 65535)
    2a94:	6b a1       	ldd	r22, Y+35	; 0x23
    2a96:	7c a1       	ldd	r23, Y+36	; 0x24
    2a98:	8d a1       	ldd	r24, Y+37	; 0x25
    2a9a:	9e a1       	ldd	r25, Y+38	; 0x26
    2a9c:	20 e0       	ldi	r18, 0x00	; 0
    2a9e:	3f ef       	ldi	r19, 0xFF	; 255
    2aa0:	4f e7       	ldi	r20, 0x7F	; 127
    2aa2:	57 e4       	ldi	r21, 0x47	; 71
    2aa4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2aa8:	18 16       	cp	r1, r24
    2aaa:	4c f5       	brge	.+82     	; 0x2afe <LCD_displayCharacter+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2aac:	6f a1       	ldd	r22, Y+39	; 0x27
    2aae:	78 a5       	ldd	r23, Y+40	; 0x28
    2ab0:	89 a5       	ldd	r24, Y+41	; 0x29
    2ab2:	9a a5       	ldd	r25, Y+42	; 0x2a
    2ab4:	20 e0       	ldi	r18, 0x00	; 0
    2ab6:	30 e0       	ldi	r19, 0x00	; 0
    2ab8:	40 e2       	ldi	r20, 0x20	; 32
    2aba:	51 e4       	ldi	r21, 0x41	; 65
    2abc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ac0:	dc 01       	movw	r26, r24
    2ac2:	cb 01       	movw	r24, r22
    2ac4:	bc 01       	movw	r22, r24
    2ac6:	cd 01       	movw	r24, r26
    2ac8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2acc:	dc 01       	movw	r26, r24
    2ace:	cb 01       	movw	r24, r22
    2ad0:	9a a3       	std	Y+34, r25	; 0x22
    2ad2:	89 a3       	std	Y+33, r24	; 0x21
    2ad4:	0f c0       	rjmp	.+30     	; 0x2af4 <LCD_displayCharacter+0x1ca>
    2ad6:	88 ec       	ldi	r24, 0xC8	; 200
    2ad8:	90 e0       	ldi	r25, 0x00	; 0
    2ada:	98 a3       	std	Y+32, r25	; 0x20
    2adc:	8f 8f       	std	Y+31, r24	; 0x1f
    2ade:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2ae0:	98 a1       	ldd	r25, Y+32	; 0x20
    2ae2:	01 97       	sbiw	r24, 0x01	; 1
    2ae4:	f1 f7       	brne	.-4      	; 0x2ae2 <LCD_displayCharacter+0x1b8>
    2ae6:	98 a3       	std	Y+32, r25	; 0x20
    2ae8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2aea:	89 a1       	ldd	r24, Y+33	; 0x21
    2aec:	9a a1       	ldd	r25, Y+34	; 0x22
    2aee:	01 97       	sbiw	r24, 0x01	; 1
    2af0:	9a a3       	std	Y+34, r25	; 0x22
    2af2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2af4:	89 a1       	ldd	r24, Y+33	; 0x21
    2af6:	9a a1       	ldd	r25, Y+34	; 0x22
    2af8:	00 97       	sbiw	r24, 0x00	; 0
    2afa:	69 f7       	brne	.-38     	; 0x2ad6 <LCD_displayCharacter+0x1ac>
    2afc:	14 c0       	rjmp	.+40     	; 0x2b26 <LCD_displayCharacter+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2afe:	6b a1       	ldd	r22, Y+35	; 0x23
    2b00:	7c a1       	ldd	r23, Y+36	; 0x24
    2b02:	8d a1       	ldd	r24, Y+37	; 0x25
    2b04:	9e a1       	ldd	r25, Y+38	; 0x26
    2b06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b0a:	dc 01       	movw	r26, r24
    2b0c:	cb 01       	movw	r24, r22
    2b0e:	9a a3       	std	Y+34, r25	; 0x22
    2b10:	89 a3       	std	Y+33, r24	; 0x21
    2b12:	89 a1       	ldd	r24, Y+33	; 0x21
    2b14:	9a a1       	ldd	r25, Y+34	; 0x22
    2b16:	9e 8f       	std	Y+30, r25	; 0x1e
    2b18:	8d 8f       	std	Y+29, r24	; 0x1d
    2b1a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2b1c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2b1e:	01 97       	sbiw	r24, 0x01	; 1
    2b20:	f1 f7       	brne	.-4      	; 0x2b1e <LCD_displayCharacter+0x1f4>
    2b22:	9e 8f       	std	Y+30, r25	; 0x1e
    2b24:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    2b26:	82 e0       	ldi	r24, 0x02	; 2
    2b28:	69 ad       	ldd	r22, Y+57	; 0x39
    2b2a:	0e 94 fd 10 	call	0x21fa	; 0x21fa <GPIO_writePort>
    2b2e:	80 e0       	ldi	r24, 0x00	; 0
    2b30:	90 e0       	ldi	r25, 0x00	; 0
    2b32:	a0 e8       	ldi	r26, 0x80	; 128
    2b34:	bf e3       	ldi	r27, 0x3F	; 63
    2b36:	89 8f       	std	Y+25, r24	; 0x19
    2b38:	9a 8f       	std	Y+26, r25	; 0x1a
    2b3a:	ab 8f       	std	Y+27, r26	; 0x1b
    2b3c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b3e:	69 8d       	ldd	r22, Y+25	; 0x19
    2b40:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b42:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b44:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b46:	20 e0       	ldi	r18, 0x00	; 0
    2b48:	30 e0       	ldi	r19, 0x00	; 0
    2b4a:	4a ef       	ldi	r20, 0xFA	; 250
    2b4c:	54 e4       	ldi	r21, 0x44	; 68
    2b4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b52:	dc 01       	movw	r26, r24
    2b54:	cb 01       	movw	r24, r22
    2b56:	8d 8b       	std	Y+21, r24	; 0x15
    2b58:	9e 8b       	std	Y+22, r25	; 0x16
    2b5a:	af 8b       	std	Y+23, r26	; 0x17
    2b5c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2b5e:	6d 89       	ldd	r22, Y+21	; 0x15
    2b60:	7e 89       	ldd	r23, Y+22	; 0x16
    2b62:	8f 89       	ldd	r24, Y+23	; 0x17
    2b64:	98 8d       	ldd	r25, Y+24	; 0x18
    2b66:	20 e0       	ldi	r18, 0x00	; 0
    2b68:	30 e0       	ldi	r19, 0x00	; 0
    2b6a:	40 e8       	ldi	r20, 0x80	; 128
    2b6c:	5f e3       	ldi	r21, 0x3F	; 63
    2b6e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b72:	88 23       	and	r24, r24
    2b74:	2c f4       	brge	.+10     	; 0x2b80 <LCD_displayCharacter+0x256>
		__ticks = 1;
    2b76:	81 e0       	ldi	r24, 0x01	; 1
    2b78:	90 e0       	ldi	r25, 0x00	; 0
    2b7a:	9c 8b       	std	Y+20, r25	; 0x14
    2b7c:	8b 8b       	std	Y+19, r24	; 0x13
    2b7e:	3f c0       	rjmp	.+126    	; 0x2bfe <LCD_displayCharacter+0x2d4>
	else if (__tmp > 65535)
    2b80:	6d 89       	ldd	r22, Y+21	; 0x15
    2b82:	7e 89       	ldd	r23, Y+22	; 0x16
    2b84:	8f 89       	ldd	r24, Y+23	; 0x17
    2b86:	98 8d       	ldd	r25, Y+24	; 0x18
    2b88:	20 e0       	ldi	r18, 0x00	; 0
    2b8a:	3f ef       	ldi	r19, 0xFF	; 255
    2b8c:	4f e7       	ldi	r20, 0x7F	; 127
    2b8e:	57 e4       	ldi	r21, 0x47	; 71
    2b90:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b94:	18 16       	cp	r1, r24
    2b96:	4c f5       	brge	.+82     	; 0x2bea <LCD_displayCharacter+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b98:	69 8d       	ldd	r22, Y+25	; 0x19
    2b9a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b9c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b9e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ba0:	20 e0       	ldi	r18, 0x00	; 0
    2ba2:	30 e0       	ldi	r19, 0x00	; 0
    2ba4:	40 e2       	ldi	r20, 0x20	; 32
    2ba6:	51 e4       	ldi	r21, 0x41	; 65
    2ba8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bac:	dc 01       	movw	r26, r24
    2bae:	cb 01       	movw	r24, r22
    2bb0:	bc 01       	movw	r22, r24
    2bb2:	cd 01       	movw	r24, r26
    2bb4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bb8:	dc 01       	movw	r26, r24
    2bba:	cb 01       	movw	r24, r22
    2bbc:	9c 8b       	std	Y+20, r25	; 0x14
    2bbe:	8b 8b       	std	Y+19, r24	; 0x13
    2bc0:	0f c0       	rjmp	.+30     	; 0x2be0 <LCD_displayCharacter+0x2b6>
    2bc2:	88 ec       	ldi	r24, 0xC8	; 200
    2bc4:	90 e0       	ldi	r25, 0x00	; 0
    2bc6:	9a 8b       	std	Y+18, r25	; 0x12
    2bc8:	89 8b       	std	Y+17, r24	; 0x11
    2bca:	89 89       	ldd	r24, Y+17	; 0x11
    2bcc:	9a 89       	ldd	r25, Y+18	; 0x12
    2bce:	01 97       	sbiw	r24, 0x01	; 1
    2bd0:	f1 f7       	brne	.-4      	; 0x2bce <LCD_displayCharacter+0x2a4>
    2bd2:	9a 8b       	std	Y+18, r25	; 0x12
    2bd4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bd6:	8b 89       	ldd	r24, Y+19	; 0x13
    2bd8:	9c 89       	ldd	r25, Y+20	; 0x14
    2bda:	01 97       	sbiw	r24, 0x01	; 1
    2bdc:	9c 8b       	std	Y+20, r25	; 0x14
    2bde:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2be0:	8b 89       	ldd	r24, Y+19	; 0x13
    2be2:	9c 89       	ldd	r25, Y+20	; 0x14
    2be4:	00 97       	sbiw	r24, 0x00	; 0
    2be6:	69 f7       	brne	.-38     	; 0x2bc2 <LCD_displayCharacter+0x298>
    2be8:	14 c0       	rjmp	.+40     	; 0x2c12 <LCD_displayCharacter+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bea:	6d 89       	ldd	r22, Y+21	; 0x15
    2bec:	7e 89       	ldd	r23, Y+22	; 0x16
    2bee:	8f 89       	ldd	r24, Y+23	; 0x17
    2bf0:	98 8d       	ldd	r25, Y+24	; 0x18
    2bf2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bf6:	dc 01       	movw	r26, r24
    2bf8:	cb 01       	movw	r24, r22
    2bfa:	9c 8b       	std	Y+20, r25	; 0x14
    2bfc:	8b 8b       	std	Y+19, r24	; 0x13
    2bfe:	8b 89       	ldd	r24, Y+19	; 0x13
    2c00:	9c 89       	ldd	r25, Y+20	; 0x14
    2c02:	98 8b       	std	Y+16, r25	; 0x10
    2c04:	8f 87       	std	Y+15, r24	; 0x0f
    2c06:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c08:	98 89       	ldd	r25, Y+16	; 0x10
    2c0a:	01 97       	sbiw	r24, 0x01	; 1
    2c0c:	f1 f7       	brne	.-4      	; 0x2c0a <LCD_displayCharacter+0x2e0>
    2c0e:	98 8b       	std	Y+16, r25	; 0x10
    2c10:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2c12:	80 e0       	ldi	r24, 0x00	; 0
    2c14:	62 e0       	ldi	r22, 0x02	; 2
    2c16:	40 e0       	ldi	r20, 0x00	; 0
    2c18:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <GPIO_writePin>
    2c1c:	80 e0       	ldi	r24, 0x00	; 0
    2c1e:	90 e0       	ldi	r25, 0x00	; 0
    2c20:	a0 e8       	ldi	r26, 0x80	; 128
    2c22:	bf e3       	ldi	r27, 0x3F	; 63
    2c24:	8b 87       	std	Y+11, r24	; 0x0b
    2c26:	9c 87       	std	Y+12, r25	; 0x0c
    2c28:	ad 87       	std	Y+13, r26	; 0x0d
    2c2a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c2c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c2e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c30:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c32:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c34:	20 e0       	ldi	r18, 0x00	; 0
    2c36:	30 e0       	ldi	r19, 0x00	; 0
    2c38:	4a ef       	ldi	r20, 0xFA	; 250
    2c3a:	54 e4       	ldi	r21, 0x44	; 68
    2c3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c40:	dc 01       	movw	r26, r24
    2c42:	cb 01       	movw	r24, r22
    2c44:	8f 83       	std	Y+7, r24	; 0x07
    2c46:	98 87       	std	Y+8, r25	; 0x08
    2c48:	a9 87       	std	Y+9, r26	; 0x09
    2c4a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c4c:	6f 81       	ldd	r22, Y+7	; 0x07
    2c4e:	78 85       	ldd	r23, Y+8	; 0x08
    2c50:	89 85       	ldd	r24, Y+9	; 0x09
    2c52:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c54:	20 e0       	ldi	r18, 0x00	; 0
    2c56:	30 e0       	ldi	r19, 0x00	; 0
    2c58:	40 e8       	ldi	r20, 0x80	; 128
    2c5a:	5f e3       	ldi	r21, 0x3F	; 63
    2c5c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c60:	88 23       	and	r24, r24
    2c62:	2c f4       	brge	.+10     	; 0x2c6e <LCD_displayCharacter+0x344>
		__ticks = 1;
    2c64:	81 e0       	ldi	r24, 0x01	; 1
    2c66:	90 e0       	ldi	r25, 0x00	; 0
    2c68:	9e 83       	std	Y+6, r25	; 0x06
    2c6a:	8d 83       	std	Y+5, r24	; 0x05
    2c6c:	3f c0       	rjmp	.+126    	; 0x2cec <LCD_displayCharacter+0x3c2>
	else if (__tmp > 65535)
    2c6e:	6f 81       	ldd	r22, Y+7	; 0x07
    2c70:	78 85       	ldd	r23, Y+8	; 0x08
    2c72:	89 85       	ldd	r24, Y+9	; 0x09
    2c74:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c76:	20 e0       	ldi	r18, 0x00	; 0
    2c78:	3f ef       	ldi	r19, 0xFF	; 255
    2c7a:	4f e7       	ldi	r20, 0x7F	; 127
    2c7c:	57 e4       	ldi	r21, 0x47	; 71
    2c7e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c82:	18 16       	cp	r1, r24
    2c84:	4c f5       	brge	.+82     	; 0x2cd8 <LCD_displayCharacter+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c86:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c88:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c8a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c8c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c8e:	20 e0       	ldi	r18, 0x00	; 0
    2c90:	30 e0       	ldi	r19, 0x00	; 0
    2c92:	40 e2       	ldi	r20, 0x20	; 32
    2c94:	51 e4       	ldi	r21, 0x41	; 65
    2c96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c9a:	dc 01       	movw	r26, r24
    2c9c:	cb 01       	movw	r24, r22
    2c9e:	bc 01       	movw	r22, r24
    2ca0:	cd 01       	movw	r24, r26
    2ca2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ca6:	dc 01       	movw	r26, r24
    2ca8:	cb 01       	movw	r24, r22
    2caa:	9e 83       	std	Y+6, r25	; 0x06
    2cac:	8d 83       	std	Y+5, r24	; 0x05
    2cae:	0f c0       	rjmp	.+30     	; 0x2cce <LCD_displayCharacter+0x3a4>
    2cb0:	88 ec       	ldi	r24, 0xC8	; 200
    2cb2:	90 e0       	ldi	r25, 0x00	; 0
    2cb4:	9c 83       	std	Y+4, r25	; 0x04
    2cb6:	8b 83       	std	Y+3, r24	; 0x03
    2cb8:	8b 81       	ldd	r24, Y+3	; 0x03
    2cba:	9c 81       	ldd	r25, Y+4	; 0x04
    2cbc:	01 97       	sbiw	r24, 0x01	; 1
    2cbe:	f1 f7       	brne	.-4      	; 0x2cbc <LCD_displayCharacter+0x392>
    2cc0:	9c 83       	std	Y+4, r25	; 0x04
    2cc2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cc4:	8d 81       	ldd	r24, Y+5	; 0x05
    2cc6:	9e 81       	ldd	r25, Y+6	; 0x06
    2cc8:	01 97       	sbiw	r24, 0x01	; 1
    2cca:	9e 83       	std	Y+6, r25	; 0x06
    2ccc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cce:	8d 81       	ldd	r24, Y+5	; 0x05
    2cd0:	9e 81       	ldd	r25, Y+6	; 0x06
    2cd2:	00 97       	sbiw	r24, 0x00	; 0
    2cd4:	69 f7       	brne	.-38     	; 0x2cb0 <LCD_displayCharacter+0x386>
    2cd6:	14 c0       	rjmp	.+40     	; 0x2d00 <LCD_displayCharacter+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cd8:	6f 81       	ldd	r22, Y+7	; 0x07
    2cda:	78 85       	ldd	r23, Y+8	; 0x08
    2cdc:	89 85       	ldd	r24, Y+9	; 0x09
    2cde:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ce0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ce4:	dc 01       	movw	r26, r24
    2ce6:	cb 01       	movw	r24, r22
    2ce8:	9e 83       	std	Y+6, r25	; 0x06
    2cea:	8d 83       	std	Y+5, r24	; 0x05
    2cec:	8d 81       	ldd	r24, Y+5	; 0x05
    2cee:	9e 81       	ldd	r25, Y+6	; 0x06
    2cf0:	9a 83       	std	Y+2, r25	; 0x02
    2cf2:	89 83       	std	Y+1, r24	; 0x01
    2cf4:	89 81       	ldd	r24, Y+1	; 0x01
    2cf6:	9a 81       	ldd	r25, Y+2	; 0x02
    2cf8:	01 97       	sbiw	r24, 0x01	; 1
    2cfa:	f1 f7       	brne	.-4      	; 0x2cf8 <LCD_displayCharacter+0x3ce>
    2cfc:	9a 83       	std	Y+2, r25	; 0x02
    2cfe:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    2d00:	e9 96       	adiw	r28, 0x39	; 57
    2d02:	0f b6       	in	r0, 0x3f	; 63
    2d04:	f8 94       	cli
    2d06:	de bf       	out	0x3e, r29	; 62
    2d08:	0f be       	out	0x3f, r0	; 63
    2d0a:	cd bf       	out	0x3d, r28	; 61
    2d0c:	cf 91       	pop	r28
    2d0e:	df 91       	pop	r29
    2d10:	08 95       	ret

00002d12 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    2d12:	df 93       	push	r29
    2d14:	cf 93       	push	r28
    2d16:	00 d0       	rcall	.+0      	; 0x2d18 <LCD_displayString+0x6>
    2d18:	0f 92       	push	r0
    2d1a:	cd b7       	in	r28, 0x3d	; 61
    2d1c:	de b7       	in	r29, 0x3e	; 62
    2d1e:	9b 83       	std	Y+3, r25	; 0x03
    2d20:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2d22:	19 82       	std	Y+1, r1	; 0x01
    2d24:	0e c0       	rjmp	.+28     	; 0x2d42 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2d26:	89 81       	ldd	r24, Y+1	; 0x01
    2d28:	28 2f       	mov	r18, r24
    2d2a:	30 e0       	ldi	r19, 0x00	; 0
    2d2c:	8a 81       	ldd	r24, Y+2	; 0x02
    2d2e:	9b 81       	ldd	r25, Y+3	; 0x03
    2d30:	fc 01       	movw	r30, r24
    2d32:	e2 0f       	add	r30, r18
    2d34:	f3 1f       	adc	r31, r19
    2d36:	80 81       	ld	r24, Z
    2d38:	0e 94 95 14 	call	0x292a	; 0x292a <LCD_displayCharacter>
		i++;
    2d3c:	89 81       	ldd	r24, Y+1	; 0x01
    2d3e:	8f 5f       	subi	r24, 0xFF	; 255
    2d40:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2d42:	89 81       	ldd	r24, Y+1	; 0x01
    2d44:	28 2f       	mov	r18, r24
    2d46:	30 e0       	ldi	r19, 0x00	; 0
    2d48:	8a 81       	ldd	r24, Y+2	; 0x02
    2d4a:	9b 81       	ldd	r25, Y+3	; 0x03
    2d4c:	fc 01       	movw	r30, r24
    2d4e:	e2 0f       	add	r30, r18
    2d50:	f3 1f       	adc	r31, r19
    2d52:	80 81       	ld	r24, Z
    2d54:	88 23       	and	r24, r24
    2d56:	39 f7       	brne	.-50     	; 0x2d26 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    2d58:	0f 90       	pop	r0
    2d5a:	0f 90       	pop	r0
    2d5c:	0f 90       	pop	r0
    2d5e:	cf 91       	pop	r28
    2d60:	df 91       	pop	r29
    2d62:	08 95       	ret

00002d64 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    2d64:	df 93       	push	r29
    2d66:	cf 93       	push	r28
    2d68:	00 d0       	rcall	.+0      	; 0x2d6a <LCD_moveCursor+0x6>
    2d6a:	00 d0       	rcall	.+0      	; 0x2d6c <LCD_moveCursor+0x8>
    2d6c:	0f 92       	push	r0
    2d6e:	cd b7       	in	r28, 0x3d	; 61
    2d70:	de b7       	in	r29, 0x3e	; 62
    2d72:	8a 83       	std	Y+2, r24	; 0x02
    2d74:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    2d76:	8a 81       	ldd	r24, Y+2	; 0x02
    2d78:	28 2f       	mov	r18, r24
    2d7a:	30 e0       	ldi	r19, 0x00	; 0
    2d7c:	3d 83       	std	Y+5, r19	; 0x05
    2d7e:	2c 83       	std	Y+4, r18	; 0x04
    2d80:	8c 81       	ldd	r24, Y+4	; 0x04
    2d82:	9d 81       	ldd	r25, Y+5	; 0x05
    2d84:	81 30       	cpi	r24, 0x01	; 1
    2d86:	91 05       	cpc	r25, r1
    2d88:	c1 f0       	breq	.+48     	; 0x2dba <LCD_moveCursor+0x56>
    2d8a:	2c 81       	ldd	r18, Y+4	; 0x04
    2d8c:	3d 81       	ldd	r19, Y+5	; 0x05
    2d8e:	22 30       	cpi	r18, 0x02	; 2
    2d90:	31 05       	cpc	r19, r1
    2d92:	2c f4       	brge	.+10     	; 0x2d9e <LCD_moveCursor+0x3a>
    2d94:	8c 81       	ldd	r24, Y+4	; 0x04
    2d96:	9d 81       	ldd	r25, Y+5	; 0x05
    2d98:	00 97       	sbiw	r24, 0x00	; 0
    2d9a:	61 f0       	breq	.+24     	; 0x2db4 <LCD_moveCursor+0x50>
    2d9c:	19 c0       	rjmp	.+50     	; 0x2dd0 <LCD_moveCursor+0x6c>
    2d9e:	2c 81       	ldd	r18, Y+4	; 0x04
    2da0:	3d 81       	ldd	r19, Y+5	; 0x05
    2da2:	22 30       	cpi	r18, 0x02	; 2
    2da4:	31 05       	cpc	r19, r1
    2da6:	69 f0       	breq	.+26     	; 0x2dc2 <LCD_moveCursor+0x5e>
    2da8:	8c 81       	ldd	r24, Y+4	; 0x04
    2daa:	9d 81       	ldd	r25, Y+5	; 0x05
    2dac:	83 30       	cpi	r24, 0x03	; 3
    2dae:	91 05       	cpc	r25, r1
    2db0:	61 f0       	breq	.+24     	; 0x2dca <LCD_moveCursor+0x66>
    2db2:	0e c0       	rjmp	.+28     	; 0x2dd0 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    2db4:	8b 81       	ldd	r24, Y+3	; 0x03
    2db6:	89 83       	std	Y+1, r24	; 0x01
    2db8:	0b c0       	rjmp	.+22     	; 0x2dd0 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    2dba:	8b 81       	ldd	r24, Y+3	; 0x03
    2dbc:	80 5c       	subi	r24, 0xC0	; 192
    2dbe:	89 83       	std	Y+1, r24	; 0x01
    2dc0:	07 c0       	rjmp	.+14     	; 0x2dd0 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    2dc2:	8b 81       	ldd	r24, Y+3	; 0x03
    2dc4:	80 5f       	subi	r24, 0xF0	; 240
    2dc6:	89 83       	std	Y+1, r24	; 0x01
    2dc8:	03 c0       	rjmp	.+6      	; 0x2dd0 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    2dca:	8b 81       	ldd	r24, Y+3	; 0x03
    2dcc:	80 5b       	subi	r24, 0xB0	; 176
    2dce:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2dd0:	89 81       	ldd	r24, Y+1	; 0x01
    2dd2:	80 68       	ori	r24, 0x80	; 128
    2dd4:	0e 94 a1 12 	call	0x2542	; 0x2542 <LCD_sendCommand>
}
    2dd8:	0f 90       	pop	r0
    2dda:	0f 90       	pop	r0
    2ddc:	0f 90       	pop	r0
    2dde:	0f 90       	pop	r0
    2de0:	0f 90       	pop	r0
    2de2:	cf 91       	pop	r28
    2de4:	df 91       	pop	r29
    2de6:	08 95       	ret

00002de8 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2de8:	df 93       	push	r29
    2dea:	cf 93       	push	r28
    2dec:	00 d0       	rcall	.+0      	; 0x2dee <LCD_displayStringRowColumn+0x6>
    2dee:	00 d0       	rcall	.+0      	; 0x2df0 <LCD_displayStringRowColumn+0x8>
    2df0:	cd b7       	in	r28, 0x3d	; 61
    2df2:	de b7       	in	r29, 0x3e	; 62
    2df4:	89 83       	std	Y+1, r24	; 0x01
    2df6:	6a 83       	std	Y+2, r22	; 0x02
    2df8:	5c 83       	std	Y+4, r21	; 0x04
    2dfa:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    2dfc:	89 81       	ldd	r24, Y+1	; 0x01
    2dfe:	6a 81       	ldd	r22, Y+2	; 0x02
    2e00:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    2e04:	8b 81       	ldd	r24, Y+3	; 0x03
    2e06:	9c 81       	ldd	r25, Y+4	; 0x04
    2e08:	0e 94 89 16 	call	0x2d12	; 0x2d12 <LCD_displayString>
}
    2e0c:	0f 90       	pop	r0
    2e0e:	0f 90       	pop	r0
    2e10:	0f 90       	pop	r0
    2e12:	0f 90       	pop	r0
    2e14:	cf 91       	pop	r28
    2e16:	df 91       	pop	r29
    2e18:	08 95       	ret

00002e1a <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    2e1a:	df 93       	push	r29
    2e1c:	cf 93       	push	r28
    2e1e:	cd b7       	in	r28, 0x3d	; 61
    2e20:	de b7       	in	r29, 0x3e	; 62
    2e22:	62 97       	sbiw	r28, 0x12	; 18
    2e24:	0f b6       	in	r0, 0x3f	; 63
    2e26:	f8 94       	cli
    2e28:	de bf       	out	0x3e, r29	; 62
    2e2a:	0f be       	out	0x3f, r0	; 63
    2e2c:	cd bf       	out	0x3d, r28	; 61
    2e2e:	9a 8b       	std	Y+18, r25	; 0x12
    2e30:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2e32:	89 89       	ldd	r24, Y+17	; 0x11
    2e34:	9a 89       	ldd	r25, Y+18	; 0x12
    2e36:	9e 01       	movw	r18, r28
    2e38:	2f 5f       	subi	r18, 0xFF	; 255
    2e3a:	3f 4f       	sbci	r19, 0xFF	; 255
    2e3c:	b9 01       	movw	r22, r18
    2e3e:	4a e0       	ldi	r20, 0x0A	; 10
    2e40:	50 e0       	ldi	r21, 0x00	; 0
    2e42:	0e 94 c0 18 	call	0x3180	; 0x3180 <itoa>
   LCD_displayString(buff); /* Display the string */
    2e46:	ce 01       	movw	r24, r28
    2e48:	01 96       	adiw	r24, 0x01	; 1
    2e4a:	0e 94 89 16 	call	0x2d12	; 0x2d12 <LCD_displayString>
}
    2e4e:	62 96       	adiw	r28, 0x12	; 18
    2e50:	0f b6       	in	r0, 0x3f	; 63
    2e52:	f8 94       	cli
    2e54:	de bf       	out	0x3e, r29	; 62
    2e56:	0f be       	out	0x3f, r0	; 63
    2e58:	cd bf       	out	0x3d, r28	; 61
    2e5a:	cf 91       	pop	r28
    2e5c:	df 91       	pop	r29
    2e5e:	08 95       	ret

00002e60 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    2e60:	df 93       	push	r29
    2e62:	cf 93       	push	r28
    2e64:	cd b7       	in	r28, 0x3d	; 61
    2e66:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2e68:	81 e0       	ldi	r24, 0x01	; 1
    2e6a:	0e 94 a1 12 	call	0x2542	; 0x2542 <LCD_sendCommand>
}
    2e6e:	cf 91       	pop	r28
    2e70:	df 91       	pop	r29
    2e72:	08 95       	ret

00002e74 <main>:
#include "First_MicroController.h"
#include "delay.h"


int main(void)
{
    2e74:	df 93       	push	r29
    2e76:	cf 93       	push	r28
    2e78:	cd b7       	in	r28, 0x3d	; 61
    2e7a:	de b7       	in	r29, 0x3e	; 62
    2e7c:	63 97       	sbiw	r28, 0x13	; 19
    2e7e:	0f b6       	in	r0, 0x3f	; 63
    2e80:	f8 94       	cli
    2e82:	de bf       	out	0x3e, r29	; 62
    2e84:	0f be       	out	0x3f, r0	; 63
    2e86:	cd bf       	out	0x3d, r28	; 61

	uint8 state= FALSE; 	/*  for entering password for first time*/
    2e88:	19 82       	std	Y+1, r1	; 0x01
	uint8 Pass_Limit=0;		/* counter for invalid  passwords*/
    2e8a:	1a 82       	std	Y+2, r1	; 0x02
	uint8 pass[17];			/* array of uint8 to save the password and send it by UART*/
	UART_init(9600);		/* Initialize the UART driver with Baud-rate = 9600 bits/sec */
    2e8c:	60 e8       	ldi	r22, 0x80	; 128
    2e8e:	75 e2       	ldi	r23, 0x25	; 37
    2e90:	80 e0       	ldi	r24, 0x00	; 0
    2e92:	90 e0       	ldi	r25, 0x00	; 0
    2e94:	0e 94 80 17 	call	0x2f00	; 0x2f00 <UART_init>
	LCD_init();				/* for initiating LCD */
    2e98:	0e 94 7e 12 	call	0x24fc	; 0x24fc <LCD_init>
    2e9c:	09 c0       	rjmp	.+18     	; 0x2eb0 <main+0x3c>
	while (state==FALSE){
		state=First_Time_Pass(pass);	/*function to take password and save it*/
    2e9e:	ce 01       	movw	r24, r28
    2ea0:	03 96       	adiw	r24, 0x03	; 3
    2ea2:	0e 94 a3 05 	call	0xb46	; 0xb46 <First_Time_Pass>
    2ea6:	89 83       	std	Y+1, r24	; 0x01
		 delay_Timer0(250,2);			/*delay function by timer0*/
    2ea8:	8a ef       	ldi	r24, 0xFA	; 250
    2eaa:	62 e0       	ldi	r22, 0x02	; 2
    2eac:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <delay_Timer0>
	uint8 state= FALSE; 	/*  for entering password for first time*/
	uint8 Pass_Limit=0;		/* counter for invalid  passwords*/
	uint8 pass[17];			/* array of uint8 to save the password and send it by UART*/
	UART_init(9600);		/* Initialize the UART driver with Baud-rate = 9600 bits/sec */
	LCD_init();				/* for initiating LCD */
	while (state==FALSE){
    2eb0:	89 81       	ldd	r24, Y+1	; 0x01
    2eb2:	88 23       	and	r24, r24
    2eb4:	a1 f3       	breq	.-24     	; 0x2e9e <main+0x2a>
		state=First_Time_Pass(pass);	/*function to take password and save it*/
		 delay_Timer0(250,2);			/*delay function by timer0*/
		}
	Null_to_Hash(pass);					/* function to replace NULL at the end of array by hash*/
    2eb6:	ce 01       	movw	r24, r28
    2eb8:	03 96       	adiw	r24, 0x03	; 3
    2eba:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <Null_to_Hash>
	UART_sendByte(SEND_PASS);			/* sending command to the second micro controller  */
    2ebe:	80 e0       	ldi	r24, 0x00	; 0
    2ec0:	0e 94 cc 17 	call	0x2f98	; 0x2f98 <UART_sendByte>
	UART_sendString(pass);	/* Send the required string to MC2 through UART */
    2ec4:	ce 01       	movw	r24, r28
    2ec6:	03 96       	adiw	r24, 0x03	; 3
    2ec8:	0e 94 f2 17 	call	0x2fe4	; 0x2fe4 <UART_sendString>
    while(1)
    {
    	menu(pass,&Pass_Limit);		/* menu function*/
    2ecc:	ce 01       	movw	r24, r28
    2ece:	03 96       	adiw	r24, 0x03	; 3
    2ed0:	9e 01       	movw	r18, r28
    2ed2:	2e 5f       	subi	r18, 0xFE	; 254
    2ed4:	3f 4f       	sbci	r19, 0xFF	; 255
    2ed6:	b9 01       	movw	r22, r18
    2ed8:	0e 94 dd 06 	call	0xdba	; 0xdba <menu>
    	if(Pass_Limit==3){			/* condition will be active if user entered wrong pass 3 times*/
    2edc:	8a 81       	ldd	r24, Y+2	; 0x02
    2ede:	83 30       	cpi	r24, 0x03	; 3
    2ee0:	a9 f7       	brne	.-22     	; 0x2ecc <main+0x58>
    		LCD_clearScreen();
    2ee2:	0e 94 30 17 	call	0x2e60	; 0x2e60 <LCD_clearScreen>
    		LCD_displayString("ALERT!!!!");
    2ee6:	8e ef       	ldi	r24, 0xFE	; 254
    2ee8:	90 e0       	ldi	r25, 0x00	; 0
    2eea:	0e 94 89 16 	call	0x2d12	; 0x2d12 <LCD_displayString>
    		UART_sendByte(ACTIVATE_BUZZER);		/*send command activate buzzer to the second micro controller*/
    2eee:	83 e0       	ldi	r24, 0x03	; 3
    2ef0:	0e 94 cc 17 	call	0x2f98	; 0x2f98 <UART_sendByte>

    		delay_Timer0(250,60);	/*delay function by timer0*/
    2ef4:	8a ef       	ldi	r24, 0xFA	; 250
    2ef6:	6c e3       	ldi	r22, 0x3C	; 60
    2ef8:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <delay_Timer0>
    		Pass_Limit=0;			/*clearing counter */
    2efc:	1a 82       	std	Y+2, r1	; 0x02
    2efe:	e6 cf       	rjmp	.-52     	; 0x2ecc <main+0x58>

00002f00 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(uint32 baud_rate)
{
    2f00:	df 93       	push	r29
    2f02:	cf 93       	push	r28
    2f04:	00 d0       	rcall	.+0      	; 0x2f06 <UART_init+0x6>
    2f06:	00 d0       	rcall	.+0      	; 0x2f08 <UART_init+0x8>
    2f08:	00 d0       	rcall	.+0      	; 0x2f0a <UART_init+0xa>
    2f0a:	cd b7       	in	r28, 0x3d	; 61
    2f0c:	de b7       	in	r29, 0x3e	; 62
    2f0e:	6b 83       	std	Y+3, r22	; 0x03
    2f10:	7c 83       	std	Y+4, r23	; 0x04
    2f12:	8d 83       	std	Y+5, r24	; 0x05
    2f14:	9e 83       	std	Y+6, r25	; 0x06
	uint16 ubrr_value = 0;
    2f16:	1a 82       	std	Y+2, r1	; 0x02
    2f18:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    2f1a:	eb e2       	ldi	r30, 0x2B	; 43
    2f1c:	f0 e0       	ldi	r31, 0x00	; 0
    2f1e:	82 e0       	ldi	r24, 0x02	; 2
    2f20:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    2f22:	ea e2       	ldi	r30, 0x2A	; 42
    2f24:	f0 e0       	ldi	r31, 0x00	; 0
    2f26:	88 e1       	ldi	r24, 0x18	; 24
    2f28:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1); 
    2f2a:	e0 e4       	ldi	r30, 0x40	; 64
    2f2c:	f0 e0       	ldi	r31, 0x00	; 0
    2f2e:	86 e8       	ldi	r24, 0x86	; 134
    2f30:	80 83       	st	Z, r24
	
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (baud_rate * 8UL))) - 1);
    2f32:	8b 81       	ldd	r24, Y+3	; 0x03
    2f34:	9c 81       	ldd	r25, Y+4	; 0x04
    2f36:	ad 81       	ldd	r26, Y+5	; 0x05
    2f38:	be 81       	ldd	r27, Y+6	; 0x06
    2f3a:	88 0f       	add	r24, r24
    2f3c:	99 1f       	adc	r25, r25
    2f3e:	aa 1f       	adc	r26, r26
    2f40:	bb 1f       	adc	r27, r27
    2f42:	88 0f       	add	r24, r24
    2f44:	99 1f       	adc	r25, r25
    2f46:	aa 1f       	adc	r26, r26
    2f48:	bb 1f       	adc	r27, r27
    2f4a:	88 0f       	add	r24, r24
    2f4c:	99 1f       	adc	r25, r25
    2f4e:	aa 1f       	adc	r26, r26
    2f50:	bb 1f       	adc	r27, r27
    2f52:	9c 01       	movw	r18, r24
    2f54:	ad 01       	movw	r20, r26
    2f56:	80 e0       	ldi	r24, 0x00	; 0
    2f58:	92 e1       	ldi	r25, 0x12	; 18
    2f5a:	aa e7       	ldi	r26, 0x7A	; 122
    2f5c:	b0 e0       	ldi	r27, 0x00	; 0
    2f5e:	bc 01       	movw	r22, r24
    2f60:	cd 01       	movw	r24, r26
    2f62:	0e 94 5e 18 	call	0x30bc	; 0x30bc <__udivmodsi4>
    2f66:	da 01       	movw	r26, r20
    2f68:	c9 01       	movw	r24, r18
    2f6a:	01 97       	sbiw	r24, 0x01	; 1
    2f6c:	9a 83       	std	Y+2, r25	; 0x02
    2f6e:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    2f70:	e0 e4       	ldi	r30, 0x40	; 64
    2f72:	f0 e0       	ldi	r31, 0x00	; 0
    2f74:	89 81       	ldd	r24, Y+1	; 0x01
    2f76:	9a 81       	ldd	r25, Y+2	; 0x02
    2f78:	89 2f       	mov	r24, r25
    2f7a:	99 27       	eor	r25, r25
    2f7c:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    2f7e:	e9 e2       	ldi	r30, 0x29	; 41
    2f80:	f0 e0       	ldi	r31, 0x00	; 0
    2f82:	89 81       	ldd	r24, Y+1	; 0x01
    2f84:	80 83       	st	Z, r24
}
    2f86:	26 96       	adiw	r28, 0x06	; 6
    2f88:	0f b6       	in	r0, 0x3f	; 63
    2f8a:	f8 94       	cli
    2f8c:	de bf       	out	0x3e, r29	; 62
    2f8e:	0f be       	out	0x3f, r0	; 63
    2f90:	cd bf       	out	0x3d, r28	; 61
    2f92:	cf 91       	pop	r28
    2f94:	df 91       	pop	r29
    2f96:	08 95       	ret

00002f98 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    2f98:	df 93       	push	r29
    2f9a:	cf 93       	push	r28
    2f9c:	0f 92       	push	r0
    2f9e:	cd b7       	in	r28, 0x3d	; 61
    2fa0:	de b7       	in	r29, 0x3e	; 62
    2fa2:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    2fa4:	eb e2       	ldi	r30, 0x2B	; 43
    2fa6:	f0 e0       	ldi	r31, 0x00	; 0
    2fa8:	80 81       	ld	r24, Z
    2faa:	88 2f       	mov	r24, r24
    2fac:	90 e0       	ldi	r25, 0x00	; 0
    2fae:	80 72       	andi	r24, 0x20	; 32
    2fb0:	90 70       	andi	r25, 0x00	; 0
    2fb2:	00 97       	sbiw	r24, 0x00	; 0
    2fb4:	b9 f3       	breq	.-18     	; 0x2fa4 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    2fb6:	ec e2       	ldi	r30, 0x2C	; 44
    2fb8:	f0 e0       	ldi	r31, 0x00	; 0
    2fba:	89 81       	ldd	r24, Y+1	; 0x01
    2fbc:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    2fbe:	0f 90       	pop	r0
    2fc0:	cf 91       	pop	r28
    2fc2:	df 91       	pop	r29
    2fc4:	08 95       	ret

00002fc6 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    2fc6:	df 93       	push	r29
    2fc8:	cf 93       	push	r28
    2fca:	cd b7       	in	r28, 0x3d	; 61
    2fcc:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2fce:	eb e2       	ldi	r30, 0x2B	; 43
    2fd0:	f0 e0       	ldi	r31, 0x00	; 0
    2fd2:	80 81       	ld	r24, Z
    2fd4:	88 23       	and	r24, r24
    2fd6:	dc f7       	brge	.-10     	; 0x2fce <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    2fd8:	ec e2       	ldi	r30, 0x2C	; 44
    2fda:	f0 e0       	ldi	r31, 0x00	; 0
    2fdc:	80 81       	ld	r24, Z
}
    2fde:	cf 91       	pop	r28
    2fe0:	df 91       	pop	r29
    2fe2:	08 95       	ret

00002fe4 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    2fe4:	df 93       	push	r29
    2fe6:	cf 93       	push	r28
    2fe8:	00 d0       	rcall	.+0      	; 0x2fea <UART_sendString+0x6>
    2fea:	0f 92       	push	r0
    2fec:	cd b7       	in	r28, 0x3d	; 61
    2fee:	de b7       	in	r29, 0x3e	; 62
    2ff0:	9b 83       	std	Y+3, r25	; 0x03
    2ff2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2ff4:	19 82       	std	Y+1, r1	; 0x01
    2ff6:	0e c0       	rjmp	.+28     	; 0x3014 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2ff8:	89 81       	ldd	r24, Y+1	; 0x01
    2ffa:	28 2f       	mov	r18, r24
    2ffc:	30 e0       	ldi	r19, 0x00	; 0
    2ffe:	8a 81       	ldd	r24, Y+2	; 0x02
    3000:	9b 81       	ldd	r25, Y+3	; 0x03
    3002:	fc 01       	movw	r30, r24
    3004:	e2 0f       	add	r30, r18
    3006:	f3 1f       	adc	r31, r19
    3008:	80 81       	ld	r24, Z
    300a:	0e 94 cc 17 	call	0x2f98	; 0x2f98 <UART_sendByte>
		i++;
    300e:	89 81       	ldd	r24, Y+1	; 0x01
    3010:	8f 5f       	subi	r24, 0xFF	; 255
    3012:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    3014:	89 81       	ldd	r24, Y+1	; 0x01
    3016:	28 2f       	mov	r18, r24
    3018:	30 e0       	ldi	r19, 0x00	; 0
    301a:	8a 81       	ldd	r24, Y+2	; 0x02
    301c:	9b 81       	ldd	r25, Y+3	; 0x03
    301e:	fc 01       	movw	r30, r24
    3020:	e2 0f       	add	r30, r18
    3022:	f3 1f       	adc	r31, r19
    3024:	80 81       	ld	r24, Z
    3026:	88 23       	and	r24, r24
    3028:	39 f7       	brne	.-50     	; 0x2ff8 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    302a:	0f 90       	pop	r0
    302c:	0f 90       	pop	r0
    302e:	0f 90       	pop	r0
    3030:	cf 91       	pop	r28
    3032:	df 91       	pop	r29
    3034:	08 95       	ret

00003036 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    3036:	0f 93       	push	r16
    3038:	1f 93       	push	r17
    303a:	df 93       	push	r29
    303c:	cf 93       	push	r28
    303e:	00 d0       	rcall	.+0      	; 0x3040 <UART_receiveString+0xa>
    3040:	0f 92       	push	r0
    3042:	cd b7       	in	r28, 0x3d	; 61
    3044:	de b7       	in	r29, 0x3e	; 62
    3046:	9b 83       	std	Y+3, r25	; 0x03
    3048:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    304a:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    304c:	89 81       	ldd	r24, Y+1	; 0x01
    304e:	28 2f       	mov	r18, r24
    3050:	30 e0       	ldi	r19, 0x00	; 0
    3052:	8a 81       	ldd	r24, Y+2	; 0x02
    3054:	9b 81       	ldd	r25, Y+3	; 0x03
    3056:	8c 01       	movw	r16, r24
    3058:	02 0f       	add	r16, r18
    305a:	13 1f       	adc	r17, r19
    305c:	0e 94 e3 17 	call	0x2fc6	; 0x2fc6 <UART_recieveByte>
    3060:	f8 01       	movw	r30, r16
    3062:	80 83       	st	Z, r24
    3064:	0f c0       	rjmp	.+30     	; 0x3084 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    3066:	89 81       	ldd	r24, Y+1	; 0x01
    3068:	8f 5f       	subi	r24, 0xFF	; 255
    306a:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    306c:	89 81       	ldd	r24, Y+1	; 0x01
    306e:	28 2f       	mov	r18, r24
    3070:	30 e0       	ldi	r19, 0x00	; 0
    3072:	8a 81       	ldd	r24, Y+2	; 0x02
    3074:	9b 81       	ldd	r25, Y+3	; 0x03
    3076:	8c 01       	movw	r16, r24
    3078:	02 0f       	add	r16, r18
    307a:	13 1f       	adc	r17, r19
    307c:	0e 94 e3 17 	call	0x2fc6	; 0x2fc6 <UART_recieveByte>
    3080:	f8 01       	movw	r30, r16
    3082:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    3084:	89 81       	ldd	r24, Y+1	; 0x01
    3086:	28 2f       	mov	r18, r24
    3088:	30 e0       	ldi	r19, 0x00	; 0
    308a:	8a 81       	ldd	r24, Y+2	; 0x02
    308c:	9b 81       	ldd	r25, Y+3	; 0x03
    308e:	fc 01       	movw	r30, r24
    3090:	e2 0f       	add	r30, r18
    3092:	f3 1f       	adc	r31, r19
    3094:	80 81       	ld	r24, Z
    3096:	83 32       	cpi	r24, 0x23	; 35
    3098:	31 f7       	brne	.-52     	; 0x3066 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    309a:	89 81       	ldd	r24, Y+1	; 0x01
    309c:	28 2f       	mov	r18, r24
    309e:	30 e0       	ldi	r19, 0x00	; 0
    30a0:	8a 81       	ldd	r24, Y+2	; 0x02
    30a2:	9b 81       	ldd	r25, Y+3	; 0x03
    30a4:	fc 01       	movw	r30, r24
    30a6:	e2 0f       	add	r30, r18
    30a8:	f3 1f       	adc	r31, r19
    30aa:	10 82       	st	Z, r1
}
    30ac:	0f 90       	pop	r0
    30ae:	0f 90       	pop	r0
    30b0:	0f 90       	pop	r0
    30b2:	cf 91       	pop	r28
    30b4:	df 91       	pop	r29
    30b6:	1f 91       	pop	r17
    30b8:	0f 91       	pop	r16
    30ba:	08 95       	ret

000030bc <__udivmodsi4>:
    30bc:	a1 e2       	ldi	r26, 0x21	; 33
    30be:	1a 2e       	mov	r1, r26
    30c0:	aa 1b       	sub	r26, r26
    30c2:	bb 1b       	sub	r27, r27
    30c4:	fd 01       	movw	r30, r26
    30c6:	0d c0       	rjmp	.+26     	; 0x30e2 <__udivmodsi4_ep>

000030c8 <__udivmodsi4_loop>:
    30c8:	aa 1f       	adc	r26, r26
    30ca:	bb 1f       	adc	r27, r27
    30cc:	ee 1f       	adc	r30, r30
    30ce:	ff 1f       	adc	r31, r31
    30d0:	a2 17       	cp	r26, r18
    30d2:	b3 07       	cpc	r27, r19
    30d4:	e4 07       	cpc	r30, r20
    30d6:	f5 07       	cpc	r31, r21
    30d8:	20 f0       	brcs	.+8      	; 0x30e2 <__udivmodsi4_ep>
    30da:	a2 1b       	sub	r26, r18
    30dc:	b3 0b       	sbc	r27, r19
    30de:	e4 0b       	sbc	r30, r20
    30e0:	f5 0b       	sbc	r31, r21

000030e2 <__udivmodsi4_ep>:
    30e2:	66 1f       	adc	r22, r22
    30e4:	77 1f       	adc	r23, r23
    30e6:	88 1f       	adc	r24, r24
    30e8:	99 1f       	adc	r25, r25
    30ea:	1a 94       	dec	r1
    30ec:	69 f7       	brne	.-38     	; 0x30c8 <__udivmodsi4_loop>
    30ee:	60 95       	com	r22
    30f0:	70 95       	com	r23
    30f2:	80 95       	com	r24
    30f4:	90 95       	com	r25
    30f6:	9b 01       	movw	r18, r22
    30f8:	ac 01       	movw	r20, r24
    30fa:	bd 01       	movw	r22, r26
    30fc:	cf 01       	movw	r24, r30
    30fe:	08 95       	ret

00003100 <__prologue_saves__>:
    3100:	2f 92       	push	r2
    3102:	3f 92       	push	r3
    3104:	4f 92       	push	r4
    3106:	5f 92       	push	r5
    3108:	6f 92       	push	r6
    310a:	7f 92       	push	r7
    310c:	8f 92       	push	r8
    310e:	9f 92       	push	r9
    3110:	af 92       	push	r10
    3112:	bf 92       	push	r11
    3114:	cf 92       	push	r12
    3116:	df 92       	push	r13
    3118:	ef 92       	push	r14
    311a:	ff 92       	push	r15
    311c:	0f 93       	push	r16
    311e:	1f 93       	push	r17
    3120:	cf 93       	push	r28
    3122:	df 93       	push	r29
    3124:	cd b7       	in	r28, 0x3d	; 61
    3126:	de b7       	in	r29, 0x3e	; 62
    3128:	ca 1b       	sub	r28, r26
    312a:	db 0b       	sbc	r29, r27
    312c:	0f b6       	in	r0, 0x3f	; 63
    312e:	f8 94       	cli
    3130:	de bf       	out	0x3e, r29	; 62
    3132:	0f be       	out	0x3f, r0	; 63
    3134:	cd bf       	out	0x3d, r28	; 61
    3136:	09 94       	ijmp

00003138 <__epilogue_restores__>:
    3138:	2a 88       	ldd	r2, Y+18	; 0x12
    313a:	39 88       	ldd	r3, Y+17	; 0x11
    313c:	48 88       	ldd	r4, Y+16	; 0x10
    313e:	5f 84       	ldd	r5, Y+15	; 0x0f
    3140:	6e 84       	ldd	r6, Y+14	; 0x0e
    3142:	7d 84       	ldd	r7, Y+13	; 0x0d
    3144:	8c 84       	ldd	r8, Y+12	; 0x0c
    3146:	9b 84       	ldd	r9, Y+11	; 0x0b
    3148:	aa 84       	ldd	r10, Y+10	; 0x0a
    314a:	b9 84       	ldd	r11, Y+9	; 0x09
    314c:	c8 84       	ldd	r12, Y+8	; 0x08
    314e:	df 80       	ldd	r13, Y+7	; 0x07
    3150:	ee 80       	ldd	r14, Y+6	; 0x06
    3152:	fd 80       	ldd	r15, Y+5	; 0x05
    3154:	0c 81       	ldd	r16, Y+4	; 0x04
    3156:	1b 81       	ldd	r17, Y+3	; 0x03
    3158:	aa 81       	ldd	r26, Y+2	; 0x02
    315a:	b9 81       	ldd	r27, Y+1	; 0x01
    315c:	ce 0f       	add	r28, r30
    315e:	d1 1d       	adc	r29, r1
    3160:	0f b6       	in	r0, 0x3f	; 63
    3162:	f8 94       	cli
    3164:	de bf       	out	0x3e, r29	; 62
    3166:	0f be       	out	0x3f, r0	; 63
    3168:	cd bf       	out	0x3d, r28	; 61
    316a:	ed 01       	movw	r28, r26
    316c:	08 95       	ret

0000316e <strcmp>:
    316e:	fb 01       	movw	r30, r22
    3170:	dc 01       	movw	r26, r24
    3172:	8d 91       	ld	r24, X+
    3174:	01 90       	ld	r0, Z+
    3176:	80 19       	sub	r24, r0
    3178:	01 10       	cpse	r0, r1
    317a:	d9 f3       	breq	.-10     	; 0x3172 <strcmp+0x4>
    317c:	99 0b       	sbc	r25, r25
    317e:	08 95       	ret

00003180 <itoa>:
    3180:	fb 01       	movw	r30, r22
    3182:	9f 01       	movw	r18, r30
    3184:	e8 94       	clt
    3186:	42 30       	cpi	r20, 0x02	; 2
    3188:	c4 f0       	brlt	.+48     	; 0x31ba <itoa+0x3a>
    318a:	45 32       	cpi	r20, 0x25	; 37
    318c:	b4 f4       	brge	.+44     	; 0x31ba <itoa+0x3a>
    318e:	4a 30       	cpi	r20, 0x0A	; 10
    3190:	29 f4       	brne	.+10     	; 0x319c <itoa+0x1c>
    3192:	97 fb       	bst	r25, 7
    3194:	1e f4       	brtc	.+6      	; 0x319c <itoa+0x1c>
    3196:	90 95       	com	r25
    3198:	81 95       	neg	r24
    319a:	9f 4f       	sbci	r25, 0xFF	; 255
    319c:	64 2f       	mov	r22, r20
    319e:	77 27       	eor	r23, r23
    31a0:	0e 94 f1 18 	call	0x31e2	; 0x31e2 <__udivmodhi4>
    31a4:	80 5d       	subi	r24, 0xD0	; 208
    31a6:	8a 33       	cpi	r24, 0x3A	; 58
    31a8:	0c f0       	brlt	.+2      	; 0x31ac <itoa+0x2c>
    31aa:	89 5d       	subi	r24, 0xD9	; 217
    31ac:	81 93       	st	Z+, r24
    31ae:	cb 01       	movw	r24, r22
    31b0:	00 97       	sbiw	r24, 0x00	; 0
    31b2:	a1 f7       	brne	.-24     	; 0x319c <itoa+0x1c>
    31b4:	16 f4       	brtc	.+4      	; 0x31ba <itoa+0x3a>
    31b6:	5d e2       	ldi	r21, 0x2D	; 45
    31b8:	51 93       	st	Z+, r21
    31ba:	10 82       	st	Z, r1
    31bc:	c9 01       	movw	r24, r18
    31be:	0c 94 e1 18 	jmp	0x31c2	; 0x31c2 <strrev>

000031c2 <strrev>:
    31c2:	dc 01       	movw	r26, r24
    31c4:	fc 01       	movw	r30, r24
    31c6:	67 2f       	mov	r22, r23
    31c8:	71 91       	ld	r23, Z+
    31ca:	77 23       	and	r23, r23
    31cc:	e1 f7       	brne	.-8      	; 0x31c6 <strrev+0x4>
    31ce:	32 97       	sbiw	r30, 0x02	; 2
    31d0:	04 c0       	rjmp	.+8      	; 0x31da <strrev+0x18>
    31d2:	7c 91       	ld	r23, X
    31d4:	6d 93       	st	X+, r22
    31d6:	70 83       	st	Z, r23
    31d8:	62 91       	ld	r22, -Z
    31da:	ae 17       	cp	r26, r30
    31dc:	bf 07       	cpc	r27, r31
    31de:	c8 f3       	brcs	.-14     	; 0x31d2 <strrev+0x10>
    31e0:	08 95       	ret

000031e2 <__udivmodhi4>:
    31e2:	aa 1b       	sub	r26, r26
    31e4:	bb 1b       	sub	r27, r27
    31e6:	51 e1       	ldi	r21, 0x11	; 17
    31e8:	07 c0       	rjmp	.+14     	; 0x31f8 <__udivmodhi4_ep>

000031ea <__udivmodhi4_loop>:
    31ea:	aa 1f       	adc	r26, r26
    31ec:	bb 1f       	adc	r27, r27
    31ee:	a6 17       	cp	r26, r22
    31f0:	b7 07       	cpc	r27, r23
    31f2:	10 f0       	brcs	.+4      	; 0x31f8 <__udivmodhi4_ep>
    31f4:	a6 1b       	sub	r26, r22
    31f6:	b7 0b       	sbc	r27, r23

000031f8 <__udivmodhi4_ep>:
    31f8:	88 1f       	adc	r24, r24
    31fa:	99 1f       	adc	r25, r25
    31fc:	5a 95       	dec	r21
    31fe:	a9 f7       	brne	.-22     	; 0x31ea <__udivmodhi4_loop>
    3200:	80 95       	com	r24
    3202:	90 95       	com	r25
    3204:	bc 01       	movw	r22, r24
    3206:	cd 01       	movw	r24, r26
    3208:	08 95       	ret

0000320a <_exit>:
    320a:	f8 94       	cli

0000320c <__stop_program>:
    320c:	ff cf       	rjmp	.-2      	; 0x320c <__stop_program>
