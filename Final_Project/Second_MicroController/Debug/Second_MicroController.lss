
Second_MicroController.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002c1c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00800060  00002c1c  00002cb0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  0080007a  0080007a  00002cca  2**0
                  ALLOC
  3 .stab         0000303c  00000000  00000000  00002ccc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000012b2  00000000  00000000  00005d08  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006fba  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000070fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000726a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008eb3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009d9e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000ab4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000acac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000af39  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b707  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 52 07 	jmp	0xea4	; 0xea4 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 85 07 	jmp	0xf0a	; 0xf0a <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e1       	ldi	r30, 0x1C	; 28
      68:	fc e2       	ldi	r31, 0x2C	; 44
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 37       	cpi	r26, 0x7A	; 122
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	aa e7       	ldi	r26, 0x7A	; 122
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 38       	cpi	r26, 0x82	; 130
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 89 11 	call	0x2312	; 0x2312 <main>
      8a:	0c 94 0c 16 	jmp	0x2c18	; 0x2c18 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 87 15 	jmp	0x2b0e	; 0x2b0e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a2 e7       	ldi	r26, 0x72	; 114
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 a3 15 	jmp	0x2b46	; 0x2b46 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 93 15 	jmp	0x2b26	; 0x2b26 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 af 15 	jmp	0x2b5e	; 0x2b5e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 93 15 	jmp	0x2b26	; 0x2b26 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 af 15 	jmp	0x2b5e	; 0x2b5e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 87 15 	jmp	0x2b0e	; 0x2b0e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	82 e7       	ldi	r24, 0x72	; 114
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 a3 15 	jmp	0x2b46	; 0x2b46 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 93 15 	jmp	0x2b26	; 0x2b26 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 af 15 	jmp	0x2b5e	; 0x2b5e <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 93 15 	jmp	0x2b26	; 0x2b26 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 af 15 	jmp	0x2b5e	; 0x2b5e <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 93 15 	jmp	0x2b26	; 0x2b26 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 af 15 	jmp	0x2b5e	; 0x2b5e <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 97 15 	jmp	0x2b2e	; 0x2b2e <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 b3 15 	jmp	0x2b66	; 0x2b66 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <Buzzer_init>:
 */

#include "Buzzer.h"


void Buzzer_init(void){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(BUZZER_PORT_ID , BUZZER_PIN_ID , PIN_OUTPUT);
     b4e:	83 e0       	ldi	r24, 0x03	; 3
     b50:	67 e0       	ldi	r22, 0x07	; 7
     b52:	41 e0       	ldi	r20, 0x01	; 1
     b54:	0e 94 8f 09 	call	0x131e	; 0x131e <GPIO_setupPinDirection>
}
     b58:	cf 91       	pop	r28
     b5a:	df 91       	pop	r29
     b5c:	08 95       	ret

00000b5e <Buzzer_Start>:

void Buzzer_Start(void){
     b5e:	df 93       	push	r29
     b60:	cf 93       	push	r28
     b62:	cd b7       	in	r28, 0x3d	; 61
     b64:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID ,  BUZZER_PIN_ID, LOGIC_HIGH );
     b66:	83 e0       	ldi	r24, 0x03	; 3
     b68:	67 e0       	ldi	r22, 0x07	; 7
     b6a:	41 e0       	ldi	r20, 0x01	; 1
     b6c:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <GPIO_writePin>
}
     b70:	cf 91       	pop	r28
     b72:	df 91       	pop	r29
     b74:	08 95       	ret

00000b76 <Buzzer_stop>:
void Buzzer_stop(void){
     b76:	df 93       	push	r29
     b78:	cf 93       	push	r28
     b7a:	cd b7       	in	r28, 0x3d	; 61
     b7c:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID ,  BUZZER_PIN_ID, LOGIC_LOW );
     b7e:	83 e0       	ldi	r24, 0x03	; 3
     b80:	67 e0       	ldi	r22, 0x07	; 7
     b82:	40 e0       	ldi	r20, 0x00	; 0
     b84:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <GPIO_writePin>
}
     b88:	cf 91       	pop	r28
     b8a:	df 91       	pop	r29
     b8c:	08 95       	ret

00000b8e <DcMotor_Init>:
 */
#include "common_macros.h"
#include "gpio.h"
#include "Motor_driver.h"

void DcMotor_Init(void){
     b8e:	df 93       	push	r29
     b90:	cf 93       	push	r28
     b92:	cd b7       	in	r28, 0x3d	; 61
     b94:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(PORTD_ID, PIN2_ID, PIN_OUTPUT);
     b96:	83 e0       	ldi	r24, 0x03	; 3
     b98:	62 e0       	ldi	r22, 0x02	; 2
     b9a:	41 e0       	ldi	r20, 0x01	; 1
     b9c:	0e 94 8f 09 	call	0x131e	; 0x131e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTD_ID, PIN3_ID, PIN_OUTPUT);
     ba0:	83 e0       	ldi	r24, 0x03	; 3
     ba2:	63 e0       	ldi	r22, 0x03	; 3
     ba4:	41 e0       	ldi	r20, 0x01	; 1
     ba6:	0e 94 8f 09 	call	0x131e	; 0x131e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTD_ID, PIN4_ID, PIN_OUTPUT);
     baa:	83 e0       	ldi	r24, 0x03	; 3
     bac:	64 e0       	ldi	r22, 0x04	; 4
     bae:	41 e0       	ldi	r20, 0x01	; 1
     bb0:	0e 94 8f 09 	call	0x131e	; 0x131e <GPIO_setupPinDirection>
	GPIO_writePin(PORTD_ID, PIN2_ID, LOGIC_LOW);
     bb4:	83 e0       	ldi	r24, 0x03	; 3
     bb6:	62 e0       	ldi	r22, 0x02	; 2
     bb8:	40 e0       	ldi	r20, 0x00	; 0
     bba:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <GPIO_writePin>
	GPIO_writePin(PORTD_ID, PIN3_ID, LOGIC_LOW);
     bbe:	83 e0       	ldi	r24, 0x03	; 3
     bc0:	63 e0       	ldi	r22, 0x03	; 3
     bc2:	40 e0       	ldi	r20, 0x00	; 0
     bc4:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <GPIO_writePin>
	GPIO_writePin(PORTD_ID, PIN4_ID, LOGIC_LOW);
     bc8:	83 e0       	ldi	r24, 0x03	; 3
     bca:	64 e0       	ldi	r22, 0x04	; 4
     bcc:	40 e0       	ldi	r20, 0x00	; 0
     bce:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <GPIO_writePin>
}
     bd2:	cf 91       	pop	r28
     bd4:	df 91       	pop	r29
     bd6:	08 95       	ret

00000bd8 <DcMotor_Rotate>:

void DcMotor_Rotate(DcMotor_State state){
     bd8:	df 93       	push	r29
     bda:	cf 93       	push	r28
     bdc:	00 d0       	rcall	.+0      	; 0xbde <DcMotor_Rotate+0x6>
     bde:	0f 92       	push	r0
     be0:	cd b7       	in	r28, 0x3d	; 61
     be2:	de b7       	in	r29, 0x3e	; 62
     be4:	89 83       	std	Y+1, r24	; 0x01
	switch(state){
     be6:	89 81       	ldd	r24, Y+1	; 0x01
     be8:	28 2f       	mov	r18, r24
     bea:	30 e0       	ldi	r19, 0x00	; 0
     bec:	3b 83       	std	Y+3, r19	; 0x03
     bee:	2a 83       	std	Y+2, r18	; 0x02
     bf0:	8a 81       	ldd	r24, Y+2	; 0x02
     bf2:	9b 81       	ldd	r25, Y+3	; 0x03
     bf4:	81 30       	cpi	r24, 0x01	; 1
     bf6:	91 05       	cpc	r25, r1
     bf8:	c9 f0       	breq	.+50     	; 0xc2c <DcMotor_Rotate+0x54>
     bfa:	2a 81       	ldd	r18, Y+2	; 0x02
     bfc:	3b 81       	ldd	r19, Y+3	; 0x03
     bfe:	22 30       	cpi	r18, 0x02	; 2
     c00:	31 05       	cpc	r19, r1
     c02:	21 f1       	breq	.+72     	; 0xc4c <DcMotor_Rotate+0x74>
     c04:	8a 81       	ldd	r24, Y+2	; 0x02
     c06:	9b 81       	ldd	r25, Y+3	; 0x03
     c08:	00 97       	sbiw	r24, 0x00	; 0
     c0a:	79 f5       	brne	.+94     	; 0xc6a <DcMotor_Rotate+0x92>
	case CW:
		GPIO_writePin(PORTD_ID, PIN2_ID, LOGIC_HIGH);
     c0c:	83 e0       	ldi	r24, 0x03	; 3
     c0e:	62 e0       	ldi	r22, 0x02	; 2
     c10:	41 e0       	ldi	r20, 0x01	; 1
     c12:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <GPIO_writePin>
		GPIO_writePin(PORTD_ID, PIN3_ID, LOGIC_LOW);
     c16:	83 e0       	ldi	r24, 0x03	; 3
     c18:	63 e0       	ldi	r22, 0x03	; 3
     c1a:	40 e0       	ldi	r20, 0x00	; 0
     c1c:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <GPIO_writePin>
		GPIO_writePin(PORTD_ID, PIN4_ID, LOGIC_HIGH);
     c20:	83 e0       	ldi	r24, 0x03	; 3
     c22:	64 e0       	ldi	r22, 0x04	; 4
     c24:	41 e0       	ldi	r20, 0x01	; 1
     c26:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <GPIO_writePin>
     c2a:	1f c0       	rjmp	.+62     	; 0xc6a <DcMotor_Rotate+0x92>
		break;
	case CCW:
		GPIO_writePin(PORTD_ID, PIN2_ID, LOGIC_LOW);
     c2c:	83 e0       	ldi	r24, 0x03	; 3
     c2e:	62 e0       	ldi	r22, 0x02	; 2
     c30:	40 e0       	ldi	r20, 0x00	; 0
     c32:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <GPIO_writePin>
		GPIO_writePin(PORTD_ID, PIN3_ID, LOGIC_HIGH);
     c36:	83 e0       	ldi	r24, 0x03	; 3
     c38:	63 e0       	ldi	r22, 0x03	; 3
     c3a:	41 e0       	ldi	r20, 0x01	; 1
     c3c:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <GPIO_writePin>
		GPIO_writePin(PORTD_ID, PIN4_ID, LOGIC_HIGH);
     c40:	83 e0       	ldi	r24, 0x03	; 3
     c42:	64 e0       	ldi	r22, 0x04	; 4
     c44:	41 e0       	ldi	r20, 0x01	; 1
     c46:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <GPIO_writePin>
     c4a:	0f c0       	rjmp	.+30     	; 0xc6a <DcMotor_Rotate+0x92>
		break;
	case STOP:
		GPIO_writePin(PORTD_ID, PIN2_ID, LOGIC_LOW);
     c4c:	83 e0       	ldi	r24, 0x03	; 3
     c4e:	62 e0       	ldi	r22, 0x02	; 2
     c50:	40 e0       	ldi	r20, 0x00	; 0
     c52:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <GPIO_writePin>
		GPIO_writePin(PORTD_ID, PIN3_ID, LOGIC_LOW);
     c56:	83 e0       	ldi	r24, 0x03	; 3
     c58:	63 e0       	ldi	r22, 0x03	; 3
     c5a:	40 e0       	ldi	r20, 0x00	; 0
     c5c:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <GPIO_writePin>
		GPIO_writePin(PORTD_ID, PIN4_ID, LOGIC_LOW);
     c60:	83 e0       	ldi	r24, 0x03	; 3
     c62:	64 e0       	ldi	r22, 0x04	; 4
     c64:	40 e0       	ldi	r20, 0x00	; 0
     c66:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <GPIO_writePin>
		break;
	}


}
     c6a:	0f 90       	pop	r0
     c6c:	0f 90       	pop	r0
     c6e:	0f 90       	pop	r0
     c70:	cf 91       	pop	r28
     c72:	df 91       	pop	r29
     c74:	08 95       	ret

00000c76 <save_pass>:

/*# define F_CPU 8000000UL*/
#include "Second_MicroController.h"


void save_pass(uint8 *ptr){
     c76:	df 93       	push	r29
     c78:	cf 93       	push	r28
     c7a:	cd b7       	in	r28, 0x3d	; 61
     c7c:	de b7       	in	r29, 0x3e	; 62
     c7e:	61 97       	sbiw	r28, 0x11	; 17
     c80:	0f b6       	in	r0, 0x3f	; 63
     c82:	f8 94       	cli
     c84:	de bf       	out	0x3e, r29	; 62
     c86:	0f be       	out	0x3f, r0	; 63
     c88:	cd bf       	out	0x3d, r28	; 61
     c8a:	99 8b       	std	Y+17, r25	; 0x11
     c8c:	88 8b       	std	Y+16, r24	; 0x10
	uint8 i=0;
     c8e:	1f 86       	std	Y+15, r1	; 0x0f
     c90:	88 c0       	rjmp	.+272    	; 0xda2 <save_pass+0x12c>
	while(ptr[i]!=NULL_PTR){
	EEPROM_writeByte(0x0311+i, ptr[i]); 			/* Write 0x0F in the external EEPROM */
     c92:	8f 85       	ldd	r24, Y+15	; 0x0f
     c94:	88 2f       	mov	r24, r24
     c96:	90 e0       	ldi	r25, 0x00	; 0
     c98:	8f 5e       	subi	r24, 0xEF	; 239
     c9a:	9c 4f       	sbci	r25, 0xFC	; 252
     c9c:	ac 01       	movw	r20, r24
     c9e:	8f 85       	ldd	r24, Y+15	; 0x0f
     ca0:	28 2f       	mov	r18, r24
     ca2:	30 e0       	ldi	r19, 0x00	; 0
     ca4:	88 89       	ldd	r24, Y+16	; 0x10
     ca6:	99 89       	ldd	r25, Y+17	; 0x11
     ca8:	fc 01       	movw	r30, r24
     caa:	e2 0f       	add	r30, r18
     cac:	f3 1f       	adc	r31, r19
     cae:	20 81       	ld	r18, Z
     cb0:	ca 01       	movw	r24, r20
     cb2:	62 2f       	mov	r22, r18
     cb4:	0e 94 ee 08 	call	0x11dc	; 0x11dc <EEPROM_writeByte>
     cb8:	80 e0       	ldi	r24, 0x00	; 0
     cba:	90 e0       	ldi	r25, 0x00	; 0
     cbc:	a0 e2       	ldi	r26, 0x20	; 32
     cbe:	b2 e4       	ldi	r27, 0x42	; 66
     cc0:	8b 87       	std	Y+11, r24	; 0x0b
     cc2:	9c 87       	std	Y+12, r25	; 0x0c
     cc4:	ad 87       	std	Y+13, r26	; 0x0d
     cc6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cc8:	6b 85       	ldd	r22, Y+11	; 0x0b
     cca:	7c 85       	ldd	r23, Y+12	; 0x0c
     ccc:	8d 85       	ldd	r24, Y+13	; 0x0d
     cce:	9e 85       	ldd	r25, Y+14	; 0x0e
     cd0:	20 e0       	ldi	r18, 0x00	; 0
     cd2:	30 e0       	ldi	r19, 0x00	; 0
     cd4:	4a ef       	ldi	r20, 0xFA	; 250
     cd6:	54 e4       	ldi	r21, 0x44	; 68
     cd8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cdc:	dc 01       	movw	r26, r24
     cde:	cb 01       	movw	r24, r22
     ce0:	8f 83       	std	Y+7, r24	; 0x07
     ce2:	98 87       	std	Y+8, r25	; 0x08
     ce4:	a9 87       	std	Y+9, r26	; 0x09
     ce6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     ce8:	6f 81       	ldd	r22, Y+7	; 0x07
     cea:	78 85       	ldd	r23, Y+8	; 0x08
     cec:	89 85       	ldd	r24, Y+9	; 0x09
     cee:	9a 85       	ldd	r25, Y+10	; 0x0a
     cf0:	20 e0       	ldi	r18, 0x00	; 0
     cf2:	30 e0       	ldi	r19, 0x00	; 0
     cf4:	40 e8       	ldi	r20, 0x80	; 128
     cf6:	5f e3       	ldi	r21, 0x3F	; 63
     cf8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     cfc:	88 23       	and	r24, r24
     cfe:	2c f4       	brge	.+10     	; 0xd0a <save_pass+0x94>
		__ticks = 1;
     d00:	81 e0       	ldi	r24, 0x01	; 1
     d02:	90 e0       	ldi	r25, 0x00	; 0
     d04:	9e 83       	std	Y+6, r25	; 0x06
     d06:	8d 83       	std	Y+5, r24	; 0x05
     d08:	3f c0       	rjmp	.+126    	; 0xd88 <save_pass+0x112>
	else if (__tmp > 65535)
     d0a:	6f 81       	ldd	r22, Y+7	; 0x07
     d0c:	78 85       	ldd	r23, Y+8	; 0x08
     d0e:	89 85       	ldd	r24, Y+9	; 0x09
     d10:	9a 85       	ldd	r25, Y+10	; 0x0a
     d12:	20 e0       	ldi	r18, 0x00	; 0
     d14:	3f ef       	ldi	r19, 0xFF	; 255
     d16:	4f e7       	ldi	r20, 0x7F	; 127
     d18:	57 e4       	ldi	r21, 0x47	; 71
     d1a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d1e:	18 16       	cp	r1, r24
     d20:	4c f5       	brge	.+82     	; 0xd74 <save_pass+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d22:	6b 85       	ldd	r22, Y+11	; 0x0b
     d24:	7c 85       	ldd	r23, Y+12	; 0x0c
     d26:	8d 85       	ldd	r24, Y+13	; 0x0d
     d28:	9e 85       	ldd	r25, Y+14	; 0x0e
     d2a:	20 e0       	ldi	r18, 0x00	; 0
     d2c:	30 e0       	ldi	r19, 0x00	; 0
     d2e:	40 e2       	ldi	r20, 0x20	; 32
     d30:	51 e4       	ldi	r21, 0x41	; 65
     d32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d36:	dc 01       	movw	r26, r24
     d38:	cb 01       	movw	r24, r22
     d3a:	bc 01       	movw	r22, r24
     d3c:	cd 01       	movw	r24, r26
     d3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d42:	dc 01       	movw	r26, r24
     d44:	cb 01       	movw	r24, r22
     d46:	9e 83       	std	Y+6, r25	; 0x06
     d48:	8d 83       	std	Y+5, r24	; 0x05
     d4a:	0f c0       	rjmp	.+30     	; 0xd6a <save_pass+0xf4>
     d4c:	88 ec       	ldi	r24, 0xC8	; 200
     d4e:	90 e0       	ldi	r25, 0x00	; 0
     d50:	9c 83       	std	Y+4, r25	; 0x04
     d52:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d54:	8b 81       	ldd	r24, Y+3	; 0x03
     d56:	9c 81       	ldd	r25, Y+4	; 0x04
     d58:	01 97       	sbiw	r24, 0x01	; 1
     d5a:	f1 f7       	brne	.-4      	; 0xd58 <save_pass+0xe2>
     d5c:	9c 83       	std	Y+4, r25	; 0x04
     d5e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d60:	8d 81       	ldd	r24, Y+5	; 0x05
     d62:	9e 81       	ldd	r25, Y+6	; 0x06
     d64:	01 97       	sbiw	r24, 0x01	; 1
     d66:	9e 83       	std	Y+6, r25	; 0x06
     d68:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d6a:	8d 81       	ldd	r24, Y+5	; 0x05
     d6c:	9e 81       	ldd	r25, Y+6	; 0x06
     d6e:	00 97       	sbiw	r24, 0x00	; 0
     d70:	69 f7       	brne	.-38     	; 0xd4c <save_pass+0xd6>
     d72:	14 c0       	rjmp	.+40     	; 0xd9c <save_pass+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d74:	6f 81       	ldd	r22, Y+7	; 0x07
     d76:	78 85       	ldd	r23, Y+8	; 0x08
     d78:	89 85       	ldd	r24, Y+9	; 0x09
     d7a:	9a 85       	ldd	r25, Y+10	; 0x0a
     d7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d80:	dc 01       	movw	r26, r24
     d82:	cb 01       	movw	r24, r22
     d84:	9e 83       	std	Y+6, r25	; 0x06
     d86:	8d 83       	std	Y+5, r24	; 0x05
     d88:	8d 81       	ldd	r24, Y+5	; 0x05
     d8a:	9e 81       	ldd	r25, Y+6	; 0x06
     d8c:	9a 83       	std	Y+2, r25	; 0x02
     d8e:	89 83       	std	Y+1, r24	; 0x01
     d90:	89 81       	ldd	r24, Y+1	; 0x01
     d92:	9a 81       	ldd	r25, Y+2	; 0x02
     d94:	01 97       	sbiw	r24, 0x01	; 1
     d96:	f1 f7       	brne	.-4      	; 0xd94 <save_pass+0x11e>
     d98:	9a 83       	std	Y+2, r25	; 0x02
     d9a:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(40);
	i++;
     d9c:	8f 85       	ldd	r24, Y+15	; 0x0f
     d9e:	8f 5f       	subi	r24, 0xFF	; 255
     da0:	8f 87       	std	Y+15, r24	; 0x0f
#include "Second_MicroController.h"


void save_pass(uint8 *ptr){
	uint8 i=0;
	while(ptr[i]!=NULL_PTR){
     da2:	8f 85       	ldd	r24, Y+15	; 0x0f
     da4:	28 2f       	mov	r18, r24
     da6:	30 e0       	ldi	r19, 0x00	; 0
     da8:	88 89       	ldd	r24, Y+16	; 0x10
     daa:	99 89       	ldd	r25, Y+17	; 0x11
     dac:	fc 01       	movw	r30, r24
     dae:	e2 0f       	add	r30, r18
     db0:	f3 1f       	adc	r31, r19
     db2:	80 81       	ld	r24, Z
     db4:	88 2f       	mov	r24, r24
     db6:	90 e0       	ldi	r25, 0x00	; 0
     db8:	00 97       	sbiw	r24, 0x00	; 0
     dba:	09 f0       	breq	.+2      	; 0xdbe <save_pass+0x148>
     dbc:	6a cf       	rjmp	.-300    	; 0xc92 <save_pass+0x1c>
	EEPROM_writeByte(0x0311+i, ptr[i]); 			/* Write 0x0F in the external EEPROM */
			_delay_ms(40);
	i++;
	}
	EEPROM_writeByte(0x0311+i, ptr[i]);
     dbe:	8f 85       	ldd	r24, Y+15	; 0x0f
     dc0:	88 2f       	mov	r24, r24
     dc2:	90 e0       	ldi	r25, 0x00	; 0
     dc4:	8f 5e       	subi	r24, 0xEF	; 239
     dc6:	9c 4f       	sbci	r25, 0xFC	; 252
     dc8:	ac 01       	movw	r20, r24
     dca:	8f 85       	ldd	r24, Y+15	; 0x0f
     dcc:	28 2f       	mov	r18, r24
     dce:	30 e0       	ldi	r19, 0x00	; 0
     dd0:	88 89       	ldd	r24, Y+16	; 0x10
     dd2:	99 89       	ldd	r25, Y+17	; 0x11
     dd4:	fc 01       	movw	r30, r24
     dd6:	e2 0f       	add	r30, r18
     dd8:	f3 1f       	adc	r31, r19
     dda:	20 81       	ld	r18, Z
     ddc:	ca 01       	movw	r24, r20
     dde:	62 2f       	mov	r22, r18
     de0:	0e 94 ee 08 	call	0x11dc	; 0x11dc <EEPROM_writeByte>
	/*LCD_displayString("save is done");*/
}
     de4:	61 96       	adiw	r28, 0x11	; 17
     de6:	0f b6       	in	r0, 0x3f	; 63
     de8:	f8 94       	cli
     dea:	de bf       	out	0x3e, r29	; 62
     dec:	0f be       	out	0x3f, r0	; 63
     dee:	cd bf       	out	0x3d, r28	; 61
     df0:	cf 91       	pop	r28
     df2:	df 91       	pop	r29
     df4:	08 95       	ret

00000df6 <compare_pass>:

uint8 compare_pass(uint8 *ptr1,uint8 *ptr2){
     df6:	df 93       	push	r29
     df8:	cf 93       	push	r28
     dfa:	cd b7       	in	r28, 0x3d	; 61
     dfc:	de b7       	in	r29, 0x3e	; 62
     dfe:	27 97       	sbiw	r28, 0x07	; 7
     e00:	0f b6       	in	r0, 0x3f	; 63
     e02:	f8 94       	cli
     e04:	de bf       	out	0x3e, r29	; 62
     e06:	0f be       	out	0x3f, r0	; 63
     e08:	cd bf       	out	0x3d, r28	; 61
     e0a:	9c 83       	std	Y+4, r25	; 0x04
     e0c:	8b 83       	std	Y+3, r24	; 0x03
     e0e:	7e 83       	std	Y+6, r23	; 0x06
     e10:	6d 83       	std	Y+5, r22	; 0x05
	uint8 i=0;
     e12:	1a 82       	std	Y+2, r1	; 0x02
	uint8 x=0;
     e14:	19 82       	std	Y+1, r1	; 0x01
	while(1){
			EEPROM_readByte(0x0311+i,(ptr1+i));		/* Write 0x0F in the external EEPROM */
     e16:	8a 81       	ldd	r24, Y+2	; 0x02
     e18:	88 2f       	mov	r24, r24
     e1a:	90 e0       	ldi	r25, 0x00	; 0
     e1c:	8f 5e       	subi	r24, 0xEF	; 239
     e1e:	9c 4f       	sbci	r25, 0xFC	; 252
     e20:	ac 01       	movw	r20, r24
     e22:	8a 81       	ldd	r24, Y+2	; 0x02
     e24:	28 2f       	mov	r18, r24
     e26:	30 e0       	ldi	r19, 0x00	; 0
     e28:	8b 81       	ldd	r24, Y+3	; 0x03
     e2a:	9c 81       	ldd	r25, Y+4	; 0x04
     e2c:	28 0f       	add	r18, r24
     e2e:	39 1f       	adc	r19, r25
     e30:	ca 01       	movw	r24, r20
     e32:	b9 01       	movw	r22, r18
     e34:	0e 94 2f 09 	call	0x125e	; 0x125e <EEPROM_readByte>
			if(ptr1[i]==NULL_PTR){
     e38:	8a 81       	ldd	r24, Y+2	; 0x02
     e3a:	28 2f       	mov	r18, r24
     e3c:	30 e0       	ldi	r19, 0x00	; 0
     e3e:	8b 81       	ldd	r24, Y+3	; 0x03
     e40:	9c 81       	ldd	r25, Y+4	; 0x04
     e42:	fc 01       	movw	r30, r24
     e44:	e2 0f       	add	r30, r18
     e46:	f3 1f       	adc	r31, r19
     e48:	80 81       	ld	r24, Z
     e4a:	88 2f       	mov	r24, r24
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	00 97       	sbiw	r24, 0x00	; 0
     e50:	21 f0       	breq	.+8      	; 0xe5a <compare_pass+0x64>
				break;
			}
			i++;
     e52:	8a 81       	ldd	r24, Y+2	; 0x02
     e54:	8f 5f       	subi	r24, 0xFF	; 255
     e56:	8a 83       	std	Y+2, r24	; 0x02
     e58:	de cf       	rjmp	.-68     	; 0xe16 <compare_pass+0x20>
	}
	x=strcmp(ptr1,ptr2);
     e5a:	8b 81       	ldd	r24, Y+3	; 0x03
     e5c:	9c 81       	ldd	r25, Y+4	; 0x04
     e5e:	2d 81       	ldd	r18, Y+5	; 0x05
     e60:	3e 81       	ldd	r19, Y+6	; 0x06
     e62:	b9 01       	movw	r22, r18
     e64:	0e 94 be 15 	call	0x2b7c	; 0x2b7c <strcmp>
     e68:	89 83       	std	Y+1, r24	; 0x01
	if (x==0){
     e6a:	89 81       	ldd	r24, Y+1	; 0x01
     e6c:	88 23       	and	r24, r24
     e6e:	41 f4       	brne	.+16     	; 0xe80 <compare_pass+0x8a>
		LCD_clearScreen();
     e70:	0e 94 7f 11 	call	0x22fe	; 0x22fe <LCD_clearScreen>
		LCD_displayString("correct ");
     e74:	80 e6       	ldi	r24, 0x60	; 96
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <LCD_displayString>
		return 0;
     e7c:	1f 82       	std	Y+7, r1	; 0x07
     e7e:	08 c0       	rjmp	.+16     	; 0xe90 <compare_pass+0x9a>
	}
	else{
		LCD_clearScreen();
     e80:	0e 94 7f 11 	call	0x22fe	; 0x22fe <LCD_clearScreen>
		LCD_displayString("invalid ");
     e84:	89 e6       	ldi	r24, 0x69	; 105
     e86:	90 e0       	ldi	r25, 0x00	; 0
     e88:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <LCD_displayString>
		return 1;
     e8c:	81 e0       	ldi	r24, 0x01	; 1
     e8e:	8f 83       	std	Y+7, r24	; 0x07
     e90:	8f 81       	ldd	r24, Y+7	; 0x07
	}

}
     e92:	27 96       	adiw	r28, 0x07	; 7
     e94:	0f b6       	in	r0, 0x3f	; 63
     e96:	f8 94       	cli
     e98:	de bf       	out	0x3e, r29	; 62
     e9a:	0f be       	out	0x3f, r0	; 63
     e9c:	cd bf       	out	0x3d, r28	; 61
     e9e:	cf 91       	pop	r28
     ea0:	df 91       	pop	r29
     ea2:	08 95       	ret

00000ea4 <__vector_9>:

/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/
ISR(TIMER0_OVF_vect)
{
     ea4:	1f 92       	push	r1
     ea6:	0f 92       	push	r0
     ea8:	0f b6       	in	r0, 0x3f	; 63
     eaa:	0f 92       	push	r0
     eac:	11 24       	eor	r1, r1
     eae:	2f 93       	push	r18
     eb0:	3f 93       	push	r19
     eb2:	4f 93       	push	r20
     eb4:	5f 93       	push	r21
     eb6:	6f 93       	push	r22
     eb8:	7f 93       	push	r23
     eba:	8f 93       	push	r24
     ebc:	9f 93       	push	r25
     ebe:	af 93       	push	r26
     ec0:	bf 93       	push	r27
     ec2:	ef 93       	push	r30
     ec4:	ff 93       	push	r31
     ec6:	df 93       	push	r29
     ec8:	cf 93       	push	r28
     eca:	cd b7       	in	r28, 0x3d	; 61
     ecc:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
     ece:	80 91 7a 00 	lds	r24, 0x007A
     ed2:	90 91 7b 00 	lds	r25, 0x007B
     ed6:	00 97       	sbiw	r24, 0x00	; 0
     ed8:	29 f0       	breq	.+10     	; 0xee4 <__vector_9+0x40>
	{
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
     eda:	e0 91 7a 00 	lds	r30, 0x007A
     ede:	f0 91 7b 00 	lds	r31, 0x007B
     ee2:	09 95       	icall
	}
}
     ee4:	cf 91       	pop	r28
     ee6:	df 91       	pop	r29
     ee8:	ff 91       	pop	r31
     eea:	ef 91       	pop	r30
     eec:	bf 91       	pop	r27
     eee:	af 91       	pop	r26
     ef0:	9f 91       	pop	r25
     ef2:	8f 91       	pop	r24
     ef4:	7f 91       	pop	r23
     ef6:	6f 91       	pop	r22
     ef8:	5f 91       	pop	r21
     efa:	4f 91       	pop	r20
     efc:	3f 91       	pop	r19
     efe:	2f 91       	pop	r18
     f00:	0f 90       	pop	r0
     f02:	0f be       	out	0x3f, r0	; 63
     f04:	0f 90       	pop	r0
     f06:	1f 90       	pop	r1
     f08:	18 95       	reti

00000f0a <__vector_19>:

ISR(TIMER0_COMP_vect)
{
     f0a:	1f 92       	push	r1
     f0c:	0f 92       	push	r0
     f0e:	0f b6       	in	r0, 0x3f	; 63
     f10:	0f 92       	push	r0
     f12:	11 24       	eor	r1, r1
     f14:	2f 93       	push	r18
     f16:	3f 93       	push	r19
     f18:	4f 93       	push	r20
     f1a:	5f 93       	push	r21
     f1c:	6f 93       	push	r22
     f1e:	7f 93       	push	r23
     f20:	8f 93       	push	r24
     f22:	9f 93       	push	r25
     f24:	af 93       	push	r26
     f26:	bf 93       	push	r27
     f28:	ef 93       	push	r30
     f2a:	ff 93       	push	r31
     f2c:	df 93       	push	r29
     f2e:	cf 93       	push	r28
     f30:	cd b7       	in	r28, 0x3d	; 61
     f32:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
     f34:	80 91 7a 00 	lds	r24, 0x007A
     f38:	90 91 7b 00 	lds	r25, 0x007B
     f3c:	00 97       	sbiw	r24, 0x00	; 0
     f3e:	29 f0       	breq	.+10     	; 0xf4a <__vector_19+0x40>
	{
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
     f40:	e0 91 7a 00 	lds	r30, 0x007A
     f44:	f0 91 7b 00 	lds	r31, 0x007B
     f48:	09 95       	icall
	}
}
     f4a:	cf 91       	pop	r28
     f4c:	df 91       	pop	r29
     f4e:	ff 91       	pop	r31
     f50:	ef 91       	pop	r30
     f52:	bf 91       	pop	r27
     f54:	af 91       	pop	r26
     f56:	9f 91       	pop	r25
     f58:	8f 91       	pop	r24
     f5a:	7f 91       	pop	r23
     f5c:	6f 91       	pop	r22
     f5e:	5f 91       	pop	r21
     f60:	4f 91       	pop	r20
     f62:	3f 91       	pop	r19
     f64:	2f 91       	pop	r18
     f66:	0f 90       	pop	r0
     f68:	0f be       	out	0x3f, r0	; 63
     f6a:	0f 90       	pop	r0
     f6c:	1f 90       	pop	r1
     f6e:	18 95       	reti

00000f70 <Timer0_init>:


/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void Timer0_init(const Timer0_ConfigType * Config_Ptr){
     f70:	df 93       	push	r29
     f72:	cf 93       	push	r28
     f74:	00 d0       	rcall	.+0      	; 0xf76 <Timer0_init+0x6>
     f76:	cd b7       	in	r28, 0x3d	; 61
     f78:	de b7       	in	r29, 0x3e	; 62
     f7a:	9a 83       	std	Y+2, r25	; 0x02
     f7c:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = 0;
     f7e:	e2 e5       	ldi	r30, 0x52	; 82
     f80:	f0 e0       	ldi	r31, 0x00	; 0
     f82:	10 82       	st	Z, r1
	SREG  |= (1<<7);
     f84:	af e5       	ldi	r26, 0x5F	; 95
     f86:	b0 e0       	ldi	r27, 0x00	; 0
     f88:	ef e5       	ldi	r30, 0x5F	; 95
     f8a:	f0 e0       	ldi	r31, 0x00	; 0
     f8c:	80 81       	ld	r24, Z
     f8e:	80 68       	ori	r24, 0x80	; 128
     f90:	8c 93       	st	X, r24
	SET_BIT(TCCR0,FOC0);			/*Non PWM mode FOC0=1*/
     f92:	a3 e5       	ldi	r26, 0x53	; 83
     f94:	b0 e0       	ldi	r27, 0x00	; 0
     f96:	e3 e5       	ldi	r30, 0x53	; 83
     f98:	f0 e0       	ldi	r31, 0x00	; 0
     f9a:	80 81       	ld	r24, Z
     f9c:	80 68       	ori	r24, 0x80	; 128
     f9e:	8c 93       	st	X, r24
	TCCR0=(TCCR0 & 0xF8) | (Config_Ptr->clock);	/*Configuring F_CPU*/
     fa0:	a3 e5       	ldi	r26, 0x53	; 83
     fa2:	b0 e0       	ldi	r27, 0x00	; 0
     fa4:	e3 e5       	ldi	r30, 0x53	; 83
     fa6:	f0 e0       	ldi	r31, 0x00	; 0
     fa8:	80 81       	ld	r24, Z
     faa:	98 2f       	mov	r25, r24
     fac:	98 7f       	andi	r25, 0xF8	; 248
     fae:	e9 81       	ldd	r30, Y+1	; 0x01
     fb0:	fa 81       	ldd	r31, Y+2	; 0x02
     fb2:	80 81       	ld	r24, Z
     fb4:	89 2b       	or	r24, r25
     fb6:	8c 93       	st	X, r24
	if(Config_Ptr->mode==NORMAL){
     fb8:	e9 81       	ldd	r30, Y+1	; 0x01
     fba:	fa 81       	ldd	r31, Y+2	; 0x02
     fbc:	81 81       	ldd	r24, Z+1	; 0x01
     fbe:	88 23       	and	r24, r24
     fc0:	21 f5       	brne	.+72     	; 0x100a <Timer0_init+0x9a>
		SET_BIT(TIMSK,TOIE0);		/*Enable Timer0 Overflow Interrupt*/
     fc2:	a9 e5       	ldi	r26, 0x59	; 89
     fc4:	b0 e0       	ldi	r27, 0x00	; 0
     fc6:	e9 e5       	ldi	r30, 0x59	; 89
     fc8:	f0 e0       	ldi	r31, 0x00	; 0
     fca:	80 81       	ld	r24, Z
     fcc:	81 60       	ori	r24, 0x01	; 1
     fce:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR0,WGM01);
     fd0:	a3 e5       	ldi	r26, 0x53	; 83
     fd2:	b0 e0       	ldi	r27, 0x00	; 0
     fd4:	e3 e5       	ldi	r30, 0x53	; 83
     fd6:	f0 e0       	ldi	r31, 0x00	; 0
     fd8:	80 81       	ld	r24, Z
     fda:	87 7f       	andi	r24, 0xF7	; 247
     fdc:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR0,WGM00); 	/*Normal Mode WGM01=0 & WGM00=0*/
     fde:	a3 e5       	ldi	r26, 0x53	; 83
     fe0:	b0 e0       	ldi	r27, 0x00	; 0
     fe2:	e3 e5       	ldi	r30, 0x53	; 83
     fe4:	f0 e0       	ldi	r31, 0x00	; 0
     fe6:	80 81       	ld	r24, Z
     fe8:	8f 7b       	andi	r24, 0xBF	; 191
     fea:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR0,COM00);
     fec:	a3 e5       	ldi	r26, 0x53	; 83
     fee:	b0 e0       	ldi	r27, 0x00	; 0
     ff0:	e3 e5       	ldi	r30, 0x53	; 83
     ff2:	f0 e0       	ldi	r31, 0x00	; 0
     ff4:	80 81       	ld	r24, Z
     ff6:	8f 7e       	andi	r24, 0xEF	; 239
     ff8:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR0,COM01);		/*Normal Mode COM00=0 & COM01=0*/
     ffa:	a3 e5       	ldi	r26, 0x53	; 83
     ffc:	b0 e0       	ldi	r27, 0x00	; 0
     ffe:	e3 e5       	ldi	r30, 0x53	; 83
    1000:	f0 e0       	ldi	r31, 0x00	; 0
    1002:	80 81       	ld	r24, Z
    1004:	8f 7d       	andi	r24, 0xDF	; 223
    1006:	8c 93       	st	X, r24
    1008:	70 c0       	rjmp	.+224    	; 0x10ea <Timer0_init+0x17a>
	}
	else if(Config_Ptr->mode==CTC){
    100a:	e9 81       	ldd	r30, Y+1	; 0x01
    100c:	fa 81       	ldd	r31, Y+2	; 0x02
    100e:	81 81       	ldd	r24, Z+1	; 0x01
    1010:	81 30       	cpi	r24, 0x01	; 1
    1012:	09 f0       	breq	.+2      	; 0x1016 <Timer0_init+0xa6>
    1014:	6a c0       	rjmp	.+212    	; 0x10ea <Timer0_init+0x17a>
		SET_BIT(TIMSK,OCIE0);		/*Enable Timer0 Compare Interrupt*/
    1016:	a9 e5       	ldi	r26, 0x59	; 89
    1018:	b0 e0       	ldi	r27, 0x00	; 0
    101a:	e9 e5       	ldi	r30, 0x59	; 89
    101c:	f0 e0       	ldi	r31, 0x00	; 0
    101e:	80 81       	ld	r24, Z
    1020:	82 60       	ori	r24, 0x02	; 2
    1022:	8c 93       	st	X, r24
		SET_BIT(TCCR0,WGM01);
    1024:	a3 e5       	ldi	r26, 0x53	; 83
    1026:	b0 e0       	ldi	r27, 0x00	; 0
    1028:	e3 e5       	ldi	r30, 0x53	; 83
    102a:	f0 e0       	ldi	r31, 0x00	; 0
    102c:	80 81       	ld	r24, Z
    102e:	88 60       	ori	r24, 0x08	; 8
    1030:	8c 93       	st	X, r24
		OCR0  =Config_Ptr->compare_value ;
    1032:	ac e5       	ldi	r26, 0x5C	; 92
    1034:	b0 e0       	ldi	r27, 0x00	; 0
    1036:	e9 81       	ldd	r30, Y+1	; 0x01
    1038:	fa 81       	ldd	r31, Y+2	; 0x02
    103a:	82 81       	ldd	r24, Z+2	; 0x02
    103c:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR0,WGM00); 	/*Compare Mode WGM01=1 & WGM00=0*/
    103e:	a3 e5       	ldi	r26, 0x53	; 83
    1040:	b0 e0       	ldi	r27, 0x00	; 0
    1042:	e3 e5       	ldi	r30, 0x53	; 83
    1044:	f0 e0       	ldi	r31, 0x00	; 0
    1046:	80 81       	ld	r24, Z
    1048:	8f 7b       	andi	r24, 0xBF	; 191
    104a:	8c 93       	st	X, r24
		if (Config_Ptr->pin==DISCONNECTED_OC0){
    104c:	e9 81       	ldd	r30, Y+1	; 0x01
    104e:	fa 81       	ldd	r31, Y+2	; 0x02
    1050:	83 81       	ldd	r24, Z+3	; 0x03
    1052:	88 23       	and	r24, r24
    1054:	79 f4       	brne	.+30     	; 0x1074 <Timer0_init+0x104>
			CLEAR_BIT(TCCR0,COM00);
    1056:	a3 e5       	ldi	r26, 0x53	; 83
    1058:	b0 e0       	ldi	r27, 0x00	; 0
    105a:	e3 e5       	ldi	r30, 0x53	; 83
    105c:	f0 e0       	ldi	r31, 0x00	; 0
    105e:	80 81       	ld	r24, Z
    1060:	8f 7e       	andi	r24, 0xEF	; 239
    1062:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR0,COM01);
    1064:	a3 e5       	ldi	r26, 0x53	; 83
    1066:	b0 e0       	ldi	r27, 0x00	; 0
    1068:	e3 e5       	ldi	r30, 0x53	; 83
    106a:	f0 e0       	ldi	r31, 0x00	; 0
    106c:	80 81       	ld	r24, Z
    106e:	8f 7d       	andi	r24, 0xDF	; 223
    1070:	8c 93       	st	X, r24
    1072:	3b c0       	rjmp	.+118    	; 0x10ea <Timer0_init+0x17a>
		}
		else if(Config_Ptr->pin==TOGGLE_OC0){
    1074:	e9 81       	ldd	r30, Y+1	; 0x01
    1076:	fa 81       	ldd	r31, Y+2	; 0x02
    1078:	83 81       	ldd	r24, Z+3	; 0x03
    107a:	81 30       	cpi	r24, 0x01	; 1
    107c:	79 f4       	brne	.+30     	; 0x109c <Timer0_init+0x12c>
			SET_BIT(TCCR0,COM00);
    107e:	a3 e5       	ldi	r26, 0x53	; 83
    1080:	b0 e0       	ldi	r27, 0x00	; 0
    1082:	e3 e5       	ldi	r30, 0x53	; 83
    1084:	f0 e0       	ldi	r31, 0x00	; 0
    1086:	80 81       	ld	r24, Z
    1088:	80 61       	ori	r24, 0x10	; 16
    108a:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR0,COM01);
    108c:	a3 e5       	ldi	r26, 0x53	; 83
    108e:	b0 e0       	ldi	r27, 0x00	; 0
    1090:	e3 e5       	ldi	r30, 0x53	; 83
    1092:	f0 e0       	ldi	r31, 0x00	; 0
    1094:	80 81       	ld	r24, Z
    1096:	8f 7d       	andi	r24, 0xDF	; 223
    1098:	8c 93       	st	X, r24
    109a:	27 c0       	rjmp	.+78     	; 0x10ea <Timer0_init+0x17a>
		}
		else if(Config_Ptr->pin==CLEAR_OC0){
    109c:	e9 81       	ldd	r30, Y+1	; 0x01
    109e:	fa 81       	ldd	r31, Y+2	; 0x02
    10a0:	83 81       	ldd	r24, Z+3	; 0x03
    10a2:	82 30       	cpi	r24, 0x02	; 2
    10a4:	79 f4       	brne	.+30     	; 0x10c4 <Timer0_init+0x154>
			SET_BIT(TCCR0,COM01);
    10a6:	a3 e5       	ldi	r26, 0x53	; 83
    10a8:	b0 e0       	ldi	r27, 0x00	; 0
    10aa:	e3 e5       	ldi	r30, 0x53	; 83
    10ac:	f0 e0       	ldi	r31, 0x00	; 0
    10ae:	80 81       	ld	r24, Z
    10b0:	80 62       	ori	r24, 0x20	; 32
    10b2:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR0,COM00);
    10b4:	a3 e5       	ldi	r26, 0x53	; 83
    10b6:	b0 e0       	ldi	r27, 0x00	; 0
    10b8:	e3 e5       	ldi	r30, 0x53	; 83
    10ba:	f0 e0       	ldi	r31, 0x00	; 0
    10bc:	80 81       	ld	r24, Z
    10be:	8f 7e       	andi	r24, 0xEF	; 239
    10c0:	8c 93       	st	X, r24
    10c2:	13 c0       	rjmp	.+38     	; 0x10ea <Timer0_init+0x17a>
		}
		else if(Config_Ptr->pin==CLEAR_OC0){
    10c4:	e9 81       	ldd	r30, Y+1	; 0x01
    10c6:	fa 81       	ldd	r31, Y+2	; 0x02
    10c8:	83 81       	ldd	r24, Z+3	; 0x03
    10ca:	82 30       	cpi	r24, 0x02	; 2
    10cc:	71 f4       	brne	.+28     	; 0x10ea <Timer0_init+0x17a>
			SET_BIT(TCCR0,COM01);
    10ce:	a3 e5       	ldi	r26, 0x53	; 83
    10d0:	b0 e0       	ldi	r27, 0x00	; 0
    10d2:	e3 e5       	ldi	r30, 0x53	; 83
    10d4:	f0 e0       	ldi	r31, 0x00	; 0
    10d6:	80 81       	ld	r24, Z
    10d8:	80 62       	ori	r24, 0x20	; 32
    10da:	8c 93       	st	X, r24
			SET_BIT(TCCR0,COM00);
    10dc:	a3 e5       	ldi	r26, 0x53	; 83
    10de:	b0 e0       	ldi	r27, 0x00	; 0
    10e0:	e3 e5       	ldi	r30, 0x53	; 83
    10e2:	f0 e0       	ldi	r31, 0x00	; 0
    10e4:	80 81       	ld	r24, Z
    10e6:	80 61       	ori	r24, 0x10	; 16
    10e8:	8c 93       	st	X, r24
		}
	}
}
    10ea:	0f 90       	pop	r0
    10ec:	0f 90       	pop	r0
    10ee:	cf 91       	pop	r28
    10f0:	df 91       	pop	r29
    10f2:	08 95       	ret

000010f4 <Timer0_setCallBack>:


void Timer0_setCallBack(void(*a_ptr)(void))
{
    10f4:	df 93       	push	r29
    10f6:	cf 93       	push	r28
    10f8:	00 d0       	rcall	.+0      	; 0x10fa <Timer0_setCallBack+0x6>
    10fa:	cd b7       	in	r28, 0x3d	; 61
    10fc:	de b7       	in	r29, 0x3e	; 62
    10fe:	9a 83       	std	Y+2, r25	; 0x02
    1100:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
    1102:	89 81       	ldd	r24, Y+1	; 0x01
    1104:	9a 81       	ldd	r25, Y+2	; 0x02
    1106:	90 93 7b 00 	sts	0x007B, r25
    110a:	80 93 7a 00 	sts	0x007A, r24
}
    110e:	0f 90       	pop	r0
    1110:	0f 90       	pop	r0
    1112:	cf 91       	pop	r28
    1114:	df 91       	pop	r29
    1116:	08 95       	ret

00001118 <Timer0_DeInit>:

void Timer0_DeInit(void)
{
    1118:	df 93       	push	r29
    111a:	cf 93       	push	r28
    111c:	cd b7       	in	r28, 0x3d	; 61
    111e:	de b7       	in	r29, 0x3e	; 62
	/* Clear All Timer1 Registers */
	TCCR0 = 0;
    1120:	e3 e5       	ldi	r30, 0x53	; 83
    1122:	f0 e0       	ldi	r31, 0x00	; 0
    1124:	10 82       	st	Z, r1

	/* Disable the Input Capture interrupt */
	CLEAR_BIT(TIMSK,TOIE0);
    1126:	a9 e5       	ldi	r26, 0x59	; 89
    1128:	b0 e0       	ldi	r27, 0x00	; 0
    112a:	e9 e5       	ldi	r30, 0x59	; 89
    112c:	f0 e0       	ldi	r31, 0x00	; 0
    112e:	80 81       	ld	r24, Z
    1130:	8e 7f       	andi	r24, 0xFE	; 254
    1132:	8c 93       	st	X, r24
	CLEAR_BIT(TIMSK,OCIE0);
    1134:	a9 e5       	ldi	r26, 0x59	; 89
    1136:	b0 e0       	ldi	r27, 0x00	; 0
    1138:	e9 e5       	ldi	r30, 0x59	; 89
    113a:	f0 e0       	ldi	r31, 0x00	; 0
    113c:	80 81       	ld	r24, Z
    113e:	8d 7f       	andi	r24, 0xFD	; 253
    1140:	8c 93       	st	X, r24
}
    1142:	cf 91       	pop	r28
    1144:	df 91       	pop	r29
    1146:	08 95       	ret

00001148 <delay_Timer0>:
uint16 Timer_Counter=0;
Timer0_ConfigType Config;



void delay_Timer0(uint8 cmp_value,uint8 Num_Secs){
    1148:	df 93       	push	r29
    114a:	cf 93       	push	r28
    114c:	00 d0       	rcall	.+0      	; 0x114e <delay_Timer0+0x6>
    114e:	cd b7       	in	r28, 0x3d	; 61
    1150:	de b7       	in	r29, 0x3e	; 62
    1152:	89 83       	std	Y+1, r24	; 0x01
    1154:	6a 83       	std	Y+2, r22	; 0x02
	Config.clock=F_CPU_1024;
    1156:	85 e0       	ldi	r24, 0x05	; 5
    1158:	80 93 7e 00 	sts	0x007E, r24
	Config.mode=CTC;
    115c:	81 e0       	ldi	r24, 0x01	; 1
    115e:	80 93 7f 00 	sts	0x007F, r24
	Config.compare_value=cmp_value;
    1162:	89 81       	ldd	r24, Y+1	; 0x01
    1164:	80 93 80 00 	sts	0x0080, r24
	Config.pin=DISCONNECTED_OC0;
    1168:	10 92 81 00 	sts	0x0081, r1
	Timer0_setCallBack(&delay_ISR);
    116c:	8e ed       	ldi	r24, 0xDE	; 222
    116e:	98 e0       	ldi	r25, 0x08	; 8
    1170:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <Timer0_setCallBack>
	Timer0_init(&Config);
    1174:	8e e7       	ldi	r24, 0x7E	; 126
    1176:	90 e0       	ldi	r25, 0x00	; 0
    1178:	0e 94 b8 07 	call	0xf70	; 0xf70 <Timer0_init>
	while(Timer_Counter<=(Num_Secs*31)){}
    117c:	8a 81       	ldd	r24, Y+2	; 0x02
    117e:	28 2f       	mov	r18, r24
    1180:	30 e0       	ldi	r19, 0x00	; 0
    1182:	8f e1       	ldi	r24, 0x1F	; 31
    1184:	90 e0       	ldi	r25, 0x00	; 0
    1186:	ac 01       	movw	r20, r24
    1188:	24 9f       	mul	r18, r20
    118a:	c0 01       	movw	r24, r0
    118c:	25 9f       	mul	r18, r21
    118e:	90 0d       	add	r25, r0
    1190:	34 9f       	mul	r19, r20
    1192:	90 0d       	add	r25, r0
    1194:	11 24       	eor	r1, r1
    1196:	9c 01       	movw	r18, r24
    1198:	80 91 7c 00 	lds	r24, 0x007C
    119c:	90 91 7d 00 	lds	r25, 0x007D
    11a0:	28 17       	cp	r18, r24
    11a2:	39 07       	cpc	r19, r25
    11a4:	58 f7       	brcc	.-42     	; 0x117c <delay_Timer0+0x34>
	Timer0_DeInit();
    11a6:	0e 94 8c 08 	call	0x1118	; 0x1118 <Timer0_DeInit>
	Timer_Counter=0;
    11aa:	10 92 7d 00 	sts	0x007D, r1
    11ae:	10 92 7c 00 	sts	0x007C, r1
}
    11b2:	0f 90       	pop	r0
    11b4:	0f 90       	pop	r0
    11b6:	cf 91       	pop	r28
    11b8:	df 91       	pop	r29
    11ba:	08 95       	ret

000011bc <delay_ISR>:

void delay_ISR(void){
    11bc:	df 93       	push	r29
    11be:	cf 93       	push	r28
    11c0:	cd b7       	in	r28, 0x3d	; 61
    11c2:	de b7       	in	r29, 0x3e	; 62
	Timer_Counter++;
    11c4:	80 91 7c 00 	lds	r24, 0x007C
    11c8:	90 91 7d 00 	lds	r25, 0x007D
    11cc:	01 96       	adiw	r24, 0x01	; 1
    11ce:	90 93 7d 00 	sts	0x007D, r25
    11d2:	80 93 7c 00 	sts	0x007C, r24

}
    11d6:	cf 91       	pop	r28
    11d8:	df 91       	pop	r29
    11da:	08 95       	ret

000011dc <EEPROM_writeByte>:
 *******************************************************************************/
#include "external_eeprom.h"
#include "twi.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    11dc:	df 93       	push	r29
    11de:	cf 93       	push	r28
    11e0:	00 d0       	rcall	.+0      	; 0x11e2 <EEPROM_writeByte+0x6>
    11e2:	00 d0       	rcall	.+0      	; 0x11e4 <EEPROM_writeByte+0x8>
    11e4:	cd b7       	in	r28, 0x3d	; 61
    11e6:	de b7       	in	r29, 0x3e	; 62
    11e8:	9a 83       	std	Y+2, r25	; 0x02
    11ea:	89 83       	std	Y+1, r24	; 0x01
    11ec:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    11ee:	0e 94 20 14 	call	0x2840	; 0x2840 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    11f2:	0e 94 78 14 	call	0x28f0	; 0x28f0 <TWI_getStatus>
    11f6:	88 30       	cpi	r24, 0x08	; 8
    11f8:	11 f0       	breq	.+4      	; 0x11fe <EEPROM_writeByte+0x22>
        return ERROR;
    11fa:	1c 82       	std	Y+4, r1	; 0x04
    11fc:	28 c0       	rjmp	.+80     	; 0x124e <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    11fe:	89 81       	ldd	r24, Y+1	; 0x01
    1200:	9a 81       	ldd	r25, Y+2	; 0x02
    1202:	80 70       	andi	r24, 0x00	; 0
    1204:	97 70       	andi	r25, 0x07	; 7
    1206:	88 0f       	add	r24, r24
    1208:	89 2f       	mov	r24, r25
    120a:	88 1f       	adc	r24, r24
    120c:	99 0b       	sbc	r25, r25
    120e:	91 95       	neg	r25
    1210:	80 6a       	ori	r24, 0xA0	; 160
    1212:	0e 94 3b 14 	call	0x2876	; 0x2876 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1216:	0e 94 78 14 	call	0x28f0	; 0x28f0 <TWI_getStatus>
    121a:	88 31       	cpi	r24, 0x18	; 24
    121c:	11 f0       	breq	.+4      	; 0x1222 <EEPROM_writeByte+0x46>
        return ERROR; 
    121e:	1c 82       	std	Y+4, r1	; 0x04
    1220:	16 c0       	rjmp	.+44     	; 0x124e <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    1222:	89 81       	ldd	r24, Y+1	; 0x01
    1224:	0e 94 3b 14 	call	0x2876	; 0x2876 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1228:	0e 94 78 14 	call	0x28f0	; 0x28f0 <TWI_getStatus>
    122c:	88 32       	cpi	r24, 0x28	; 40
    122e:	11 f0       	breq	.+4      	; 0x1234 <EEPROM_writeByte+0x58>
        return ERROR;
    1230:	1c 82       	std	Y+4, r1	; 0x04
    1232:	0d c0       	rjmp	.+26     	; 0x124e <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
    1234:	8b 81       	ldd	r24, Y+3	; 0x03
    1236:	0e 94 3b 14 	call	0x2876	; 0x2876 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    123a:	0e 94 78 14 	call	0x28f0	; 0x28f0 <TWI_getStatus>
    123e:	88 32       	cpi	r24, 0x28	; 40
    1240:	11 f0       	breq	.+4      	; 0x1246 <EEPROM_writeByte+0x6a>
        return ERROR;
    1242:	1c 82       	std	Y+4, r1	; 0x04
    1244:	04 c0       	rjmp	.+8      	; 0x124e <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    1246:	0e 94 30 14 	call	0x2860	; 0x2860 <TWI_stop>
	
    return SUCCESS;
    124a:	81 e0       	ldi	r24, 0x01	; 1
    124c:	8c 83       	std	Y+4, r24	; 0x04
    124e:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1250:	0f 90       	pop	r0
    1252:	0f 90       	pop	r0
    1254:	0f 90       	pop	r0
    1256:	0f 90       	pop	r0
    1258:	cf 91       	pop	r28
    125a:	df 91       	pop	r29
    125c:	08 95       	ret

0000125e <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    125e:	df 93       	push	r29
    1260:	cf 93       	push	r28
    1262:	00 d0       	rcall	.+0      	; 0x1264 <EEPROM_readByte+0x6>
    1264:	00 d0       	rcall	.+0      	; 0x1266 <EEPROM_readByte+0x8>
    1266:	0f 92       	push	r0
    1268:	cd b7       	in	r28, 0x3d	; 61
    126a:	de b7       	in	r29, 0x3e	; 62
    126c:	9a 83       	std	Y+2, r25	; 0x02
    126e:	89 83       	std	Y+1, r24	; 0x01
    1270:	7c 83       	std	Y+4, r23	; 0x04
    1272:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1274:	0e 94 20 14 	call	0x2840	; 0x2840 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    1278:	0e 94 78 14 	call	0x28f0	; 0x28f0 <TWI_getStatus>
    127c:	88 30       	cpi	r24, 0x08	; 8
    127e:	11 f0       	breq	.+4      	; 0x1284 <EEPROM_readByte+0x26>
        return ERROR;
    1280:	1d 82       	std	Y+5, r1	; 0x05
    1282:	44 c0       	rjmp	.+136    	; 0x130c <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    1284:	89 81       	ldd	r24, Y+1	; 0x01
    1286:	9a 81       	ldd	r25, Y+2	; 0x02
    1288:	80 70       	andi	r24, 0x00	; 0
    128a:	97 70       	andi	r25, 0x07	; 7
    128c:	88 0f       	add	r24, r24
    128e:	89 2f       	mov	r24, r25
    1290:	88 1f       	adc	r24, r24
    1292:	99 0b       	sbc	r25, r25
    1294:	91 95       	neg	r25
    1296:	80 6a       	ori	r24, 0xA0	; 160
    1298:	0e 94 3b 14 	call	0x2876	; 0x2876 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    129c:	0e 94 78 14 	call	0x28f0	; 0x28f0 <TWI_getStatus>
    12a0:	88 31       	cpi	r24, 0x18	; 24
    12a2:	11 f0       	breq	.+4      	; 0x12a8 <EEPROM_readByte+0x4a>
        return ERROR;
    12a4:	1d 82       	std	Y+5, r1	; 0x05
    12a6:	32 c0       	rjmp	.+100    	; 0x130c <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    12a8:	89 81       	ldd	r24, Y+1	; 0x01
    12aa:	0e 94 3b 14 	call	0x2876	; 0x2876 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    12ae:	0e 94 78 14 	call	0x28f0	; 0x28f0 <TWI_getStatus>
    12b2:	88 32       	cpi	r24, 0x28	; 40
    12b4:	11 f0       	breq	.+4      	; 0x12ba <EEPROM_readByte+0x5c>
        return ERROR;
    12b6:	1d 82       	std	Y+5, r1	; 0x05
    12b8:	29 c0       	rjmp	.+82     	; 0x130c <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    12ba:	0e 94 20 14 	call	0x2840	; 0x2840 <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    12be:	0e 94 78 14 	call	0x28f0	; 0x28f0 <TWI_getStatus>
    12c2:	80 31       	cpi	r24, 0x10	; 16
    12c4:	11 f0       	breq	.+4      	; 0x12ca <EEPROM_readByte+0x6c>
        return ERROR;
    12c6:	1d 82       	std	Y+5, r1	; 0x05
    12c8:	21 c0       	rjmp	.+66     	; 0x130c <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    12ca:	89 81       	ldd	r24, Y+1	; 0x01
    12cc:	9a 81       	ldd	r25, Y+2	; 0x02
    12ce:	80 70       	andi	r24, 0x00	; 0
    12d0:	97 70       	andi	r25, 0x07	; 7
    12d2:	88 0f       	add	r24, r24
    12d4:	89 2f       	mov	r24, r25
    12d6:	88 1f       	adc	r24, r24
    12d8:	99 0b       	sbc	r25, r25
    12da:	91 95       	neg	r25
    12dc:	81 6a       	ori	r24, 0xA1	; 161
    12de:	0e 94 3b 14 	call	0x2876	; 0x2876 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    12e2:	0e 94 78 14 	call	0x28f0	; 0x28f0 <TWI_getStatus>
    12e6:	80 34       	cpi	r24, 0x40	; 64
    12e8:	11 f0       	breq	.+4      	; 0x12ee <EEPROM_readByte+0x90>
        return ERROR;
    12ea:	1d 82       	std	Y+5, r1	; 0x05
    12ec:	0f c0       	rjmp	.+30     	; 0x130c <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    12ee:	0e 94 65 14 	call	0x28ca	; 0x28ca <TWI_readByteWithNACK>
    12f2:	eb 81       	ldd	r30, Y+3	; 0x03
    12f4:	fc 81       	ldd	r31, Y+4	; 0x04
    12f6:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    12f8:	0e 94 78 14 	call	0x28f0	; 0x28f0 <TWI_getStatus>
    12fc:	88 35       	cpi	r24, 0x58	; 88
    12fe:	11 f0       	breq	.+4      	; 0x1304 <EEPROM_readByte+0xa6>
        return ERROR;
    1300:	1d 82       	std	Y+5, r1	; 0x05
    1302:	04 c0       	rjmp	.+8      	; 0x130c <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    1304:	0e 94 30 14 	call	0x2860	; 0x2860 <TWI_stop>

    return SUCCESS;
    1308:	81 e0       	ldi	r24, 0x01	; 1
    130a:	8d 83       	std	Y+5, r24	; 0x05
    130c:	8d 81       	ldd	r24, Y+5	; 0x05
}
    130e:	0f 90       	pop	r0
    1310:	0f 90       	pop	r0
    1312:	0f 90       	pop	r0
    1314:	0f 90       	pop	r0
    1316:	0f 90       	pop	r0
    1318:	cf 91       	pop	r28
    131a:	df 91       	pop	r29
    131c:	08 95       	ret

0000131e <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    131e:	df 93       	push	r29
    1320:	cf 93       	push	r28
    1322:	00 d0       	rcall	.+0      	; 0x1324 <GPIO_setupPinDirection+0x6>
    1324:	00 d0       	rcall	.+0      	; 0x1326 <GPIO_setupPinDirection+0x8>
    1326:	0f 92       	push	r0
    1328:	cd b7       	in	r28, 0x3d	; 61
    132a:	de b7       	in	r29, 0x3e	; 62
    132c:	89 83       	std	Y+1, r24	; 0x01
    132e:	6a 83       	std	Y+2, r22	; 0x02
    1330:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1332:	8a 81       	ldd	r24, Y+2	; 0x02
    1334:	88 30       	cpi	r24, 0x08	; 8
    1336:	08 f0       	brcs	.+2      	; 0x133a <GPIO_setupPinDirection+0x1c>
    1338:	d5 c0       	rjmp	.+426    	; 0x14e4 <GPIO_setupPinDirection+0x1c6>
    133a:	89 81       	ldd	r24, Y+1	; 0x01
    133c:	84 30       	cpi	r24, 0x04	; 4
    133e:	08 f0       	brcs	.+2      	; 0x1342 <GPIO_setupPinDirection+0x24>
    1340:	d1 c0       	rjmp	.+418    	; 0x14e4 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1342:	89 81       	ldd	r24, Y+1	; 0x01
    1344:	28 2f       	mov	r18, r24
    1346:	30 e0       	ldi	r19, 0x00	; 0
    1348:	3d 83       	std	Y+5, r19	; 0x05
    134a:	2c 83       	std	Y+4, r18	; 0x04
    134c:	8c 81       	ldd	r24, Y+4	; 0x04
    134e:	9d 81       	ldd	r25, Y+5	; 0x05
    1350:	81 30       	cpi	r24, 0x01	; 1
    1352:	91 05       	cpc	r25, r1
    1354:	09 f4       	brne	.+2      	; 0x1358 <GPIO_setupPinDirection+0x3a>
    1356:	43 c0       	rjmp	.+134    	; 0x13de <GPIO_setupPinDirection+0xc0>
    1358:	2c 81       	ldd	r18, Y+4	; 0x04
    135a:	3d 81       	ldd	r19, Y+5	; 0x05
    135c:	22 30       	cpi	r18, 0x02	; 2
    135e:	31 05       	cpc	r19, r1
    1360:	2c f4       	brge	.+10     	; 0x136c <GPIO_setupPinDirection+0x4e>
    1362:	8c 81       	ldd	r24, Y+4	; 0x04
    1364:	9d 81       	ldd	r25, Y+5	; 0x05
    1366:	00 97       	sbiw	r24, 0x00	; 0
    1368:	71 f0       	breq	.+28     	; 0x1386 <GPIO_setupPinDirection+0x68>
    136a:	bc c0       	rjmp	.+376    	; 0x14e4 <GPIO_setupPinDirection+0x1c6>
    136c:	2c 81       	ldd	r18, Y+4	; 0x04
    136e:	3d 81       	ldd	r19, Y+5	; 0x05
    1370:	22 30       	cpi	r18, 0x02	; 2
    1372:	31 05       	cpc	r19, r1
    1374:	09 f4       	brne	.+2      	; 0x1378 <GPIO_setupPinDirection+0x5a>
    1376:	5f c0       	rjmp	.+190    	; 0x1436 <GPIO_setupPinDirection+0x118>
    1378:	8c 81       	ldd	r24, Y+4	; 0x04
    137a:	9d 81       	ldd	r25, Y+5	; 0x05
    137c:	83 30       	cpi	r24, 0x03	; 3
    137e:	91 05       	cpc	r25, r1
    1380:	09 f4       	brne	.+2      	; 0x1384 <GPIO_setupPinDirection+0x66>
    1382:	85 c0       	rjmp	.+266    	; 0x148e <GPIO_setupPinDirection+0x170>
    1384:	af c0       	rjmp	.+350    	; 0x14e4 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1386:	8b 81       	ldd	r24, Y+3	; 0x03
    1388:	81 30       	cpi	r24, 0x01	; 1
    138a:	a1 f4       	brne	.+40     	; 0x13b4 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    138c:	aa e3       	ldi	r26, 0x3A	; 58
    138e:	b0 e0       	ldi	r27, 0x00	; 0
    1390:	ea e3       	ldi	r30, 0x3A	; 58
    1392:	f0 e0       	ldi	r31, 0x00	; 0
    1394:	80 81       	ld	r24, Z
    1396:	48 2f       	mov	r20, r24
    1398:	8a 81       	ldd	r24, Y+2	; 0x02
    139a:	28 2f       	mov	r18, r24
    139c:	30 e0       	ldi	r19, 0x00	; 0
    139e:	81 e0       	ldi	r24, 0x01	; 1
    13a0:	90 e0       	ldi	r25, 0x00	; 0
    13a2:	02 2e       	mov	r0, r18
    13a4:	02 c0       	rjmp	.+4      	; 0x13aa <GPIO_setupPinDirection+0x8c>
    13a6:	88 0f       	add	r24, r24
    13a8:	99 1f       	adc	r25, r25
    13aa:	0a 94       	dec	r0
    13ac:	e2 f7       	brpl	.-8      	; 0x13a6 <GPIO_setupPinDirection+0x88>
    13ae:	84 2b       	or	r24, r20
    13b0:	8c 93       	st	X, r24
    13b2:	98 c0       	rjmp	.+304    	; 0x14e4 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    13b4:	aa e3       	ldi	r26, 0x3A	; 58
    13b6:	b0 e0       	ldi	r27, 0x00	; 0
    13b8:	ea e3       	ldi	r30, 0x3A	; 58
    13ba:	f0 e0       	ldi	r31, 0x00	; 0
    13bc:	80 81       	ld	r24, Z
    13be:	48 2f       	mov	r20, r24
    13c0:	8a 81       	ldd	r24, Y+2	; 0x02
    13c2:	28 2f       	mov	r18, r24
    13c4:	30 e0       	ldi	r19, 0x00	; 0
    13c6:	81 e0       	ldi	r24, 0x01	; 1
    13c8:	90 e0       	ldi	r25, 0x00	; 0
    13ca:	02 2e       	mov	r0, r18
    13cc:	02 c0       	rjmp	.+4      	; 0x13d2 <GPIO_setupPinDirection+0xb4>
    13ce:	88 0f       	add	r24, r24
    13d0:	99 1f       	adc	r25, r25
    13d2:	0a 94       	dec	r0
    13d4:	e2 f7       	brpl	.-8      	; 0x13ce <GPIO_setupPinDirection+0xb0>
    13d6:	80 95       	com	r24
    13d8:	84 23       	and	r24, r20
    13da:	8c 93       	st	X, r24
    13dc:	83 c0       	rjmp	.+262    	; 0x14e4 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    13de:	8b 81       	ldd	r24, Y+3	; 0x03
    13e0:	81 30       	cpi	r24, 0x01	; 1
    13e2:	a1 f4       	brne	.+40     	; 0x140c <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    13e4:	a7 e3       	ldi	r26, 0x37	; 55
    13e6:	b0 e0       	ldi	r27, 0x00	; 0
    13e8:	e7 e3       	ldi	r30, 0x37	; 55
    13ea:	f0 e0       	ldi	r31, 0x00	; 0
    13ec:	80 81       	ld	r24, Z
    13ee:	48 2f       	mov	r20, r24
    13f0:	8a 81       	ldd	r24, Y+2	; 0x02
    13f2:	28 2f       	mov	r18, r24
    13f4:	30 e0       	ldi	r19, 0x00	; 0
    13f6:	81 e0       	ldi	r24, 0x01	; 1
    13f8:	90 e0       	ldi	r25, 0x00	; 0
    13fa:	02 2e       	mov	r0, r18
    13fc:	02 c0       	rjmp	.+4      	; 0x1402 <GPIO_setupPinDirection+0xe4>
    13fe:	88 0f       	add	r24, r24
    1400:	99 1f       	adc	r25, r25
    1402:	0a 94       	dec	r0
    1404:	e2 f7       	brpl	.-8      	; 0x13fe <GPIO_setupPinDirection+0xe0>
    1406:	84 2b       	or	r24, r20
    1408:	8c 93       	st	X, r24
    140a:	6c c0       	rjmp	.+216    	; 0x14e4 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    140c:	a7 e3       	ldi	r26, 0x37	; 55
    140e:	b0 e0       	ldi	r27, 0x00	; 0
    1410:	e7 e3       	ldi	r30, 0x37	; 55
    1412:	f0 e0       	ldi	r31, 0x00	; 0
    1414:	80 81       	ld	r24, Z
    1416:	48 2f       	mov	r20, r24
    1418:	8a 81       	ldd	r24, Y+2	; 0x02
    141a:	28 2f       	mov	r18, r24
    141c:	30 e0       	ldi	r19, 0x00	; 0
    141e:	81 e0       	ldi	r24, 0x01	; 1
    1420:	90 e0       	ldi	r25, 0x00	; 0
    1422:	02 2e       	mov	r0, r18
    1424:	02 c0       	rjmp	.+4      	; 0x142a <GPIO_setupPinDirection+0x10c>
    1426:	88 0f       	add	r24, r24
    1428:	99 1f       	adc	r25, r25
    142a:	0a 94       	dec	r0
    142c:	e2 f7       	brpl	.-8      	; 0x1426 <GPIO_setupPinDirection+0x108>
    142e:	80 95       	com	r24
    1430:	84 23       	and	r24, r20
    1432:	8c 93       	st	X, r24
    1434:	57 c0       	rjmp	.+174    	; 0x14e4 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1436:	8b 81       	ldd	r24, Y+3	; 0x03
    1438:	81 30       	cpi	r24, 0x01	; 1
    143a:	a1 f4       	brne	.+40     	; 0x1464 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    143c:	a4 e3       	ldi	r26, 0x34	; 52
    143e:	b0 e0       	ldi	r27, 0x00	; 0
    1440:	e4 e3       	ldi	r30, 0x34	; 52
    1442:	f0 e0       	ldi	r31, 0x00	; 0
    1444:	80 81       	ld	r24, Z
    1446:	48 2f       	mov	r20, r24
    1448:	8a 81       	ldd	r24, Y+2	; 0x02
    144a:	28 2f       	mov	r18, r24
    144c:	30 e0       	ldi	r19, 0x00	; 0
    144e:	81 e0       	ldi	r24, 0x01	; 1
    1450:	90 e0       	ldi	r25, 0x00	; 0
    1452:	02 2e       	mov	r0, r18
    1454:	02 c0       	rjmp	.+4      	; 0x145a <GPIO_setupPinDirection+0x13c>
    1456:	88 0f       	add	r24, r24
    1458:	99 1f       	adc	r25, r25
    145a:	0a 94       	dec	r0
    145c:	e2 f7       	brpl	.-8      	; 0x1456 <GPIO_setupPinDirection+0x138>
    145e:	84 2b       	or	r24, r20
    1460:	8c 93       	st	X, r24
    1462:	40 c0       	rjmp	.+128    	; 0x14e4 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1464:	a4 e3       	ldi	r26, 0x34	; 52
    1466:	b0 e0       	ldi	r27, 0x00	; 0
    1468:	e4 e3       	ldi	r30, 0x34	; 52
    146a:	f0 e0       	ldi	r31, 0x00	; 0
    146c:	80 81       	ld	r24, Z
    146e:	48 2f       	mov	r20, r24
    1470:	8a 81       	ldd	r24, Y+2	; 0x02
    1472:	28 2f       	mov	r18, r24
    1474:	30 e0       	ldi	r19, 0x00	; 0
    1476:	81 e0       	ldi	r24, 0x01	; 1
    1478:	90 e0       	ldi	r25, 0x00	; 0
    147a:	02 2e       	mov	r0, r18
    147c:	02 c0       	rjmp	.+4      	; 0x1482 <GPIO_setupPinDirection+0x164>
    147e:	88 0f       	add	r24, r24
    1480:	99 1f       	adc	r25, r25
    1482:	0a 94       	dec	r0
    1484:	e2 f7       	brpl	.-8      	; 0x147e <GPIO_setupPinDirection+0x160>
    1486:	80 95       	com	r24
    1488:	84 23       	and	r24, r20
    148a:	8c 93       	st	X, r24
    148c:	2b c0       	rjmp	.+86     	; 0x14e4 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    148e:	8b 81       	ldd	r24, Y+3	; 0x03
    1490:	81 30       	cpi	r24, 0x01	; 1
    1492:	a1 f4       	brne	.+40     	; 0x14bc <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1494:	a1 e3       	ldi	r26, 0x31	; 49
    1496:	b0 e0       	ldi	r27, 0x00	; 0
    1498:	e1 e3       	ldi	r30, 0x31	; 49
    149a:	f0 e0       	ldi	r31, 0x00	; 0
    149c:	80 81       	ld	r24, Z
    149e:	48 2f       	mov	r20, r24
    14a0:	8a 81       	ldd	r24, Y+2	; 0x02
    14a2:	28 2f       	mov	r18, r24
    14a4:	30 e0       	ldi	r19, 0x00	; 0
    14a6:	81 e0       	ldi	r24, 0x01	; 1
    14a8:	90 e0       	ldi	r25, 0x00	; 0
    14aa:	02 2e       	mov	r0, r18
    14ac:	02 c0       	rjmp	.+4      	; 0x14b2 <GPIO_setupPinDirection+0x194>
    14ae:	88 0f       	add	r24, r24
    14b0:	99 1f       	adc	r25, r25
    14b2:	0a 94       	dec	r0
    14b4:	e2 f7       	brpl	.-8      	; 0x14ae <GPIO_setupPinDirection+0x190>
    14b6:	84 2b       	or	r24, r20
    14b8:	8c 93       	st	X, r24
    14ba:	14 c0       	rjmp	.+40     	; 0x14e4 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    14bc:	a1 e3       	ldi	r26, 0x31	; 49
    14be:	b0 e0       	ldi	r27, 0x00	; 0
    14c0:	e1 e3       	ldi	r30, 0x31	; 49
    14c2:	f0 e0       	ldi	r31, 0x00	; 0
    14c4:	80 81       	ld	r24, Z
    14c6:	48 2f       	mov	r20, r24
    14c8:	8a 81       	ldd	r24, Y+2	; 0x02
    14ca:	28 2f       	mov	r18, r24
    14cc:	30 e0       	ldi	r19, 0x00	; 0
    14ce:	81 e0       	ldi	r24, 0x01	; 1
    14d0:	90 e0       	ldi	r25, 0x00	; 0
    14d2:	02 2e       	mov	r0, r18
    14d4:	02 c0       	rjmp	.+4      	; 0x14da <GPIO_setupPinDirection+0x1bc>
    14d6:	88 0f       	add	r24, r24
    14d8:	99 1f       	adc	r25, r25
    14da:	0a 94       	dec	r0
    14dc:	e2 f7       	brpl	.-8      	; 0x14d6 <GPIO_setupPinDirection+0x1b8>
    14de:	80 95       	com	r24
    14e0:	84 23       	and	r24, r20
    14e2:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    14e4:	0f 90       	pop	r0
    14e6:	0f 90       	pop	r0
    14e8:	0f 90       	pop	r0
    14ea:	0f 90       	pop	r0
    14ec:	0f 90       	pop	r0
    14ee:	cf 91       	pop	r28
    14f0:	df 91       	pop	r29
    14f2:	08 95       	ret

000014f4 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    14f4:	df 93       	push	r29
    14f6:	cf 93       	push	r28
    14f8:	00 d0       	rcall	.+0      	; 0x14fa <GPIO_writePin+0x6>
    14fa:	00 d0       	rcall	.+0      	; 0x14fc <GPIO_writePin+0x8>
    14fc:	0f 92       	push	r0
    14fe:	cd b7       	in	r28, 0x3d	; 61
    1500:	de b7       	in	r29, 0x3e	; 62
    1502:	89 83       	std	Y+1, r24	; 0x01
    1504:	6a 83       	std	Y+2, r22	; 0x02
    1506:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1508:	8a 81       	ldd	r24, Y+2	; 0x02
    150a:	88 30       	cpi	r24, 0x08	; 8
    150c:	08 f0       	brcs	.+2      	; 0x1510 <GPIO_writePin+0x1c>
    150e:	d5 c0       	rjmp	.+426    	; 0x16ba <GPIO_writePin+0x1c6>
    1510:	89 81       	ldd	r24, Y+1	; 0x01
    1512:	84 30       	cpi	r24, 0x04	; 4
    1514:	08 f0       	brcs	.+2      	; 0x1518 <GPIO_writePin+0x24>
    1516:	d1 c0       	rjmp	.+418    	; 0x16ba <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1518:	89 81       	ldd	r24, Y+1	; 0x01
    151a:	28 2f       	mov	r18, r24
    151c:	30 e0       	ldi	r19, 0x00	; 0
    151e:	3d 83       	std	Y+5, r19	; 0x05
    1520:	2c 83       	std	Y+4, r18	; 0x04
    1522:	8c 81       	ldd	r24, Y+4	; 0x04
    1524:	9d 81       	ldd	r25, Y+5	; 0x05
    1526:	81 30       	cpi	r24, 0x01	; 1
    1528:	91 05       	cpc	r25, r1
    152a:	09 f4       	brne	.+2      	; 0x152e <GPIO_writePin+0x3a>
    152c:	43 c0       	rjmp	.+134    	; 0x15b4 <GPIO_writePin+0xc0>
    152e:	2c 81       	ldd	r18, Y+4	; 0x04
    1530:	3d 81       	ldd	r19, Y+5	; 0x05
    1532:	22 30       	cpi	r18, 0x02	; 2
    1534:	31 05       	cpc	r19, r1
    1536:	2c f4       	brge	.+10     	; 0x1542 <GPIO_writePin+0x4e>
    1538:	8c 81       	ldd	r24, Y+4	; 0x04
    153a:	9d 81       	ldd	r25, Y+5	; 0x05
    153c:	00 97       	sbiw	r24, 0x00	; 0
    153e:	71 f0       	breq	.+28     	; 0x155c <GPIO_writePin+0x68>
    1540:	bc c0       	rjmp	.+376    	; 0x16ba <GPIO_writePin+0x1c6>
    1542:	2c 81       	ldd	r18, Y+4	; 0x04
    1544:	3d 81       	ldd	r19, Y+5	; 0x05
    1546:	22 30       	cpi	r18, 0x02	; 2
    1548:	31 05       	cpc	r19, r1
    154a:	09 f4       	brne	.+2      	; 0x154e <GPIO_writePin+0x5a>
    154c:	5f c0       	rjmp	.+190    	; 0x160c <GPIO_writePin+0x118>
    154e:	8c 81       	ldd	r24, Y+4	; 0x04
    1550:	9d 81       	ldd	r25, Y+5	; 0x05
    1552:	83 30       	cpi	r24, 0x03	; 3
    1554:	91 05       	cpc	r25, r1
    1556:	09 f4       	brne	.+2      	; 0x155a <GPIO_writePin+0x66>
    1558:	85 c0       	rjmp	.+266    	; 0x1664 <GPIO_writePin+0x170>
    155a:	af c0       	rjmp	.+350    	; 0x16ba <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    155c:	8b 81       	ldd	r24, Y+3	; 0x03
    155e:	81 30       	cpi	r24, 0x01	; 1
    1560:	a1 f4       	brne	.+40     	; 0x158a <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1562:	ab e3       	ldi	r26, 0x3B	; 59
    1564:	b0 e0       	ldi	r27, 0x00	; 0
    1566:	eb e3       	ldi	r30, 0x3B	; 59
    1568:	f0 e0       	ldi	r31, 0x00	; 0
    156a:	80 81       	ld	r24, Z
    156c:	48 2f       	mov	r20, r24
    156e:	8a 81       	ldd	r24, Y+2	; 0x02
    1570:	28 2f       	mov	r18, r24
    1572:	30 e0       	ldi	r19, 0x00	; 0
    1574:	81 e0       	ldi	r24, 0x01	; 1
    1576:	90 e0       	ldi	r25, 0x00	; 0
    1578:	02 2e       	mov	r0, r18
    157a:	02 c0       	rjmp	.+4      	; 0x1580 <GPIO_writePin+0x8c>
    157c:	88 0f       	add	r24, r24
    157e:	99 1f       	adc	r25, r25
    1580:	0a 94       	dec	r0
    1582:	e2 f7       	brpl	.-8      	; 0x157c <GPIO_writePin+0x88>
    1584:	84 2b       	or	r24, r20
    1586:	8c 93       	st	X, r24
    1588:	98 c0       	rjmp	.+304    	; 0x16ba <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    158a:	ab e3       	ldi	r26, 0x3B	; 59
    158c:	b0 e0       	ldi	r27, 0x00	; 0
    158e:	eb e3       	ldi	r30, 0x3B	; 59
    1590:	f0 e0       	ldi	r31, 0x00	; 0
    1592:	80 81       	ld	r24, Z
    1594:	48 2f       	mov	r20, r24
    1596:	8a 81       	ldd	r24, Y+2	; 0x02
    1598:	28 2f       	mov	r18, r24
    159a:	30 e0       	ldi	r19, 0x00	; 0
    159c:	81 e0       	ldi	r24, 0x01	; 1
    159e:	90 e0       	ldi	r25, 0x00	; 0
    15a0:	02 2e       	mov	r0, r18
    15a2:	02 c0       	rjmp	.+4      	; 0x15a8 <GPIO_writePin+0xb4>
    15a4:	88 0f       	add	r24, r24
    15a6:	99 1f       	adc	r25, r25
    15a8:	0a 94       	dec	r0
    15aa:	e2 f7       	brpl	.-8      	; 0x15a4 <GPIO_writePin+0xb0>
    15ac:	80 95       	com	r24
    15ae:	84 23       	and	r24, r20
    15b0:	8c 93       	st	X, r24
    15b2:	83 c0       	rjmp	.+262    	; 0x16ba <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    15b4:	8b 81       	ldd	r24, Y+3	; 0x03
    15b6:	81 30       	cpi	r24, 0x01	; 1
    15b8:	a1 f4       	brne	.+40     	; 0x15e2 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    15ba:	a8 e3       	ldi	r26, 0x38	; 56
    15bc:	b0 e0       	ldi	r27, 0x00	; 0
    15be:	e8 e3       	ldi	r30, 0x38	; 56
    15c0:	f0 e0       	ldi	r31, 0x00	; 0
    15c2:	80 81       	ld	r24, Z
    15c4:	48 2f       	mov	r20, r24
    15c6:	8a 81       	ldd	r24, Y+2	; 0x02
    15c8:	28 2f       	mov	r18, r24
    15ca:	30 e0       	ldi	r19, 0x00	; 0
    15cc:	81 e0       	ldi	r24, 0x01	; 1
    15ce:	90 e0       	ldi	r25, 0x00	; 0
    15d0:	02 2e       	mov	r0, r18
    15d2:	02 c0       	rjmp	.+4      	; 0x15d8 <GPIO_writePin+0xe4>
    15d4:	88 0f       	add	r24, r24
    15d6:	99 1f       	adc	r25, r25
    15d8:	0a 94       	dec	r0
    15da:	e2 f7       	brpl	.-8      	; 0x15d4 <GPIO_writePin+0xe0>
    15dc:	84 2b       	or	r24, r20
    15de:	8c 93       	st	X, r24
    15e0:	6c c0       	rjmp	.+216    	; 0x16ba <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    15e2:	a8 e3       	ldi	r26, 0x38	; 56
    15e4:	b0 e0       	ldi	r27, 0x00	; 0
    15e6:	e8 e3       	ldi	r30, 0x38	; 56
    15e8:	f0 e0       	ldi	r31, 0x00	; 0
    15ea:	80 81       	ld	r24, Z
    15ec:	48 2f       	mov	r20, r24
    15ee:	8a 81       	ldd	r24, Y+2	; 0x02
    15f0:	28 2f       	mov	r18, r24
    15f2:	30 e0       	ldi	r19, 0x00	; 0
    15f4:	81 e0       	ldi	r24, 0x01	; 1
    15f6:	90 e0       	ldi	r25, 0x00	; 0
    15f8:	02 2e       	mov	r0, r18
    15fa:	02 c0       	rjmp	.+4      	; 0x1600 <GPIO_writePin+0x10c>
    15fc:	88 0f       	add	r24, r24
    15fe:	99 1f       	adc	r25, r25
    1600:	0a 94       	dec	r0
    1602:	e2 f7       	brpl	.-8      	; 0x15fc <GPIO_writePin+0x108>
    1604:	80 95       	com	r24
    1606:	84 23       	and	r24, r20
    1608:	8c 93       	st	X, r24
    160a:	57 c0       	rjmp	.+174    	; 0x16ba <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    160c:	8b 81       	ldd	r24, Y+3	; 0x03
    160e:	81 30       	cpi	r24, 0x01	; 1
    1610:	a1 f4       	brne	.+40     	; 0x163a <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1612:	a5 e3       	ldi	r26, 0x35	; 53
    1614:	b0 e0       	ldi	r27, 0x00	; 0
    1616:	e5 e3       	ldi	r30, 0x35	; 53
    1618:	f0 e0       	ldi	r31, 0x00	; 0
    161a:	80 81       	ld	r24, Z
    161c:	48 2f       	mov	r20, r24
    161e:	8a 81       	ldd	r24, Y+2	; 0x02
    1620:	28 2f       	mov	r18, r24
    1622:	30 e0       	ldi	r19, 0x00	; 0
    1624:	81 e0       	ldi	r24, 0x01	; 1
    1626:	90 e0       	ldi	r25, 0x00	; 0
    1628:	02 2e       	mov	r0, r18
    162a:	02 c0       	rjmp	.+4      	; 0x1630 <GPIO_writePin+0x13c>
    162c:	88 0f       	add	r24, r24
    162e:	99 1f       	adc	r25, r25
    1630:	0a 94       	dec	r0
    1632:	e2 f7       	brpl	.-8      	; 0x162c <GPIO_writePin+0x138>
    1634:	84 2b       	or	r24, r20
    1636:	8c 93       	st	X, r24
    1638:	40 c0       	rjmp	.+128    	; 0x16ba <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    163a:	a5 e3       	ldi	r26, 0x35	; 53
    163c:	b0 e0       	ldi	r27, 0x00	; 0
    163e:	e5 e3       	ldi	r30, 0x35	; 53
    1640:	f0 e0       	ldi	r31, 0x00	; 0
    1642:	80 81       	ld	r24, Z
    1644:	48 2f       	mov	r20, r24
    1646:	8a 81       	ldd	r24, Y+2	; 0x02
    1648:	28 2f       	mov	r18, r24
    164a:	30 e0       	ldi	r19, 0x00	; 0
    164c:	81 e0       	ldi	r24, 0x01	; 1
    164e:	90 e0       	ldi	r25, 0x00	; 0
    1650:	02 2e       	mov	r0, r18
    1652:	02 c0       	rjmp	.+4      	; 0x1658 <GPIO_writePin+0x164>
    1654:	88 0f       	add	r24, r24
    1656:	99 1f       	adc	r25, r25
    1658:	0a 94       	dec	r0
    165a:	e2 f7       	brpl	.-8      	; 0x1654 <GPIO_writePin+0x160>
    165c:	80 95       	com	r24
    165e:	84 23       	and	r24, r20
    1660:	8c 93       	st	X, r24
    1662:	2b c0       	rjmp	.+86     	; 0x16ba <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1664:	8b 81       	ldd	r24, Y+3	; 0x03
    1666:	81 30       	cpi	r24, 0x01	; 1
    1668:	a1 f4       	brne	.+40     	; 0x1692 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    166a:	a2 e3       	ldi	r26, 0x32	; 50
    166c:	b0 e0       	ldi	r27, 0x00	; 0
    166e:	e2 e3       	ldi	r30, 0x32	; 50
    1670:	f0 e0       	ldi	r31, 0x00	; 0
    1672:	80 81       	ld	r24, Z
    1674:	48 2f       	mov	r20, r24
    1676:	8a 81       	ldd	r24, Y+2	; 0x02
    1678:	28 2f       	mov	r18, r24
    167a:	30 e0       	ldi	r19, 0x00	; 0
    167c:	81 e0       	ldi	r24, 0x01	; 1
    167e:	90 e0       	ldi	r25, 0x00	; 0
    1680:	02 2e       	mov	r0, r18
    1682:	02 c0       	rjmp	.+4      	; 0x1688 <GPIO_writePin+0x194>
    1684:	88 0f       	add	r24, r24
    1686:	99 1f       	adc	r25, r25
    1688:	0a 94       	dec	r0
    168a:	e2 f7       	brpl	.-8      	; 0x1684 <GPIO_writePin+0x190>
    168c:	84 2b       	or	r24, r20
    168e:	8c 93       	st	X, r24
    1690:	14 c0       	rjmp	.+40     	; 0x16ba <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1692:	a2 e3       	ldi	r26, 0x32	; 50
    1694:	b0 e0       	ldi	r27, 0x00	; 0
    1696:	e2 e3       	ldi	r30, 0x32	; 50
    1698:	f0 e0       	ldi	r31, 0x00	; 0
    169a:	80 81       	ld	r24, Z
    169c:	48 2f       	mov	r20, r24
    169e:	8a 81       	ldd	r24, Y+2	; 0x02
    16a0:	28 2f       	mov	r18, r24
    16a2:	30 e0       	ldi	r19, 0x00	; 0
    16a4:	81 e0       	ldi	r24, 0x01	; 1
    16a6:	90 e0       	ldi	r25, 0x00	; 0
    16a8:	02 2e       	mov	r0, r18
    16aa:	02 c0       	rjmp	.+4      	; 0x16b0 <GPIO_writePin+0x1bc>
    16ac:	88 0f       	add	r24, r24
    16ae:	99 1f       	adc	r25, r25
    16b0:	0a 94       	dec	r0
    16b2:	e2 f7       	brpl	.-8      	; 0x16ac <GPIO_writePin+0x1b8>
    16b4:	80 95       	com	r24
    16b6:	84 23       	and	r24, r20
    16b8:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    16ba:	0f 90       	pop	r0
    16bc:	0f 90       	pop	r0
    16be:	0f 90       	pop	r0
    16c0:	0f 90       	pop	r0
    16c2:	0f 90       	pop	r0
    16c4:	cf 91       	pop	r28
    16c6:	df 91       	pop	r29
    16c8:	08 95       	ret

000016ca <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    16ca:	df 93       	push	r29
    16cc:	cf 93       	push	r28
    16ce:	00 d0       	rcall	.+0      	; 0x16d0 <GPIO_readPin+0x6>
    16d0:	00 d0       	rcall	.+0      	; 0x16d2 <GPIO_readPin+0x8>
    16d2:	0f 92       	push	r0
    16d4:	cd b7       	in	r28, 0x3d	; 61
    16d6:	de b7       	in	r29, 0x3e	; 62
    16d8:	8a 83       	std	Y+2, r24	; 0x02
    16da:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    16dc:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    16de:	8b 81       	ldd	r24, Y+3	; 0x03
    16e0:	88 30       	cpi	r24, 0x08	; 8
    16e2:	08 f0       	brcs	.+2      	; 0x16e6 <GPIO_readPin+0x1c>
    16e4:	84 c0       	rjmp	.+264    	; 0x17ee <GPIO_readPin+0x124>
    16e6:	8a 81       	ldd	r24, Y+2	; 0x02
    16e8:	84 30       	cpi	r24, 0x04	; 4
    16ea:	08 f0       	brcs	.+2      	; 0x16ee <GPIO_readPin+0x24>
    16ec:	80 c0       	rjmp	.+256    	; 0x17ee <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    16ee:	8a 81       	ldd	r24, Y+2	; 0x02
    16f0:	28 2f       	mov	r18, r24
    16f2:	30 e0       	ldi	r19, 0x00	; 0
    16f4:	3d 83       	std	Y+5, r19	; 0x05
    16f6:	2c 83       	std	Y+4, r18	; 0x04
    16f8:	4c 81       	ldd	r20, Y+4	; 0x04
    16fa:	5d 81       	ldd	r21, Y+5	; 0x05
    16fc:	41 30       	cpi	r20, 0x01	; 1
    16fe:	51 05       	cpc	r21, r1
    1700:	79 f1       	breq	.+94     	; 0x1760 <GPIO_readPin+0x96>
    1702:	8c 81       	ldd	r24, Y+4	; 0x04
    1704:	9d 81       	ldd	r25, Y+5	; 0x05
    1706:	82 30       	cpi	r24, 0x02	; 2
    1708:	91 05       	cpc	r25, r1
    170a:	34 f4       	brge	.+12     	; 0x1718 <GPIO_readPin+0x4e>
    170c:	2c 81       	ldd	r18, Y+4	; 0x04
    170e:	3d 81       	ldd	r19, Y+5	; 0x05
    1710:	21 15       	cp	r18, r1
    1712:	31 05       	cpc	r19, r1
    1714:	69 f0       	breq	.+26     	; 0x1730 <GPIO_readPin+0x66>
    1716:	6b c0       	rjmp	.+214    	; 0x17ee <GPIO_readPin+0x124>
    1718:	4c 81       	ldd	r20, Y+4	; 0x04
    171a:	5d 81       	ldd	r21, Y+5	; 0x05
    171c:	42 30       	cpi	r20, 0x02	; 2
    171e:	51 05       	cpc	r21, r1
    1720:	b9 f1       	breq	.+110    	; 0x1790 <GPIO_readPin+0xc6>
    1722:	8c 81       	ldd	r24, Y+4	; 0x04
    1724:	9d 81       	ldd	r25, Y+5	; 0x05
    1726:	83 30       	cpi	r24, 0x03	; 3
    1728:	91 05       	cpc	r25, r1
    172a:	09 f4       	brne	.+2      	; 0x172e <GPIO_readPin+0x64>
    172c:	49 c0       	rjmp	.+146    	; 0x17c0 <GPIO_readPin+0xf6>
    172e:	5f c0       	rjmp	.+190    	; 0x17ee <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1730:	e9 e3       	ldi	r30, 0x39	; 57
    1732:	f0 e0       	ldi	r31, 0x00	; 0
    1734:	80 81       	ld	r24, Z
    1736:	28 2f       	mov	r18, r24
    1738:	30 e0       	ldi	r19, 0x00	; 0
    173a:	8b 81       	ldd	r24, Y+3	; 0x03
    173c:	88 2f       	mov	r24, r24
    173e:	90 e0       	ldi	r25, 0x00	; 0
    1740:	a9 01       	movw	r20, r18
    1742:	02 c0       	rjmp	.+4      	; 0x1748 <GPIO_readPin+0x7e>
    1744:	55 95       	asr	r21
    1746:	47 95       	ror	r20
    1748:	8a 95       	dec	r24
    174a:	e2 f7       	brpl	.-8      	; 0x1744 <GPIO_readPin+0x7a>
    174c:	ca 01       	movw	r24, r20
    174e:	81 70       	andi	r24, 0x01	; 1
    1750:	90 70       	andi	r25, 0x00	; 0
    1752:	88 23       	and	r24, r24
    1754:	19 f0       	breq	.+6      	; 0x175c <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1756:	81 e0       	ldi	r24, 0x01	; 1
    1758:	89 83       	std	Y+1, r24	; 0x01
    175a:	49 c0       	rjmp	.+146    	; 0x17ee <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    175c:	19 82       	std	Y+1, r1	; 0x01
    175e:	47 c0       	rjmp	.+142    	; 0x17ee <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1760:	e6 e3       	ldi	r30, 0x36	; 54
    1762:	f0 e0       	ldi	r31, 0x00	; 0
    1764:	80 81       	ld	r24, Z
    1766:	28 2f       	mov	r18, r24
    1768:	30 e0       	ldi	r19, 0x00	; 0
    176a:	8b 81       	ldd	r24, Y+3	; 0x03
    176c:	88 2f       	mov	r24, r24
    176e:	90 e0       	ldi	r25, 0x00	; 0
    1770:	a9 01       	movw	r20, r18
    1772:	02 c0       	rjmp	.+4      	; 0x1778 <GPIO_readPin+0xae>
    1774:	55 95       	asr	r21
    1776:	47 95       	ror	r20
    1778:	8a 95       	dec	r24
    177a:	e2 f7       	brpl	.-8      	; 0x1774 <GPIO_readPin+0xaa>
    177c:	ca 01       	movw	r24, r20
    177e:	81 70       	andi	r24, 0x01	; 1
    1780:	90 70       	andi	r25, 0x00	; 0
    1782:	88 23       	and	r24, r24
    1784:	19 f0       	breq	.+6      	; 0x178c <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1786:	81 e0       	ldi	r24, 0x01	; 1
    1788:	89 83       	std	Y+1, r24	; 0x01
    178a:	31 c0       	rjmp	.+98     	; 0x17ee <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    178c:	19 82       	std	Y+1, r1	; 0x01
    178e:	2f c0       	rjmp	.+94     	; 0x17ee <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1790:	e3 e3       	ldi	r30, 0x33	; 51
    1792:	f0 e0       	ldi	r31, 0x00	; 0
    1794:	80 81       	ld	r24, Z
    1796:	28 2f       	mov	r18, r24
    1798:	30 e0       	ldi	r19, 0x00	; 0
    179a:	8b 81       	ldd	r24, Y+3	; 0x03
    179c:	88 2f       	mov	r24, r24
    179e:	90 e0       	ldi	r25, 0x00	; 0
    17a0:	a9 01       	movw	r20, r18
    17a2:	02 c0       	rjmp	.+4      	; 0x17a8 <GPIO_readPin+0xde>
    17a4:	55 95       	asr	r21
    17a6:	47 95       	ror	r20
    17a8:	8a 95       	dec	r24
    17aa:	e2 f7       	brpl	.-8      	; 0x17a4 <GPIO_readPin+0xda>
    17ac:	ca 01       	movw	r24, r20
    17ae:	81 70       	andi	r24, 0x01	; 1
    17b0:	90 70       	andi	r25, 0x00	; 0
    17b2:	88 23       	and	r24, r24
    17b4:	19 f0       	breq	.+6      	; 0x17bc <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    17b6:	81 e0       	ldi	r24, 0x01	; 1
    17b8:	89 83       	std	Y+1, r24	; 0x01
    17ba:	19 c0       	rjmp	.+50     	; 0x17ee <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    17bc:	19 82       	std	Y+1, r1	; 0x01
    17be:	17 c0       	rjmp	.+46     	; 0x17ee <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    17c0:	e0 e3       	ldi	r30, 0x30	; 48
    17c2:	f0 e0       	ldi	r31, 0x00	; 0
    17c4:	80 81       	ld	r24, Z
    17c6:	28 2f       	mov	r18, r24
    17c8:	30 e0       	ldi	r19, 0x00	; 0
    17ca:	8b 81       	ldd	r24, Y+3	; 0x03
    17cc:	88 2f       	mov	r24, r24
    17ce:	90 e0       	ldi	r25, 0x00	; 0
    17d0:	a9 01       	movw	r20, r18
    17d2:	02 c0       	rjmp	.+4      	; 0x17d8 <GPIO_readPin+0x10e>
    17d4:	55 95       	asr	r21
    17d6:	47 95       	ror	r20
    17d8:	8a 95       	dec	r24
    17da:	e2 f7       	brpl	.-8      	; 0x17d4 <GPIO_readPin+0x10a>
    17dc:	ca 01       	movw	r24, r20
    17de:	81 70       	andi	r24, 0x01	; 1
    17e0:	90 70       	andi	r25, 0x00	; 0
    17e2:	88 23       	and	r24, r24
    17e4:	19 f0       	breq	.+6      	; 0x17ec <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    17e6:	81 e0       	ldi	r24, 0x01	; 1
    17e8:	89 83       	std	Y+1, r24	; 0x01
    17ea:	01 c0       	rjmp	.+2      	; 0x17ee <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    17ec:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    17ee:	89 81       	ldd	r24, Y+1	; 0x01
}
    17f0:	0f 90       	pop	r0
    17f2:	0f 90       	pop	r0
    17f4:	0f 90       	pop	r0
    17f6:	0f 90       	pop	r0
    17f8:	0f 90       	pop	r0
    17fa:	cf 91       	pop	r28
    17fc:	df 91       	pop	r29
    17fe:	08 95       	ret

00001800 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1800:	df 93       	push	r29
    1802:	cf 93       	push	r28
    1804:	00 d0       	rcall	.+0      	; 0x1806 <GPIO_setupPortDirection+0x6>
    1806:	00 d0       	rcall	.+0      	; 0x1808 <GPIO_setupPortDirection+0x8>
    1808:	cd b7       	in	r28, 0x3d	; 61
    180a:	de b7       	in	r29, 0x3e	; 62
    180c:	89 83       	std	Y+1, r24	; 0x01
    180e:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1810:	89 81       	ldd	r24, Y+1	; 0x01
    1812:	84 30       	cpi	r24, 0x04	; 4
    1814:	90 f5       	brcc	.+100    	; 0x187a <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1816:	89 81       	ldd	r24, Y+1	; 0x01
    1818:	28 2f       	mov	r18, r24
    181a:	30 e0       	ldi	r19, 0x00	; 0
    181c:	3c 83       	std	Y+4, r19	; 0x04
    181e:	2b 83       	std	Y+3, r18	; 0x03
    1820:	8b 81       	ldd	r24, Y+3	; 0x03
    1822:	9c 81       	ldd	r25, Y+4	; 0x04
    1824:	81 30       	cpi	r24, 0x01	; 1
    1826:	91 05       	cpc	r25, r1
    1828:	d1 f0       	breq	.+52     	; 0x185e <GPIO_setupPortDirection+0x5e>
    182a:	2b 81       	ldd	r18, Y+3	; 0x03
    182c:	3c 81       	ldd	r19, Y+4	; 0x04
    182e:	22 30       	cpi	r18, 0x02	; 2
    1830:	31 05       	cpc	r19, r1
    1832:	2c f4       	brge	.+10     	; 0x183e <GPIO_setupPortDirection+0x3e>
    1834:	8b 81       	ldd	r24, Y+3	; 0x03
    1836:	9c 81       	ldd	r25, Y+4	; 0x04
    1838:	00 97       	sbiw	r24, 0x00	; 0
    183a:	61 f0       	breq	.+24     	; 0x1854 <GPIO_setupPortDirection+0x54>
    183c:	1e c0       	rjmp	.+60     	; 0x187a <GPIO_setupPortDirection+0x7a>
    183e:	2b 81       	ldd	r18, Y+3	; 0x03
    1840:	3c 81       	ldd	r19, Y+4	; 0x04
    1842:	22 30       	cpi	r18, 0x02	; 2
    1844:	31 05       	cpc	r19, r1
    1846:	81 f0       	breq	.+32     	; 0x1868 <GPIO_setupPortDirection+0x68>
    1848:	8b 81       	ldd	r24, Y+3	; 0x03
    184a:	9c 81       	ldd	r25, Y+4	; 0x04
    184c:	83 30       	cpi	r24, 0x03	; 3
    184e:	91 05       	cpc	r25, r1
    1850:	81 f0       	breq	.+32     	; 0x1872 <GPIO_setupPortDirection+0x72>
    1852:	13 c0       	rjmp	.+38     	; 0x187a <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1854:	ea e3       	ldi	r30, 0x3A	; 58
    1856:	f0 e0       	ldi	r31, 0x00	; 0
    1858:	8a 81       	ldd	r24, Y+2	; 0x02
    185a:	80 83       	st	Z, r24
    185c:	0e c0       	rjmp	.+28     	; 0x187a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    185e:	e7 e3       	ldi	r30, 0x37	; 55
    1860:	f0 e0       	ldi	r31, 0x00	; 0
    1862:	8a 81       	ldd	r24, Y+2	; 0x02
    1864:	80 83       	st	Z, r24
    1866:	09 c0       	rjmp	.+18     	; 0x187a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1868:	e4 e3       	ldi	r30, 0x34	; 52
    186a:	f0 e0       	ldi	r31, 0x00	; 0
    186c:	8a 81       	ldd	r24, Y+2	; 0x02
    186e:	80 83       	st	Z, r24
    1870:	04 c0       	rjmp	.+8      	; 0x187a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1872:	e1 e3       	ldi	r30, 0x31	; 49
    1874:	f0 e0       	ldi	r31, 0x00	; 0
    1876:	8a 81       	ldd	r24, Y+2	; 0x02
    1878:	80 83       	st	Z, r24
			break;
		}
	}
}
    187a:	0f 90       	pop	r0
    187c:	0f 90       	pop	r0
    187e:	0f 90       	pop	r0
    1880:	0f 90       	pop	r0
    1882:	cf 91       	pop	r28
    1884:	df 91       	pop	r29
    1886:	08 95       	ret

00001888 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1888:	df 93       	push	r29
    188a:	cf 93       	push	r28
    188c:	00 d0       	rcall	.+0      	; 0x188e <GPIO_writePort+0x6>
    188e:	00 d0       	rcall	.+0      	; 0x1890 <GPIO_writePort+0x8>
    1890:	cd b7       	in	r28, 0x3d	; 61
    1892:	de b7       	in	r29, 0x3e	; 62
    1894:	89 83       	std	Y+1, r24	; 0x01
    1896:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1898:	89 81       	ldd	r24, Y+1	; 0x01
    189a:	84 30       	cpi	r24, 0x04	; 4
    189c:	90 f5       	brcc	.+100    	; 0x1902 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    189e:	89 81       	ldd	r24, Y+1	; 0x01
    18a0:	28 2f       	mov	r18, r24
    18a2:	30 e0       	ldi	r19, 0x00	; 0
    18a4:	3c 83       	std	Y+4, r19	; 0x04
    18a6:	2b 83       	std	Y+3, r18	; 0x03
    18a8:	8b 81       	ldd	r24, Y+3	; 0x03
    18aa:	9c 81       	ldd	r25, Y+4	; 0x04
    18ac:	81 30       	cpi	r24, 0x01	; 1
    18ae:	91 05       	cpc	r25, r1
    18b0:	d1 f0       	breq	.+52     	; 0x18e6 <GPIO_writePort+0x5e>
    18b2:	2b 81       	ldd	r18, Y+3	; 0x03
    18b4:	3c 81       	ldd	r19, Y+4	; 0x04
    18b6:	22 30       	cpi	r18, 0x02	; 2
    18b8:	31 05       	cpc	r19, r1
    18ba:	2c f4       	brge	.+10     	; 0x18c6 <GPIO_writePort+0x3e>
    18bc:	8b 81       	ldd	r24, Y+3	; 0x03
    18be:	9c 81       	ldd	r25, Y+4	; 0x04
    18c0:	00 97       	sbiw	r24, 0x00	; 0
    18c2:	61 f0       	breq	.+24     	; 0x18dc <GPIO_writePort+0x54>
    18c4:	1e c0       	rjmp	.+60     	; 0x1902 <GPIO_writePort+0x7a>
    18c6:	2b 81       	ldd	r18, Y+3	; 0x03
    18c8:	3c 81       	ldd	r19, Y+4	; 0x04
    18ca:	22 30       	cpi	r18, 0x02	; 2
    18cc:	31 05       	cpc	r19, r1
    18ce:	81 f0       	breq	.+32     	; 0x18f0 <GPIO_writePort+0x68>
    18d0:	8b 81       	ldd	r24, Y+3	; 0x03
    18d2:	9c 81       	ldd	r25, Y+4	; 0x04
    18d4:	83 30       	cpi	r24, 0x03	; 3
    18d6:	91 05       	cpc	r25, r1
    18d8:	81 f0       	breq	.+32     	; 0x18fa <GPIO_writePort+0x72>
    18da:	13 c0       	rjmp	.+38     	; 0x1902 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    18dc:	eb e3       	ldi	r30, 0x3B	; 59
    18de:	f0 e0       	ldi	r31, 0x00	; 0
    18e0:	8a 81       	ldd	r24, Y+2	; 0x02
    18e2:	80 83       	st	Z, r24
    18e4:	0e c0       	rjmp	.+28     	; 0x1902 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    18e6:	e8 e3       	ldi	r30, 0x38	; 56
    18e8:	f0 e0       	ldi	r31, 0x00	; 0
    18ea:	8a 81       	ldd	r24, Y+2	; 0x02
    18ec:	80 83       	st	Z, r24
    18ee:	09 c0       	rjmp	.+18     	; 0x1902 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    18f0:	e5 e3       	ldi	r30, 0x35	; 53
    18f2:	f0 e0       	ldi	r31, 0x00	; 0
    18f4:	8a 81       	ldd	r24, Y+2	; 0x02
    18f6:	80 83       	st	Z, r24
    18f8:	04 c0       	rjmp	.+8      	; 0x1902 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    18fa:	e2 e3       	ldi	r30, 0x32	; 50
    18fc:	f0 e0       	ldi	r31, 0x00	; 0
    18fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1900:	80 83       	st	Z, r24
			break;
		}
	}
}
    1902:	0f 90       	pop	r0
    1904:	0f 90       	pop	r0
    1906:	0f 90       	pop	r0
    1908:	0f 90       	pop	r0
    190a:	cf 91       	pop	r28
    190c:	df 91       	pop	r29
    190e:	08 95       	ret

00001910 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1910:	df 93       	push	r29
    1912:	cf 93       	push	r28
    1914:	00 d0       	rcall	.+0      	; 0x1916 <GPIO_readPort+0x6>
    1916:	00 d0       	rcall	.+0      	; 0x1918 <GPIO_readPort+0x8>
    1918:	cd b7       	in	r28, 0x3d	; 61
    191a:	de b7       	in	r29, 0x3e	; 62
    191c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    191e:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1920:	8a 81       	ldd	r24, Y+2	; 0x02
    1922:	84 30       	cpi	r24, 0x04	; 4
    1924:	90 f5       	brcc	.+100    	; 0x198a <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1926:	8a 81       	ldd	r24, Y+2	; 0x02
    1928:	28 2f       	mov	r18, r24
    192a:	30 e0       	ldi	r19, 0x00	; 0
    192c:	3c 83       	std	Y+4, r19	; 0x04
    192e:	2b 83       	std	Y+3, r18	; 0x03
    1930:	8b 81       	ldd	r24, Y+3	; 0x03
    1932:	9c 81       	ldd	r25, Y+4	; 0x04
    1934:	81 30       	cpi	r24, 0x01	; 1
    1936:	91 05       	cpc	r25, r1
    1938:	d1 f0       	breq	.+52     	; 0x196e <GPIO_readPort+0x5e>
    193a:	2b 81       	ldd	r18, Y+3	; 0x03
    193c:	3c 81       	ldd	r19, Y+4	; 0x04
    193e:	22 30       	cpi	r18, 0x02	; 2
    1940:	31 05       	cpc	r19, r1
    1942:	2c f4       	brge	.+10     	; 0x194e <GPIO_readPort+0x3e>
    1944:	8b 81       	ldd	r24, Y+3	; 0x03
    1946:	9c 81       	ldd	r25, Y+4	; 0x04
    1948:	00 97       	sbiw	r24, 0x00	; 0
    194a:	61 f0       	breq	.+24     	; 0x1964 <GPIO_readPort+0x54>
    194c:	1e c0       	rjmp	.+60     	; 0x198a <GPIO_readPort+0x7a>
    194e:	2b 81       	ldd	r18, Y+3	; 0x03
    1950:	3c 81       	ldd	r19, Y+4	; 0x04
    1952:	22 30       	cpi	r18, 0x02	; 2
    1954:	31 05       	cpc	r19, r1
    1956:	81 f0       	breq	.+32     	; 0x1978 <GPIO_readPort+0x68>
    1958:	8b 81       	ldd	r24, Y+3	; 0x03
    195a:	9c 81       	ldd	r25, Y+4	; 0x04
    195c:	83 30       	cpi	r24, 0x03	; 3
    195e:	91 05       	cpc	r25, r1
    1960:	81 f0       	breq	.+32     	; 0x1982 <GPIO_readPort+0x72>
    1962:	13 c0       	rjmp	.+38     	; 0x198a <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1964:	e9 e3       	ldi	r30, 0x39	; 57
    1966:	f0 e0       	ldi	r31, 0x00	; 0
    1968:	80 81       	ld	r24, Z
    196a:	89 83       	std	Y+1, r24	; 0x01
    196c:	0e c0       	rjmp	.+28     	; 0x198a <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    196e:	e6 e3       	ldi	r30, 0x36	; 54
    1970:	f0 e0       	ldi	r31, 0x00	; 0
    1972:	80 81       	ld	r24, Z
    1974:	89 83       	std	Y+1, r24	; 0x01
    1976:	09 c0       	rjmp	.+18     	; 0x198a <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1978:	e3 e3       	ldi	r30, 0x33	; 51
    197a:	f0 e0       	ldi	r31, 0x00	; 0
    197c:	80 81       	ld	r24, Z
    197e:	89 83       	std	Y+1, r24	; 0x01
    1980:	04 c0       	rjmp	.+8      	; 0x198a <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1982:	e0 e3       	ldi	r30, 0x30	; 48
    1984:	f0 e0       	ldi	r31, 0x00	; 0
    1986:	80 81       	ld	r24, Z
    1988:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    198a:	89 81       	ldd	r24, Y+1	; 0x01
}
    198c:	0f 90       	pop	r0
    198e:	0f 90       	pop	r0
    1990:	0f 90       	pop	r0
    1992:	0f 90       	pop	r0
    1994:	cf 91       	pop	r28
    1996:	df 91       	pop	r29
    1998:	08 95       	ret

0000199a <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    199a:	df 93       	push	r29
    199c:	cf 93       	push	r28
    199e:	cd b7       	in	r28, 0x3d	; 61
    19a0:	de b7       	in	r29, 0x3e	; 62
	/* Configure the direction for RS, RW and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    19a2:	80 e0       	ldi	r24, 0x00	; 0
    19a4:	60 e0       	ldi	r22, 0x00	; 0
    19a6:	41 e0       	ldi	r20, 0x01	; 1
    19a8:	0e 94 8f 09 	call	0x131e	; 0x131e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_OUTPUT);
    19ac:	80 e0       	ldi	r24, 0x00	; 0
    19ae:	61 e0       	ldi	r22, 0x01	; 1
    19b0:	41 e0       	ldi	r20, 0x01	; 1
    19b2:	0e 94 8f 09 	call	0x131e	; 0x131e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    19b6:	80 e0       	ldi	r24, 0x00	; 0
    19b8:	62 e0       	ldi	r22, 0x02	; 2
    19ba:	41 e0       	ldi	r20, 0x01	; 1
    19bc:	0e 94 8f 09 	call	0x131e	; 0x131e <GPIO_setupPinDirection>

	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    19c0:	81 e0       	ldi	r24, 0x01	; 1
    19c2:	6f ef       	ldi	r22, 0xFF	; 255
    19c4:	0e 94 00 0c 	call	0x1800	; 0x1800 <GPIO_setupPortDirection>

	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    19c8:	88 e3       	ldi	r24, 0x38	; 56
    19ca:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <LCD_sendCommand>
	
	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    19ce:	8c e0       	ldi	r24, 0x0C	; 12
    19d0:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <LCD_sendCommand>
	
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    19d4:	81 e0       	ldi	r24, 0x01	; 1
    19d6:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <LCD_sendCommand>
}
    19da:	cf 91       	pop	r28
    19dc:	df 91       	pop	r29
    19de:	08 95       	ret

000019e0 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    19e0:	df 93       	push	r29
    19e2:	cf 93       	push	r28
    19e4:	cd b7       	in	r28, 0x3d	; 61
    19e6:	de b7       	in	r29, 0x3e	; 62
    19e8:	e9 97       	sbiw	r28, 0x39	; 57
    19ea:	0f b6       	in	r0, 0x3f	; 63
    19ec:	f8 94       	cli
    19ee:	de bf       	out	0x3e, r29	; 62
    19f0:	0f be       	out	0x3f, r0	; 63
    19f2:	cd bf       	out	0x3d, r28	; 61
    19f4:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    19f6:	80 e0       	ldi	r24, 0x00	; 0
    19f8:	60 e0       	ldi	r22, 0x00	; 0
    19fa:	40 e0       	ldi	r20, 0x00	; 0
    19fc:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    1a00:	80 e0       	ldi	r24, 0x00	; 0
    1a02:	61 e0       	ldi	r22, 0x01	; 1
    1a04:	40 e0       	ldi	r20, 0x00	; 0
    1a06:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <GPIO_writePin>
    1a0a:	80 e0       	ldi	r24, 0x00	; 0
    1a0c:	90 e0       	ldi	r25, 0x00	; 0
    1a0e:	a0 e8       	ldi	r26, 0x80	; 128
    1a10:	bf e3       	ldi	r27, 0x3F	; 63
    1a12:	8d ab       	std	Y+53, r24	; 0x35
    1a14:	9e ab       	std	Y+54, r25	; 0x36
    1a16:	af ab       	std	Y+55, r26	; 0x37
    1a18:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a1a:	6d a9       	ldd	r22, Y+53	; 0x35
    1a1c:	7e a9       	ldd	r23, Y+54	; 0x36
    1a1e:	8f a9       	ldd	r24, Y+55	; 0x37
    1a20:	98 ad       	ldd	r25, Y+56	; 0x38
    1a22:	20 e0       	ldi	r18, 0x00	; 0
    1a24:	30 e0       	ldi	r19, 0x00	; 0
    1a26:	4a ef       	ldi	r20, 0xFA	; 250
    1a28:	54 e4       	ldi	r21, 0x44	; 68
    1a2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a2e:	dc 01       	movw	r26, r24
    1a30:	cb 01       	movw	r24, r22
    1a32:	89 ab       	std	Y+49, r24	; 0x31
    1a34:	9a ab       	std	Y+50, r25	; 0x32
    1a36:	ab ab       	std	Y+51, r26	; 0x33
    1a38:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1a3a:	69 a9       	ldd	r22, Y+49	; 0x31
    1a3c:	7a a9       	ldd	r23, Y+50	; 0x32
    1a3e:	8b a9       	ldd	r24, Y+51	; 0x33
    1a40:	9c a9       	ldd	r25, Y+52	; 0x34
    1a42:	20 e0       	ldi	r18, 0x00	; 0
    1a44:	30 e0       	ldi	r19, 0x00	; 0
    1a46:	40 e8       	ldi	r20, 0x80	; 128
    1a48:	5f e3       	ldi	r21, 0x3F	; 63
    1a4a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a4e:	88 23       	and	r24, r24
    1a50:	2c f4       	brge	.+10     	; 0x1a5c <LCD_sendCommand+0x7c>
		__ticks = 1;
    1a52:	81 e0       	ldi	r24, 0x01	; 1
    1a54:	90 e0       	ldi	r25, 0x00	; 0
    1a56:	98 ab       	std	Y+48, r25	; 0x30
    1a58:	8f a7       	std	Y+47, r24	; 0x2f
    1a5a:	3f c0       	rjmp	.+126    	; 0x1ada <LCD_sendCommand+0xfa>
	else if (__tmp > 65535)
    1a5c:	69 a9       	ldd	r22, Y+49	; 0x31
    1a5e:	7a a9       	ldd	r23, Y+50	; 0x32
    1a60:	8b a9       	ldd	r24, Y+51	; 0x33
    1a62:	9c a9       	ldd	r25, Y+52	; 0x34
    1a64:	20 e0       	ldi	r18, 0x00	; 0
    1a66:	3f ef       	ldi	r19, 0xFF	; 255
    1a68:	4f e7       	ldi	r20, 0x7F	; 127
    1a6a:	57 e4       	ldi	r21, 0x47	; 71
    1a6c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a70:	18 16       	cp	r1, r24
    1a72:	4c f5       	brge	.+82     	; 0x1ac6 <LCD_sendCommand+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a74:	6d a9       	ldd	r22, Y+53	; 0x35
    1a76:	7e a9       	ldd	r23, Y+54	; 0x36
    1a78:	8f a9       	ldd	r24, Y+55	; 0x37
    1a7a:	98 ad       	ldd	r25, Y+56	; 0x38
    1a7c:	20 e0       	ldi	r18, 0x00	; 0
    1a7e:	30 e0       	ldi	r19, 0x00	; 0
    1a80:	40 e2       	ldi	r20, 0x20	; 32
    1a82:	51 e4       	ldi	r21, 0x41	; 65
    1a84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a88:	dc 01       	movw	r26, r24
    1a8a:	cb 01       	movw	r24, r22
    1a8c:	bc 01       	movw	r22, r24
    1a8e:	cd 01       	movw	r24, r26
    1a90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a94:	dc 01       	movw	r26, r24
    1a96:	cb 01       	movw	r24, r22
    1a98:	98 ab       	std	Y+48, r25	; 0x30
    1a9a:	8f a7       	std	Y+47, r24	; 0x2f
    1a9c:	0f c0       	rjmp	.+30     	; 0x1abc <LCD_sendCommand+0xdc>
    1a9e:	88 ec       	ldi	r24, 0xC8	; 200
    1aa0:	90 e0       	ldi	r25, 0x00	; 0
    1aa2:	9e a7       	std	Y+46, r25	; 0x2e
    1aa4:	8d a7       	std	Y+45, r24	; 0x2d
    1aa6:	8d a5       	ldd	r24, Y+45	; 0x2d
    1aa8:	9e a5       	ldd	r25, Y+46	; 0x2e
    1aaa:	01 97       	sbiw	r24, 0x01	; 1
    1aac:	f1 f7       	brne	.-4      	; 0x1aaa <LCD_sendCommand+0xca>
    1aae:	9e a7       	std	Y+46, r25	; 0x2e
    1ab0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ab2:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ab4:	98 a9       	ldd	r25, Y+48	; 0x30
    1ab6:	01 97       	sbiw	r24, 0x01	; 1
    1ab8:	98 ab       	std	Y+48, r25	; 0x30
    1aba:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1abc:	8f a5       	ldd	r24, Y+47	; 0x2f
    1abe:	98 a9       	ldd	r25, Y+48	; 0x30
    1ac0:	00 97       	sbiw	r24, 0x00	; 0
    1ac2:	69 f7       	brne	.-38     	; 0x1a9e <LCD_sendCommand+0xbe>
    1ac4:	14 c0       	rjmp	.+40     	; 0x1aee <LCD_sendCommand+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ac6:	69 a9       	ldd	r22, Y+49	; 0x31
    1ac8:	7a a9       	ldd	r23, Y+50	; 0x32
    1aca:	8b a9       	ldd	r24, Y+51	; 0x33
    1acc:	9c a9       	ldd	r25, Y+52	; 0x34
    1ace:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ad2:	dc 01       	movw	r26, r24
    1ad4:	cb 01       	movw	r24, r22
    1ad6:	98 ab       	std	Y+48, r25	; 0x30
    1ad8:	8f a7       	std	Y+47, r24	; 0x2f
    1ada:	8f a5       	ldd	r24, Y+47	; 0x2f
    1adc:	98 a9       	ldd	r25, Y+48	; 0x30
    1ade:	9c a7       	std	Y+44, r25	; 0x2c
    1ae0:	8b a7       	std	Y+43, r24	; 0x2b
    1ae2:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ae4:	9c a5       	ldd	r25, Y+44	; 0x2c
    1ae6:	01 97       	sbiw	r24, 0x01	; 1
    1ae8:	f1 f7       	brne	.-4      	; 0x1ae6 <LCD_sendCommand+0x106>
    1aea:	9c a7       	std	Y+44, r25	; 0x2c
    1aec:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1aee:	80 e0       	ldi	r24, 0x00	; 0
    1af0:	62 e0       	ldi	r22, 0x02	; 2
    1af2:	41 e0       	ldi	r20, 0x01	; 1
    1af4:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <GPIO_writePin>
    1af8:	80 e0       	ldi	r24, 0x00	; 0
    1afa:	90 e0       	ldi	r25, 0x00	; 0
    1afc:	a0 e8       	ldi	r26, 0x80	; 128
    1afe:	bf e3       	ldi	r27, 0x3F	; 63
    1b00:	8f a3       	std	Y+39, r24	; 0x27
    1b02:	98 a7       	std	Y+40, r25	; 0x28
    1b04:	a9 a7       	std	Y+41, r26	; 0x29
    1b06:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b08:	6f a1       	ldd	r22, Y+39	; 0x27
    1b0a:	78 a5       	ldd	r23, Y+40	; 0x28
    1b0c:	89 a5       	ldd	r24, Y+41	; 0x29
    1b0e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b10:	20 e0       	ldi	r18, 0x00	; 0
    1b12:	30 e0       	ldi	r19, 0x00	; 0
    1b14:	4a ef       	ldi	r20, 0xFA	; 250
    1b16:	54 e4       	ldi	r21, 0x44	; 68
    1b18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b1c:	dc 01       	movw	r26, r24
    1b1e:	cb 01       	movw	r24, r22
    1b20:	8b a3       	std	Y+35, r24	; 0x23
    1b22:	9c a3       	std	Y+36, r25	; 0x24
    1b24:	ad a3       	std	Y+37, r26	; 0x25
    1b26:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1b28:	6b a1       	ldd	r22, Y+35	; 0x23
    1b2a:	7c a1       	ldd	r23, Y+36	; 0x24
    1b2c:	8d a1       	ldd	r24, Y+37	; 0x25
    1b2e:	9e a1       	ldd	r25, Y+38	; 0x26
    1b30:	20 e0       	ldi	r18, 0x00	; 0
    1b32:	30 e0       	ldi	r19, 0x00	; 0
    1b34:	40 e8       	ldi	r20, 0x80	; 128
    1b36:	5f e3       	ldi	r21, 0x3F	; 63
    1b38:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b3c:	88 23       	and	r24, r24
    1b3e:	2c f4       	brge	.+10     	; 0x1b4a <LCD_sendCommand+0x16a>
		__ticks = 1;
    1b40:	81 e0       	ldi	r24, 0x01	; 1
    1b42:	90 e0       	ldi	r25, 0x00	; 0
    1b44:	9a a3       	std	Y+34, r25	; 0x22
    1b46:	89 a3       	std	Y+33, r24	; 0x21
    1b48:	3f c0       	rjmp	.+126    	; 0x1bc8 <LCD_sendCommand+0x1e8>
	else if (__tmp > 65535)
    1b4a:	6b a1       	ldd	r22, Y+35	; 0x23
    1b4c:	7c a1       	ldd	r23, Y+36	; 0x24
    1b4e:	8d a1       	ldd	r24, Y+37	; 0x25
    1b50:	9e a1       	ldd	r25, Y+38	; 0x26
    1b52:	20 e0       	ldi	r18, 0x00	; 0
    1b54:	3f ef       	ldi	r19, 0xFF	; 255
    1b56:	4f e7       	ldi	r20, 0x7F	; 127
    1b58:	57 e4       	ldi	r21, 0x47	; 71
    1b5a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b5e:	18 16       	cp	r1, r24
    1b60:	4c f5       	brge	.+82     	; 0x1bb4 <LCD_sendCommand+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b62:	6f a1       	ldd	r22, Y+39	; 0x27
    1b64:	78 a5       	ldd	r23, Y+40	; 0x28
    1b66:	89 a5       	ldd	r24, Y+41	; 0x29
    1b68:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b6a:	20 e0       	ldi	r18, 0x00	; 0
    1b6c:	30 e0       	ldi	r19, 0x00	; 0
    1b6e:	40 e2       	ldi	r20, 0x20	; 32
    1b70:	51 e4       	ldi	r21, 0x41	; 65
    1b72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b76:	dc 01       	movw	r26, r24
    1b78:	cb 01       	movw	r24, r22
    1b7a:	bc 01       	movw	r22, r24
    1b7c:	cd 01       	movw	r24, r26
    1b7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b82:	dc 01       	movw	r26, r24
    1b84:	cb 01       	movw	r24, r22
    1b86:	9a a3       	std	Y+34, r25	; 0x22
    1b88:	89 a3       	std	Y+33, r24	; 0x21
    1b8a:	0f c0       	rjmp	.+30     	; 0x1baa <LCD_sendCommand+0x1ca>
    1b8c:	88 ec       	ldi	r24, 0xC8	; 200
    1b8e:	90 e0       	ldi	r25, 0x00	; 0
    1b90:	98 a3       	std	Y+32, r25	; 0x20
    1b92:	8f 8f       	std	Y+31, r24	; 0x1f
    1b94:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1b96:	98 a1       	ldd	r25, Y+32	; 0x20
    1b98:	01 97       	sbiw	r24, 0x01	; 1
    1b9a:	f1 f7       	brne	.-4      	; 0x1b98 <LCD_sendCommand+0x1b8>
    1b9c:	98 a3       	std	Y+32, r25	; 0x20
    1b9e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ba0:	89 a1       	ldd	r24, Y+33	; 0x21
    1ba2:	9a a1       	ldd	r25, Y+34	; 0x22
    1ba4:	01 97       	sbiw	r24, 0x01	; 1
    1ba6:	9a a3       	std	Y+34, r25	; 0x22
    1ba8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1baa:	89 a1       	ldd	r24, Y+33	; 0x21
    1bac:	9a a1       	ldd	r25, Y+34	; 0x22
    1bae:	00 97       	sbiw	r24, 0x00	; 0
    1bb0:	69 f7       	brne	.-38     	; 0x1b8c <LCD_sendCommand+0x1ac>
    1bb2:	14 c0       	rjmp	.+40     	; 0x1bdc <LCD_sendCommand+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bb4:	6b a1       	ldd	r22, Y+35	; 0x23
    1bb6:	7c a1       	ldd	r23, Y+36	; 0x24
    1bb8:	8d a1       	ldd	r24, Y+37	; 0x25
    1bba:	9e a1       	ldd	r25, Y+38	; 0x26
    1bbc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bc0:	dc 01       	movw	r26, r24
    1bc2:	cb 01       	movw	r24, r22
    1bc4:	9a a3       	std	Y+34, r25	; 0x22
    1bc6:	89 a3       	std	Y+33, r24	; 0x21
    1bc8:	89 a1       	ldd	r24, Y+33	; 0x21
    1bca:	9a a1       	ldd	r25, Y+34	; 0x22
    1bcc:	9e 8f       	std	Y+30, r25	; 0x1e
    1bce:	8d 8f       	std	Y+29, r24	; 0x1d
    1bd0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1bd2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1bd4:	01 97       	sbiw	r24, 0x01	; 1
    1bd6:	f1 f7       	brne	.-4      	; 0x1bd4 <LCD_sendCommand+0x1f4>
    1bd8:	9e 8f       	std	Y+30, r25	; 0x1e
    1bda:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    1bdc:	81 e0       	ldi	r24, 0x01	; 1
    1bde:	69 ad       	ldd	r22, Y+57	; 0x39
    1be0:	0e 94 44 0c 	call	0x1888	; 0x1888 <GPIO_writePort>
    1be4:	80 e0       	ldi	r24, 0x00	; 0
    1be6:	90 e0       	ldi	r25, 0x00	; 0
    1be8:	a0 e8       	ldi	r26, 0x80	; 128
    1bea:	bf e3       	ldi	r27, 0x3F	; 63
    1bec:	89 8f       	std	Y+25, r24	; 0x19
    1bee:	9a 8f       	std	Y+26, r25	; 0x1a
    1bf0:	ab 8f       	std	Y+27, r26	; 0x1b
    1bf2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bf4:	69 8d       	ldd	r22, Y+25	; 0x19
    1bf6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1bf8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1bfa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1bfc:	20 e0       	ldi	r18, 0x00	; 0
    1bfe:	30 e0       	ldi	r19, 0x00	; 0
    1c00:	4a ef       	ldi	r20, 0xFA	; 250
    1c02:	54 e4       	ldi	r21, 0x44	; 68
    1c04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c08:	dc 01       	movw	r26, r24
    1c0a:	cb 01       	movw	r24, r22
    1c0c:	8d 8b       	std	Y+21, r24	; 0x15
    1c0e:	9e 8b       	std	Y+22, r25	; 0x16
    1c10:	af 8b       	std	Y+23, r26	; 0x17
    1c12:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1c14:	6d 89       	ldd	r22, Y+21	; 0x15
    1c16:	7e 89       	ldd	r23, Y+22	; 0x16
    1c18:	8f 89       	ldd	r24, Y+23	; 0x17
    1c1a:	98 8d       	ldd	r25, Y+24	; 0x18
    1c1c:	20 e0       	ldi	r18, 0x00	; 0
    1c1e:	30 e0       	ldi	r19, 0x00	; 0
    1c20:	40 e8       	ldi	r20, 0x80	; 128
    1c22:	5f e3       	ldi	r21, 0x3F	; 63
    1c24:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c28:	88 23       	and	r24, r24
    1c2a:	2c f4       	brge	.+10     	; 0x1c36 <LCD_sendCommand+0x256>
		__ticks = 1;
    1c2c:	81 e0       	ldi	r24, 0x01	; 1
    1c2e:	90 e0       	ldi	r25, 0x00	; 0
    1c30:	9c 8b       	std	Y+20, r25	; 0x14
    1c32:	8b 8b       	std	Y+19, r24	; 0x13
    1c34:	3f c0       	rjmp	.+126    	; 0x1cb4 <LCD_sendCommand+0x2d4>
	else if (__tmp > 65535)
    1c36:	6d 89       	ldd	r22, Y+21	; 0x15
    1c38:	7e 89       	ldd	r23, Y+22	; 0x16
    1c3a:	8f 89       	ldd	r24, Y+23	; 0x17
    1c3c:	98 8d       	ldd	r25, Y+24	; 0x18
    1c3e:	20 e0       	ldi	r18, 0x00	; 0
    1c40:	3f ef       	ldi	r19, 0xFF	; 255
    1c42:	4f e7       	ldi	r20, 0x7F	; 127
    1c44:	57 e4       	ldi	r21, 0x47	; 71
    1c46:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c4a:	18 16       	cp	r1, r24
    1c4c:	4c f5       	brge	.+82     	; 0x1ca0 <LCD_sendCommand+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c4e:	69 8d       	ldd	r22, Y+25	; 0x19
    1c50:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c52:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c54:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c56:	20 e0       	ldi	r18, 0x00	; 0
    1c58:	30 e0       	ldi	r19, 0x00	; 0
    1c5a:	40 e2       	ldi	r20, 0x20	; 32
    1c5c:	51 e4       	ldi	r21, 0x41	; 65
    1c5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c62:	dc 01       	movw	r26, r24
    1c64:	cb 01       	movw	r24, r22
    1c66:	bc 01       	movw	r22, r24
    1c68:	cd 01       	movw	r24, r26
    1c6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c6e:	dc 01       	movw	r26, r24
    1c70:	cb 01       	movw	r24, r22
    1c72:	9c 8b       	std	Y+20, r25	; 0x14
    1c74:	8b 8b       	std	Y+19, r24	; 0x13
    1c76:	0f c0       	rjmp	.+30     	; 0x1c96 <LCD_sendCommand+0x2b6>
    1c78:	88 ec       	ldi	r24, 0xC8	; 200
    1c7a:	90 e0       	ldi	r25, 0x00	; 0
    1c7c:	9a 8b       	std	Y+18, r25	; 0x12
    1c7e:	89 8b       	std	Y+17, r24	; 0x11
    1c80:	89 89       	ldd	r24, Y+17	; 0x11
    1c82:	9a 89       	ldd	r25, Y+18	; 0x12
    1c84:	01 97       	sbiw	r24, 0x01	; 1
    1c86:	f1 f7       	brne	.-4      	; 0x1c84 <LCD_sendCommand+0x2a4>
    1c88:	9a 8b       	std	Y+18, r25	; 0x12
    1c8a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c8c:	8b 89       	ldd	r24, Y+19	; 0x13
    1c8e:	9c 89       	ldd	r25, Y+20	; 0x14
    1c90:	01 97       	sbiw	r24, 0x01	; 1
    1c92:	9c 8b       	std	Y+20, r25	; 0x14
    1c94:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c96:	8b 89       	ldd	r24, Y+19	; 0x13
    1c98:	9c 89       	ldd	r25, Y+20	; 0x14
    1c9a:	00 97       	sbiw	r24, 0x00	; 0
    1c9c:	69 f7       	brne	.-38     	; 0x1c78 <LCD_sendCommand+0x298>
    1c9e:	14 c0       	rjmp	.+40     	; 0x1cc8 <LCD_sendCommand+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ca0:	6d 89       	ldd	r22, Y+21	; 0x15
    1ca2:	7e 89       	ldd	r23, Y+22	; 0x16
    1ca4:	8f 89       	ldd	r24, Y+23	; 0x17
    1ca6:	98 8d       	ldd	r25, Y+24	; 0x18
    1ca8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cac:	dc 01       	movw	r26, r24
    1cae:	cb 01       	movw	r24, r22
    1cb0:	9c 8b       	std	Y+20, r25	; 0x14
    1cb2:	8b 8b       	std	Y+19, r24	; 0x13
    1cb4:	8b 89       	ldd	r24, Y+19	; 0x13
    1cb6:	9c 89       	ldd	r25, Y+20	; 0x14
    1cb8:	98 8b       	std	Y+16, r25	; 0x10
    1cba:	8f 87       	std	Y+15, r24	; 0x0f
    1cbc:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cbe:	98 89       	ldd	r25, Y+16	; 0x10
    1cc0:	01 97       	sbiw	r24, 0x01	; 1
    1cc2:	f1 f7       	brne	.-4      	; 0x1cc0 <LCD_sendCommand+0x2e0>
    1cc4:	98 8b       	std	Y+16, r25	; 0x10
    1cc6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1cc8:	80 e0       	ldi	r24, 0x00	; 0
    1cca:	62 e0       	ldi	r22, 0x02	; 2
    1ccc:	40 e0       	ldi	r20, 0x00	; 0
    1cce:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <GPIO_writePin>
    1cd2:	80 e0       	ldi	r24, 0x00	; 0
    1cd4:	90 e0       	ldi	r25, 0x00	; 0
    1cd6:	a0 e8       	ldi	r26, 0x80	; 128
    1cd8:	bf e3       	ldi	r27, 0x3F	; 63
    1cda:	8b 87       	std	Y+11, r24	; 0x0b
    1cdc:	9c 87       	std	Y+12, r25	; 0x0c
    1cde:	ad 87       	std	Y+13, r26	; 0x0d
    1ce0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ce2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ce4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ce6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ce8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cea:	20 e0       	ldi	r18, 0x00	; 0
    1cec:	30 e0       	ldi	r19, 0x00	; 0
    1cee:	4a ef       	ldi	r20, 0xFA	; 250
    1cf0:	54 e4       	ldi	r21, 0x44	; 68
    1cf2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cf6:	dc 01       	movw	r26, r24
    1cf8:	cb 01       	movw	r24, r22
    1cfa:	8f 83       	std	Y+7, r24	; 0x07
    1cfc:	98 87       	std	Y+8, r25	; 0x08
    1cfe:	a9 87       	std	Y+9, r26	; 0x09
    1d00:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d02:	6f 81       	ldd	r22, Y+7	; 0x07
    1d04:	78 85       	ldd	r23, Y+8	; 0x08
    1d06:	89 85       	ldd	r24, Y+9	; 0x09
    1d08:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d0a:	20 e0       	ldi	r18, 0x00	; 0
    1d0c:	30 e0       	ldi	r19, 0x00	; 0
    1d0e:	40 e8       	ldi	r20, 0x80	; 128
    1d10:	5f e3       	ldi	r21, 0x3F	; 63
    1d12:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d16:	88 23       	and	r24, r24
    1d18:	2c f4       	brge	.+10     	; 0x1d24 <LCD_sendCommand+0x344>
		__ticks = 1;
    1d1a:	81 e0       	ldi	r24, 0x01	; 1
    1d1c:	90 e0       	ldi	r25, 0x00	; 0
    1d1e:	9e 83       	std	Y+6, r25	; 0x06
    1d20:	8d 83       	std	Y+5, r24	; 0x05
    1d22:	3f c0       	rjmp	.+126    	; 0x1da2 <LCD_sendCommand+0x3c2>
	else if (__tmp > 65535)
    1d24:	6f 81       	ldd	r22, Y+7	; 0x07
    1d26:	78 85       	ldd	r23, Y+8	; 0x08
    1d28:	89 85       	ldd	r24, Y+9	; 0x09
    1d2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d2c:	20 e0       	ldi	r18, 0x00	; 0
    1d2e:	3f ef       	ldi	r19, 0xFF	; 255
    1d30:	4f e7       	ldi	r20, 0x7F	; 127
    1d32:	57 e4       	ldi	r21, 0x47	; 71
    1d34:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d38:	18 16       	cp	r1, r24
    1d3a:	4c f5       	brge	.+82     	; 0x1d8e <LCD_sendCommand+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d3c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d3e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d40:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d42:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d44:	20 e0       	ldi	r18, 0x00	; 0
    1d46:	30 e0       	ldi	r19, 0x00	; 0
    1d48:	40 e2       	ldi	r20, 0x20	; 32
    1d4a:	51 e4       	ldi	r21, 0x41	; 65
    1d4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d50:	dc 01       	movw	r26, r24
    1d52:	cb 01       	movw	r24, r22
    1d54:	bc 01       	movw	r22, r24
    1d56:	cd 01       	movw	r24, r26
    1d58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d5c:	dc 01       	movw	r26, r24
    1d5e:	cb 01       	movw	r24, r22
    1d60:	9e 83       	std	Y+6, r25	; 0x06
    1d62:	8d 83       	std	Y+5, r24	; 0x05
    1d64:	0f c0       	rjmp	.+30     	; 0x1d84 <LCD_sendCommand+0x3a4>
    1d66:	88 ec       	ldi	r24, 0xC8	; 200
    1d68:	90 e0       	ldi	r25, 0x00	; 0
    1d6a:	9c 83       	std	Y+4, r25	; 0x04
    1d6c:	8b 83       	std	Y+3, r24	; 0x03
    1d6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d70:	9c 81       	ldd	r25, Y+4	; 0x04
    1d72:	01 97       	sbiw	r24, 0x01	; 1
    1d74:	f1 f7       	brne	.-4      	; 0x1d72 <LCD_sendCommand+0x392>
    1d76:	9c 83       	std	Y+4, r25	; 0x04
    1d78:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d7a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d7c:	9e 81       	ldd	r25, Y+6	; 0x06
    1d7e:	01 97       	sbiw	r24, 0x01	; 1
    1d80:	9e 83       	std	Y+6, r25	; 0x06
    1d82:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d84:	8d 81       	ldd	r24, Y+5	; 0x05
    1d86:	9e 81       	ldd	r25, Y+6	; 0x06
    1d88:	00 97       	sbiw	r24, 0x00	; 0
    1d8a:	69 f7       	brne	.-38     	; 0x1d66 <LCD_sendCommand+0x386>
    1d8c:	14 c0       	rjmp	.+40     	; 0x1db6 <LCD_sendCommand+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d8e:	6f 81       	ldd	r22, Y+7	; 0x07
    1d90:	78 85       	ldd	r23, Y+8	; 0x08
    1d92:	89 85       	ldd	r24, Y+9	; 0x09
    1d94:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d9a:	dc 01       	movw	r26, r24
    1d9c:	cb 01       	movw	r24, r22
    1d9e:	9e 83       	std	Y+6, r25	; 0x06
    1da0:	8d 83       	std	Y+5, r24	; 0x05
    1da2:	8d 81       	ldd	r24, Y+5	; 0x05
    1da4:	9e 81       	ldd	r25, Y+6	; 0x06
    1da6:	9a 83       	std	Y+2, r25	; 0x02
    1da8:	89 83       	std	Y+1, r24	; 0x01
    1daa:	89 81       	ldd	r24, Y+1	; 0x01
    1dac:	9a 81       	ldd	r25, Y+2	; 0x02
    1dae:	01 97       	sbiw	r24, 0x01	; 1
    1db0:	f1 f7       	brne	.-4      	; 0x1dae <LCD_sendCommand+0x3ce>
    1db2:	9a 83       	std	Y+2, r25	; 0x02
    1db4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    1db6:	e9 96       	adiw	r28, 0x39	; 57
    1db8:	0f b6       	in	r0, 0x3f	; 63
    1dba:	f8 94       	cli
    1dbc:	de bf       	out	0x3e, r29	; 62
    1dbe:	0f be       	out	0x3f, r0	; 63
    1dc0:	cd bf       	out	0x3d, r28	; 61
    1dc2:	cf 91       	pop	r28
    1dc4:	df 91       	pop	r29
    1dc6:	08 95       	ret

00001dc8 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    1dc8:	df 93       	push	r29
    1dca:	cf 93       	push	r28
    1dcc:	cd b7       	in	r28, 0x3d	; 61
    1dce:	de b7       	in	r29, 0x3e	; 62
    1dd0:	e9 97       	sbiw	r28, 0x39	; 57
    1dd2:	0f b6       	in	r0, 0x3f	; 63
    1dd4:	f8 94       	cli
    1dd6:	de bf       	out	0x3e, r29	; 62
    1dd8:	0f be       	out	0x3f, r0	; 63
    1dda:	cd bf       	out	0x3d, r28	; 61
    1ddc:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    1dde:	80 e0       	ldi	r24, 0x00	; 0
    1de0:	60 e0       	ldi	r22, 0x00	; 0
    1de2:	41 e0       	ldi	r20, 0x01	; 1
    1de4:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    1de8:	80 e0       	ldi	r24, 0x00	; 0
    1dea:	61 e0       	ldi	r22, 0x01	; 1
    1dec:	40 e0       	ldi	r20, 0x00	; 0
    1dee:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <GPIO_writePin>
    1df2:	80 e0       	ldi	r24, 0x00	; 0
    1df4:	90 e0       	ldi	r25, 0x00	; 0
    1df6:	a0 e8       	ldi	r26, 0x80	; 128
    1df8:	bf e3       	ldi	r27, 0x3F	; 63
    1dfa:	8d ab       	std	Y+53, r24	; 0x35
    1dfc:	9e ab       	std	Y+54, r25	; 0x36
    1dfe:	af ab       	std	Y+55, r26	; 0x37
    1e00:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e02:	6d a9       	ldd	r22, Y+53	; 0x35
    1e04:	7e a9       	ldd	r23, Y+54	; 0x36
    1e06:	8f a9       	ldd	r24, Y+55	; 0x37
    1e08:	98 ad       	ldd	r25, Y+56	; 0x38
    1e0a:	20 e0       	ldi	r18, 0x00	; 0
    1e0c:	30 e0       	ldi	r19, 0x00	; 0
    1e0e:	4a ef       	ldi	r20, 0xFA	; 250
    1e10:	54 e4       	ldi	r21, 0x44	; 68
    1e12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e16:	dc 01       	movw	r26, r24
    1e18:	cb 01       	movw	r24, r22
    1e1a:	89 ab       	std	Y+49, r24	; 0x31
    1e1c:	9a ab       	std	Y+50, r25	; 0x32
    1e1e:	ab ab       	std	Y+51, r26	; 0x33
    1e20:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1e22:	69 a9       	ldd	r22, Y+49	; 0x31
    1e24:	7a a9       	ldd	r23, Y+50	; 0x32
    1e26:	8b a9       	ldd	r24, Y+51	; 0x33
    1e28:	9c a9       	ldd	r25, Y+52	; 0x34
    1e2a:	20 e0       	ldi	r18, 0x00	; 0
    1e2c:	30 e0       	ldi	r19, 0x00	; 0
    1e2e:	40 e8       	ldi	r20, 0x80	; 128
    1e30:	5f e3       	ldi	r21, 0x3F	; 63
    1e32:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e36:	88 23       	and	r24, r24
    1e38:	2c f4       	brge	.+10     	; 0x1e44 <LCD_displayCharacter+0x7c>
		__ticks = 1;
    1e3a:	81 e0       	ldi	r24, 0x01	; 1
    1e3c:	90 e0       	ldi	r25, 0x00	; 0
    1e3e:	98 ab       	std	Y+48, r25	; 0x30
    1e40:	8f a7       	std	Y+47, r24	; 0x2f
    1e42:	3f c0       	rjmp	.+126    	; 0x1ec2 <LCD_displayCharacter+0xfa>
	else if (__tmp > 65535)
    1e44:	69 a9       	ldd	r22, Y+49	; 0x31
    1e46:	7a a9       	ldd	r23, Y+50	; 0x32
    1e48:	8b a9       	ldd	r24, Y+51	; 0x33
    1e4a:	9c a9       	ldd	r25, Y+52	; 0x34
    1e4c:	20 e0       	ldi	r18, 0x00	; 0
    1e4e:	3f ef       	ldi	r19, 0xFF	; 255
    1e50:	4f e7       	ldi	r20, 0x7F	; 127
    1e52:	57 e4       	ldi	r21, 0x47	; 71
    1e54:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e58:	18 16       	cp	r1, r24
    1e5a:	4c f5       	brge	.+82     	; 0x1eae <LCD_displayCharacter+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e5c:	6d a9       	ldd	r22, Y+53	; 0x35
    1e5e:	7e a9       	ldd	r23, Y+54	; 0x36
    1e60:	8f a9       	ldd	r24, Y+55	; 0x37
    1e62:	98 ad       	ldd	r25, Y+56	; 0x38
    1e64:	20 e0       	ldi	r18, 0x00	; 0
    1e66:	30 e0       	ldi	r19, 0x00	; 0
    1e68:	40 e2       	ldi	r20, 0x20	; 32
    1e6a:	51 e4       	ldi	r21, 0x41	; 65
    1e6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e70:	dc 01       	movw	r26, r24
    1e72:	cb 01       	movw	r24, r22
    1e74:	bc 01       	movw	r22, r24
    1e76:	cd 01       	movw	r24, r26
    1e78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e7c:	dc 01       	movw	r26, r24
    1e7e:	cb 01       	movw	r24, r22
    1e80:	98 ab       	std	Y+48, r25	; 0x30
    1e82:	8f a7       	std	Y+47, r24	; 0x2f
    1e84:	0f c0       	rjmp	.+30     	; 0x1ea4 <LCD_displayCharacter+0xdc>
    1e86:	88 ec       	ldi	r24, 0xC8	; 200
    1e88:	90 e0       	ldi	r25, 0x00	; 0
    1e8a:	9e a7       	std	Y+46, r25	; 0x2e
    1e8c:	8d a7       	std	Y+45, r24	; 0x2d
    1e8e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1e90:	9e a5       	ldd	r25, Y+46	; 0x2e
    1e92:	01 97       	sbiw	r24, 0x01	; 1
    1e94:	f1 f7       	brne	.-4      	; 0x1e92 <LCD_displayCharacter+0xca>
    1e96:	9e a7       	std	Y+46, r25	; 0x2e
    1e98:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e9a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e9c:	98 a9       	ldd	r25, Y+48	; 0x30
    1e9e:	01 97       	sbiw	r24, 0x01	; 1
    1ea0:	98 ab       	std	Y+48, r25	; 0x30
    1ea2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ea4:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ea6:	98 a9       	ldd	r25, Y+48	; 0x30
    1ea8:	00 97       	sbiw	r24, 0x00	; 0
    1eaa:	69 f7       	brne	.-38     	; 0x1e86 <LCD_displayCharacter+0xbe>
    1eac:	14 c0       	rjmp	.+40     	; 0x1ed6 <LCD_displayCharacter+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1eae:	69 a9       	ldd	r22, Y+49	; 0x31
    1eb0:	7a a9       	ldd	r23, Y+50	; 0x32
    1eb2:	8b a9       	ldd	r24, Y+51	; 0x33
    1eb4:	9c a9       	ldd	r25, Y+52	; 0x34
    1eb6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eba:	dc 01       	movw	r26, r24
    1ebc:	cb 01       	movw	r24, r22
    1ebe:	98 ab       	std	Y+48, r25	; 0x30
    1ec0:	8f a7       	std	Y+47, r24	; 0x2f
    1ec2:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ec4:	98 a9       	ldd	r25, Y+48	; 0x30
    1ec6:	9c a7       	std	Y+44, r25	; 0x2c
    1ec8:	8b a7       	std	Y+43, r24	; 0x2b
    1eca:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ecc:	9c a5       	ldd	r25, Y+44	; 0x2c
    1ece:	01 97       	sbiw	r24, 0x01	; 1
    1ed0:	f1 f7       	brne	.-4      	; 0x1ece <LCD_displayCharacter+0x106>
    1ed2:	9c a7       	std	Y+44, r25	; 0x2c
    1ed4:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1ed6:	80 e0       	ldi	r24, 0x00	; 0
    1ed8:	62 e0       	ldi	r22, 0x02	; 2
    1eda:	41 e0       	ldi	r20, 0x01	; 1
    1edc:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <GPIO_writePin>
    1ee0:	80 e0       	ldi	r24, 0x00	; 0
    1ee2:	90 e0       	ldi	r25, 0x00	; 0
    1ee4:	a0 e8       	ldi	r26, 0x80	; 128
    1ee6:	bf e3       	ldi	r27, 0x3F	; 63
    1ee8:	8f a3       	std	Y+39, r24	; 0x27
    1eea:	98 a7       	std	Y+40, r25	; 0x28
    1eec:	a9 a7       	std	Y+41, r26	; 0x29
    1eee:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ef0:	6f a1       	ldd	r22, Y+39	; 0x27
    1ef2:	78 a5       	ldd	r23, Y+40	; 0x28
    1ef4:	89 a5       	ldd	r24, Y+41	; 0x29
    1ef6:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ef8:	20 e0       	ldi	r18, 0x00	; 0
    1efa:	30 e0       	ldi	r19, 0x00	; 0
    1efc:	4a ef       	ldi	r20, 0xFA	; 250
    1efe:	54 e4       	ldi	r21, 0x44	; 68
    1f00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f04:	dc 01       	movw	r26, r24
    1f06:	cb 01       	movw	r24, r22
    1f08:	8b a3       	std	Y+35, r24	; 0x23
    1f0a:	9c a3       	std	Y+36, r25	; 0x24
    1f0c:	ad a3       	std	Y+37, r26	; 0x25
    1f0e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1f10:	6b a1       	ldd	r22, Y+35	; 0x23
    1f12:	7c a1       	ldd	r23, Y+36	; 0x24
    1f14:	8d a1       	ldd	r24, Y+37	; 0x25
    1f16:	9e a1       	ldd	r25, Y+38	; 0x26
    1f18:	20 e0       	ldi	r18, 0x00	; 0
    1f1a:	30 e0       	ldi	r19, 0x00	; 0
    1f1c:	40 e8       	ldi	r20, 0x80	; 128
    1f1e:	5f e3       	ldi	r21, 0x3F	; 63
    1f20:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f24:	88 23       	and	r24, r24
    1f26:	2c f4       	brge	.+10     	; 0x1f32 <LCD_displayCharacter+0x16a>
		__ticks = 1;
    1f28:	81 e0       	ldi	r24, 0x01	; 1
    1f2a:	90 e0       	ldi	r25, 0x00	; 0
    1f2c:	9a a3       	std	Y+34, r25	; 0x22
    1f2e:	89 a3       	std	Y+33, r24	; 0x21
    1f30:	3f c0       	rjmp	.+126    	; 0x1fb0 <LCD_displayCharacter+0x1e8>
	else if (__tmp > 65535)
    1f32:	6b a1       	ldd	r22, Y+35	; 0x23
    1f34:	7c a1       	ldd	r23, Y+36	; 0x24
    1f36:	8d a1       	ldd	r24, Y+37	; 0x25
    1f38:	9e a1       	ldd	r25, Y+38	; 0x26
    1f3a:	20 e0       	ldi	r18, 0x00	; 0
    1f3c:	3f ef       	ldi	r19, 0xFF	; 255
    1f3e:	4f e7       	ldi	r20, 0x7F	; 127
    1f40:	57 e4       	ldi	r21, 0x47	; 71
    1f42:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f46:	18 16       	cp	r1, r24
    1f48:	4c f5       	brge	.+82     	; 0x1f9c <LCD_displayCharacter+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f4a:	6f a1       	ldd	r22, Y+39	; 0x27
    1f4c:	78 a5       	ldd	r23, Y+40	; 0x28
    1f4e:	89 a5       	ldd	r24, Y+41	; 0x29
    1f50:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f52:	20 e0       	ldi	r18, 0x00	; 0
    1f54:	30 e0       	ldi	r19, 0x00	; 0
    1f56:	40 e2       	ldi	r20, 0x20	; 32
    1f58:	51 e4       	ldi	r21, 0x41	; 65
    1f5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f5e:	dc 01       	movw	r26, r24
    1f60:	cb 01       	movw	r24, r22
    1f62:	bc 01       	movw	r22, r24
    1f64:	cd 01       	movw	r24, r26
    1f66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f6a:	dc 01       	movw	r26, r24
    1f6c:	cb 01       	movw	r24, r22
    1f6e:	9a a3       	std	Y+34, r25	; 0x22
    1f70:	89 a3       	std	Y+33, r24	; 0x21
    1f72:	0f c0       	rjmp	.+30     	; 0x1f92 <LCD_displayCharacter+0x1ca>
    1f74:	88 ec       	ldi	r24, 0xC8	; 200
    1f76:	90 e0       	ldi	r25, 0x00	; 0
    1f78:	98 a3       	std	Y+32, r25	; 0x20
    1f7a:	8f 8f       	std	Y+31, r24	; 0x1f
    1f7c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1f7e:	98 a1       	ldd	r25, Y+32	; 0x20
    1f80:	01 97       	sbiw	r24, 0x01	; 1
    1f82:	f1 f7       	brne	.-4      	; 0x1f80 <LCD_displayCharacter+0x1b8>
    1f84:	98 a3       	std	Y+32, r25	; 0x20
    1f86:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f88:	89 a1       	ldd	r24, Y+33	; 0x21
    1f8a:	9a a1       	ldd	r25, Y+34	; 0x22
    1f8c:	01 97       	sbiw	r24, 0x01	; 1
    1f8e:	9a a3       	std	Y+34, r25	; 0x22
    1f90:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f92:	89 a1       	ldd	r24, Y+33	; 0x21
    1f94:	9a a1       	ldd	r25, Y+34	; 0x22
    1f96:	00 97       	sbiw	r24, 0x00	; 0
    1f98:	69 f7       	brne	.-38     	; 0x1f74 <LCD_displayCharacter+0x1ac>
    1f9a:	14 c0       	rjmp	.+40     	; 0x1fc4 <LCD_displayCharacter+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f9c:	6b a1       	ldd	r22, Y+35	; 0x23
    1f9e:	7c a1       	ldd	r23, Y+36	; 0x24
    1fa0:	8d a1       	ldd	r24, Y+37	; 0x25
    1fa2:	9e a1       	ldd	r25, Y+38	; 0x26
    1fa4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fa8:	dc 01       	movw	r26, r24
    1faa:	cb 01       	movw	r24, r22
    1fac:	9a a3       	std	Y+34, r25	; 0x22
    1fae:	89 a3       	std	Y+33, r24	; 0x21
    1fb0:	89 a1       	ldd	r24, Y+33	; 0x21
    1fb2:	9a a1       	ldd	r25, Y+34	; 0x22
    1fb4:	9e 8f       	std	Y+30, r25	; 0x1e
    1fb6:	8d 8f       	std	Y+29, r24	; 0x1d
    1fb8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1fba:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1fbc:	01 97       	sbiw	r24, 0x01	; 1
    1fbe:	f1 f7       	brne	.-4      	; 0x1fbc <LCD_displayCharacter+0x1f4>
    1fc0:	9e 8f       	std	Y+30, r25	; 0x1e
    1fc2:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    1fc4:	81 e0       	ldi	r24, 0x01	; 1
    1fc6:	69 ad       	ldd	r22, Y+57	; 0x39
    1fc8:	0e 94 44 0c 	call	0x1888	; 0x1888 <GPIO_writePort>
    1fcc:	80 e0       	ldi	r24, 0x00	; 0
    1fce:	90 e0       	ldi	r25, 0x00	; 0
    1fd0:	a0 e8       	ldi	r26, 0x80	; 128
    1fd2:	bf e3       	ldi	r27, 0x3F	; 63
    1fd4:	89 8f       	std	Y+25, r24	; 0x19
    1fd6:	9a 8f       	std	Y+26, r25	; 0x1a
    1fd8:	ab 8f       	std	Y+27, r26	; 0x1b
    1fda:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fdc:	69 8d       	ldd	r22, Y+25	; 0x19
    1fde:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1fe0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fe2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fe4:	20 e0       	ldi	r18, 0x00	; 0
    1fe6:	30 e0       	ldi	r19, 0x00	; 0
    1fe8:	4a ef       	ldi	r20, 0xFA	; 250
    1fea:	54 e4       	ldi	r21, 0x44	; 68
    1fec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ff0:	dc 01       	movw	r26, r24
    1ff2:	cb 01       	movw	r24, r22
    1ff4:	8d 8b       	std	Y+21, r24	; 0x15
    1ff6:	9e 8b       	std	Y+22, r25	; 0x16
    1ff8:	af 8b       	std	Y+23, r26	; 0x17
    1ffa:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1ffc:	6d 89       	ldd	r22, Y+21	; 0x15
    1ffe:	7e 89       	ldd	r23, Y+22	; 0x16
    2000:	8f 89       	ldd	r24, Y+23	; 0x17
    2002:	98 8d       	ldd	r25, Y+24	; 0x18
    2004:	20 e0       	ldi	r18, 0x00	; 0
    2006:	30 e0       	ldi	r19, 0x00	; 0
    2008:	40 e8       	ldi	r20, 0x80	; 128
    200a:	5f e3       	ldi	r21, 0x3F	; 63
    200c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2010:	88 23       	and	r24, r24
    2012:	2c f4       	brge	.+10     	; 0x201e <LCD_displayCharacter+0x256>
		__ticks = 1;
    2014:	81 e0       	ldi	r24, 0x01	; 1
    2016:	90 e0       	ldi	r25, 0x00	; 0
    2018:	9c 8b       	std	Y+20, r25	; 0x14
    201a:	8b 8b       	std	Y+19, r24	; 0x13
    201c:	3f c0       	rjmp	.+126    	; 0x209c <LCD_displayCharacter+0x2d4>
	else if (__tmp > 65535)
    201e:	6d 89       	ldd	r22, Y+21	; 0x15
    2020:	7e 89       	ldd	r23, Y+22	; 0x16
    2022:	8f 89       	ldd	r24, Y+23	; 0x17
    2024:	98 8d       	ldd	r25, Y+24	; 0x18
    2026:	20 e0       	ldi	r18, 0x00	; 0
    2028:	3f ef       	ldi	r19, 0xFF	; 255
    202a:	4f e7       	ldi	r20, 0x7F	; 127
    202c:	57 e4       	ldi	r21, 0x47	; 71
    202e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2032:	18 16       	cp	r1, r24
    2034:	4c f5       	brge	.+82     	; 0x2088 <LCD_displayCharacter+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2036:	69 8d       	ldd	r22, Y+25	; 0x19
    2038:	7a 8d       	ldd	r23, Y+26	; 0x1a
    203a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    203c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    203e:	20 e0       	ldi	r18, 0x00	; 0
    2040:	30 e0       	ldi	r19, 0x00	; 0
    2042:	40 e2       	ldi	r20, 0x20	; 32
    2044:	51 e4       	ldi	r21, 0x41	; 65
    2046:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    204a:	dc 01       	movw	r26, r24
    204c:	cb 01       	movw	r24, r22
    204e:	bc 01       	movw	r22, r24
    2050:	cd 01       	movw	r24, r26
    2052:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2056:	dc 01       	movw	r26, r24
    2058:	cb 01       	movw	r24, r22
    205a:	9c 8b       	std	Y+20, r25	; 0x14
    205c:	8b 8b       	std	Y+19, r24	; 0x13
    205e:	0f c0       	rjmp	.+30     	; 0x207e <LCD_displayCharacter+0x2b6>
    2060:	88 ec       	ldi	r24, 0xC8	; 200
    2062:	90 e0       	ldi	r25, 0x00	; 0
    2064:	9a 8b       	std	Y+18, r25	; 0x12
    2066:	89 8b       	std	Y+17, r24	; 0x11
    2068:	89 89       	ldd	r24, Y+17	; 0x11
    206a:	9a 89       	ldd	r25, Y+18	; 0x12
    206c:	01 97       	sbiw	r24, 0x01	; 1
    206e:	f1 f7       	brne	.-4      	; 0x206c <LCD_displayCharacter+0x2a4>
    2070:	9a 8b       	std	Y+18, r25	; 0x12
    2072:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2074:	8b 89       	ldd	r24, Y+19	; 0x13
    2076:	9c 89       	ldd	r25, Y+20	; 0x14
    2078:	01 97       	sbiw	r24, 0x01	; 1
    207a:	9c 8b       	std	Y+20, r25	; 0x14
    207c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    207e:	8b 89       	ldd	r24, Y+19	; 0x13
    2080:	9c 89       	ldd	r25, Y+20	; 0x14
    2082:	00 97       	sbiw	r24, 0x00	; 0
    2084:	69 f7       	brne	.-38     	; 0x2060 <LCD_displayCharacter+0x298>
    2086:	14 c0       	rjmp	.+40     	; 0x20b0 <LCD_displayCharacter+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2088:	6d 89       	ldd	r22, Y+21	; 0x15
    208a:	7e 89       	ldd	r23, Y+22	; 0x16
    208c:	8f 89       	ldd	r24, Y+23	; 0x17
    208e:	98 8d       	ldd	r25, Y+24	; 0x18
    2090:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2094:	dc 01       	movw	r26, r24
    2096:	cb 01       	movw	r24, r22
    2098:	9c 8b       	std	Y+20, r25	; 0x14
    209a:	8b 8b       	std	Y+19, r24	; 0x13
    209c:	8b 89       	ldd	r24, Y+19	; 0x13
    209e:	9c 89       	ldd	r25, Y+20	; 0x14
    20a0:	98 8b       	std	Y+16, r25	; 0x10
    20a2:	8f 87       	std	Y+15, r24	; 0x0f
    20a4:	8f 85       	ldd	r24, Y+15	; 0x0f
    20a6:	98 89       	ldd	r25, Y+16	; 0x10
    20a8:	01 97       	sbiw	r24, 0x01	; 1
    20aa:	f1 f7       	brne	.-4      	; 0x20a8 <LCD_displayCharacter+0x2e0>
    20ac:	98 8b       	std	Y+16, r25	; 0x10
    20ae:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    20b0:	80 e0       	ldi	r24, 0x00	; 0
    20b2:	62 e0       	ldi	r22, 0x02	; 2
    20b4:	40 e0       	ldi	r20, 0x00	; 0
    20b6:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <GPIO_writePin>
    20ba:	80 e0       	ldi	r24, 0x00	; 0
    20bc:	90 e0       	ldi	r25, 0x00	; 0
    20be:	a0 e8       	ldi	r26, 0x80	; 128
    20c0:	bf e3       	ldi	r27, 0x3F	; 63
    20c2:	8b 87       	std	Y+11, r24	; 0x0b
    20c4:	9c 87       	std	Y+12, r25	; 0x0c
    20c6:	ad 87       	std	Y+13, r26	; 0x0d
    20c8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20ca:	6b 85       	ldd	r22, Y+11	; 0x0b
    20cc:	7c 85       	ldd	r23, Y+12	; 0x0c
    20ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    20d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    20d2:	20 e0       	ldi	r18, 0x00	; 0
    20d4:	30 e0       	ldi	r19, 0x00	; 0
    20d6:	4a ef       	ldi	r20, 0xFA	; 250
    20d8:	54 e4       	ldi	r21, 0x44	; 68
    20da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20de:	dc 01       	movw	r26, r24
    20e0:	cb 01       	movw	r24, r22
    20e2:	8f 83       	std	Y+7, r24	; 0x07
    20e4:	98 87       	std	Y+8, r25	; 0x08
    20e6:	a9 87       	std	Y+9, r26	; 0x09
    20e8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    20ea:	6f 81       	ldd	r22, Y+7	; 0x07
    20ec:	78 85       	ldd	r23, Y+8	; 0x08
    20ee:	89 85       	ldd	r24, Y+9	; 0x09
    20f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    20f2:	20 e0       	ldi	r18, 0x00	; 0
    20f4:	30 e0       	ldi	r19, 0x00	; 0
    20f6:	40 e8       	ldi	r20, 0x80	; 128
    20f8:	5f e3       	ldi	r21, 0x3F	; 63
    20fa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20fe:	88 23       	and	r24, r24
    2100:	2c f4       	brge	.+10     	; 0x210c <LCD_displayCharacter+0x344>
		__ticks = 1;
    2102:	81 e0       	ldi	r24, 0x01	; 1
    2104:	90 e0       	ldi	r25, 0x00	; 0
    2106:	9e 83       	std	Y+6, r25	; 0x06
    2108:	8d 83       	std	Y+5, r24	; 0x05
    210a:	3f c0       	rjmp	.+126    	; 0x218a <LCD_displayCharacter+0x3c2>
	else if (__tmp > 65535)
    210c:	6f 81       	ldd	r22, Y+7	; 0x07
    210e:	78 85       	ldd	r23, Y+8	; 0x08
    2110:	89 85       	ldd	r24, Y+9	; 0x09
    2112:	9a 85       	ldd	r25, Y+10	; 0x0a
    2114:	20 e0       	ldi	r18, 0x00	; 0
    2116:	3f ef       	ldi	r19, 0xFF	; 255
    2118:	4f e7       	ldi	r20, 0x7F	; 127
    211a:	57 e4       	ldi	r21, 0x47	; 71
    211c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2120:	18 16       	cp	r1, r24
    2122:	4c f5       	brge	.+82     	; 0x2176 <LCD_displayCharacter+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2124:	6b 85       	ldd	r22, Y+11	; 0x0b
    2126:	7c 85       	ldd	r23, Y+12	; 0x0c
    2128:	8d 85       	ldd	r24, Y+13	; 0x0d
    212a:	9e 85       	ldd	r25, Y+14	; 0x0e
    212c:	20 e0       	ldi	r18, 0x00	; 0
    212e:	30 e0       	ldi	r19, 0x00	; 0
    2130:	40 e2       	ldi	r20, 0x20	; 32
    2132:	51 e4       	ldi	r21, 0x41	; 65
    2134:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2138:	dc 01       	movw	r26, r24
    213a:	cb 01       	movw	r24, r22
    213c:	bc 01       	movw	r22, r24
    213e:	cd 01       	movw	r24, r26
    2140:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2144:	dc 01       	movw	r26, r24
    2146:	cb 01       	movw	r24, r22
    2148:	9e 83       	std	Y+6, r25	; 0x06
    214a:	8d 83       	std	Y+5, r24	; 0x05
    214c:	0f c0       	rjmp	.+30     	; 0x216c <LCD_displayCharacter+0x3a4>
    214e:	88 ec       	ldi	r24, 0xC8	; 200
    2150:	90 e0       	ldi	r25, 0x00	; 0
    2152:	9c 83       	std	Y+4, r25	; 0x04
    2154:	8b 83       	std	Y+3, r24	; 0x03
    2156:	8b 81       	ldd	r24, Y+3	; 0x03
    2158:	9c 81       	ldd	r25, Y+4	; 0x04
    215a:	01 97       	sbiw	r24, 0x01	; 1
    215c:	f1 f7       	brne	.-4      	; 0x215a <LCD_displayCharacter+0x392>
    215e:	9c 83       	std	Y+4, r25	; 0x04
    2160:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2162:	8d 81       	ldd	r24, Y+5	; 0x05
    2164:	9e 81       	ldd	r25, Y+6	; 0x06
    2166:	01 97       	sbiw	r24, 0x01	; 1
    2168:	9e 83       	std	Y+6, r25	; 0x06
    216a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    216c:	8d 81       	ldd	r24, Y+5	; 0x05
    216e:	9e 81       	ldd	r25, Y+6	; 0x06
    2170:	00 97       	sbiw	r24, 0x00	; 0
    2172:	69 f7       	brne	.-38     	; 0x214e <LCD_displayCharacter+0x386>
    2174:	14 c0       	rjmp	.+40     	; 0x219e <LCD_displayCharacter+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2176:	6f 81       	ldd	r22, Y+7	; 0x07
    2178:	78 85       	ldd	r23, Y+8	; 0x08
    217a:	89 85       	ldd	r24, Y+9	; 0x09
    217c:	9a 85       	ldd	r25, Y+10	; 0x0a
    217e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2182:	dc 01       	movw	r26, r24
    2184:	cb 01       	movw	r24, r22
    2186:	9e 83       	std	Y+6, r25	; 0x06
    2188:	8d 83       	std	Y+5, r24	; 0x05
    218a:	8d 81       	ldd	r24, Y+5	; 0x05
    218c:	9e 81       	ldd	r25, Y+6	; 0x06
    218e:	9a 83       	std	Y+2, r25	; 0x02
    2190:	89 83       	std	Y+1, r24	; 0x01
    2192:	89 81       	ldd	r24, Y+1	; 0x01
    2194:	9a 81       	ldd	r25, Y+2	; 0x02
    2196:	01 97       	sbiw	r24, 0x01	; 1
    2198:	f1 f7       	brne	.-4      	; 0x2196 <LCD_displayCharacter+0x3ce>
    219a:	9a 83       	std	Y+2, r25	; 0x02
    219c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    219e:	e9 96       	adiw	r28, 0x39	; 57
    21a0:	0f b6       	in	r0, 0x3f	; 63
    21a2:	f8 94       	cli
    21a4:	de bf       	out	0x3e, r29	; 62
    21a6:	0f be       	out	0x3f, r0	; 63
    21a8:	cd bf       	out	0x3d, r28	; 61
    21aa:	cf 91       	pop	r28
    21ac:	df 91       	pop	r29
    21ae:	08 95       	ret

000021b0 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    21b0:	df 93       	push	r29
    21b2:	cf 93       	push	r28
    21b4:	00 d0       	rcall	.+0      	; 0x21b6 <LCD_displayString+0x6>
    21b6:	0f 92       	push	r0
    21b8:	cd b7       	in	r28, 0x3d	; 61
    21ba:	de b7       	in	r29, 0x3e	; 62
    21bc:	9b 83       	std	Y+3, r25	; 0x03
    21be:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    21c0:	19 82       	std	Y+1, r1	; 0x01
    21c2:	0e c0       	rjmp	.+28     	; 0x21e0 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    21c4:	89 81       	ldd	r24, Y+1	; 0x01
    21c6:	28 2f       	mov	r18, r24
    21c8:	30 e0       	ldi	r19, 0x00	; 0
    21ca:	8a 81       	ldd	r24, Y+2	; 0x02
    21cc:	9b 81       	ldd	r25, Y+3	; 0x03
    21ce:	fc 01       	movw	r30, r24
    21d0:	e2 0f       	add	r30, r18
    21d2:	f3 1f       	adc	r31, r19
    21d4:	80 81       	ld	r24, Z
    21d6:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <LCD_displayCharacter>
		i++;
    21da:	89 81       	ldd	r24, Y+1	; 0x01
    21dc:	8f 5f       	subi	r24, 0xFF	; 255
    21de:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    21e0:	89 81       	ldd	r24, Y+1	; 0x01
    21e2:	28 2f       	mov	r18, r24
    21e4:	30 e0       	ldi	r19, 0x00	; 0
    21e6:	8a 81       	ldd	r24, Y+2	; 0x02
    21e8:	9b 81       	ldd	r25, Y+3	; 0x03
    21ea:	fc 01       	movw	r30, r24
    21ec:	e2 0f       	add	r30, r18
    21ee:	f3 1f       	adc	r31, r19
    21f0:	80 81       	ld	r24, Z
    21f2:	88 23       	and	r24, r24
    21f4:	39 f7       	brne	.-50     	; 0x21c4 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    21f6:	0f 90       	pop	r0
    21f8:	0f 90       	pop	r0
    21fa:	0f 90       	pop	r0
    21fc:	cf 91       	pop	r28
    21fe:	df 91       	pop	r29
    2200:	08 95       	ret

00002202 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    2202:	df 93       	push	r29
    2204:	cf 93       	push	r28
    2206:	00 d0       	rcall	.+0      	; 0x2208 <LCD_moveCursor+0x6>
    2208:	00 d0       	rcall	.+0      	; 0x220a <LCD_moveCursor+0x8>
    220a:	0f 92       	push	r0
    220c:	cd b7       	in	r28, 0x3d	; 61
    220e:	de b7       	in	r29, 0x3e	; 62
    2210:	8a 83       	std	Y+2, r24	; 0x02
    2212:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    2214:	8a 81       	ldd	r24, Y+2	; 0x02
    2216:	28 2f       	mov	r18, r24
    2218:	30 e0       	ldi	r19, 0x00	; 0
    221a:	3d 83       	std	Y+5, r19	; 0x05
    221c:	2c 83       	std	Y+4, r18	; 0x04
    221e:	8c 81       	ldd	r24, Y+4	; 0x04
    2220:	9d 81       	ldd	r25, Y+5	; 0x05
    2222:	81 30       	cpi	r24, 0x01	; 1
    2224:	91 05       	cpc	r25, r1
    2226:	c1 f0       	breq	.+48     	; 0x2258 <LCD_moveCursor+0x56>
    2228:	2c 81       	ldd	r18, Y+4	; 0x04
    222a:	3d 81       	ldd	r19, Y+5	; 0x05
    222c:	22 30       	cpi	r18, 0x02	; 2
    222e:	31 05       	cpc	r19, r1
    2230:	2c f4       	brge	.+10     	; 0x223c <LCD_moveCursor+0x3a>
    2232:	8c 81       	ldd	r24, Y+4	; 0x04
    2234:	9d 81       	ldd	r25, Y+5	; 0x05
    2236:	00 97       	sbiw	r24, 0x00	; 0
    2238:	61 f0       	breq	.+24     	; 0x2252 <LCD_moveCursor+0x50>
    223a:	19 c0       	rjmp	.+50     	; 0x226e <LCD_moveCursor+0x6c>
    223c:	2c 81       	ldd	r18, Y+4	; 0x04
    223e:	3d 81       	ldd	r19, Y+5	; 0x05
    2240:	22 30       	cpi	r18, 0x02	; 2
    2242:	31 05       	cpc	r19, r1
    2244:	69 f0       	breq	.+26     	; 0x2260 <LCD_moveCursor+0x5e>
    2246:	8c 81       	ldd	r24, Y+4	; 0x04
    2248:	9d 81       	ldd	r25, Y+5	; 0x05
    224a:	83 30       	cpi	r24, 0x03	; 3
    224c:	91 05       	cpc	r25, r1
    224e:	61 f0       	breq	.+24     	; 0x2268 <LCD_moveCursor+0x66>
    2250:	0e c0       	rjmp	.+28     	; 0x226e <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    2252:	8b 81       	ldd	r24, Y+3	; 0x03
    2254:	89 83       	std	Y+1, r24	; 0x01
    2256:	0b c0       	rjmp	.+22     	; 0x226e <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    2258:	8b 81       	ldd	r24, Y+3	; 0x03
    225a:	80 5c       	subi	r24, 0xC0	; 192
    225c:	89 83       	std	Y+1, r24	; 0x01
    225e:	07 c0       	rjmp	.+14     	; 0x226e <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    2260:	8b 81       	ldd	r24, Y+3	; 0x03
    2262:	80 5f       	subi	r24, 0xF0	; 240
    2264:	89 83       	std	Y+1, r24	; 0x01
    2266:	03 c0       	rjmp	.+6      	; 0x226e <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    2268:	8b 81       	ldd	r24, Y+3	; 0x03
    226a:	80 5b       	subi	r24, 0xB0	; 176
    226c:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    226e:	89 81       	ldd	r24, Y+1	; 0x01
    2270:	80 68       	ori	r24, 0x80	; 128
    2272:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <LCD_sendCommand>
}
    2276:	0f 90       	pop	r0
    2278:	0f 90       	pop	r0
    227a:	0f 90       	pop	r0
    227c:	0f 90       	pop	r0
    227e:	0f 90       	pop	r0
    2280:	cf 91       	pop	r28
    2282:	df 91       	pop	r29
    2284:	08 95       	ret

00002286 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2286:	df 93       	push	r29
    2288:	cf 93       	push	r28
    228a:	00 d0       	rcall	.+0      	; 0x228c <LCD_displayStringRowColumn+0x6>
    228c:	00 d0       	rcall	.+0      	; 0x228e <LCD_displayStringRowColumn+0x8>
    228e:	cd b7       	in	r28, 0x3d	; 61
    2290:	de b7       	in	r29, 0x3e	; 62
    2292:	89 83       	std	Y+1, r24	; 0x01
    2294:	6a 83       	std	Y+2, r22	; 0x02
    2296:	5c 83       	std	Y+4, r21	; 0x04
    2298:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    229a:	89 81       	ldd	r24, Y+1	; 0x01
    229c:	6a 81       	ldd	r22, Y+2	; 0x02
    229e:	0e 94 01 11 	call	0x2202	; 0x2202 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    22a2:	8b 81       	ldd	r24, Y+3	; 0x03
    22a4:	9c 81       	ldd	r25, Y+4	; 0x04
    22a6:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <LCD_displayString>
}
    22aa:	0f 90       	pop	r0
    22ac:	0f 90       	pop	r0
    22ae:	0f 90       	pop	r0
    22b0:	0f 90       	pop	r0
    22b2:	cf 91       	pop	r28
    22b4:	df 91       	pop	r29
    22b6:	08 95       	ret

000022b8 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    22b8:	df 93       	push	r29
    22ba:	cf 93       	push	r28
    22bc:	cd b7       	in	r28, 0x3d	; 61
    22be:	de b7       	in	r29, 0x3e	; 62
    22c0:	62 97       	sbiw	r28, 0x12	; 18
    22c2:	0f b6       	in	r0, 0x3f	; 63
    22c4:	f8 94       	cli
    22c6:	de bf       	out	0x3e, r29	; 62
    22c8:	0f be       	out	0x3f, r0	; 63
    22ca:	cd bf       	out	0x3d, r28	; 61
    22cc:	9a 8b       	std	Y+18, r25	; 0x12
    22ce:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    22d0:	89 89       	ldd	r24, Y+17	; 0x11
    22d2:	9a 89       	ldd	r25, Y+18	; 0x12
    22d4:	9e 01       	movw	r18, r28
    22d6:	2f 5f       	subi	r18, 0xFF	; 255
    22d8:	3f 4f       	sbci	r19, 0xFF	; 255
    22da:	b9 01       	movw	r22, r18
    22dc:	4a e0       	ldi	r20, 0x0A	; 10
    22de:	50 e0       	ldi	r21, 0x00	; 0
    22e0:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <itoa>
   LCD_displayString(buff); /* Display the string */
    22e4:	ce 01       	movw	r24, r28
    22e6:	01 96       	adiw	r24, 0x01	; 1
    22e8:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <LCD_displayString>
}
    22ec:	62 96       	adiw	r28, 0x12	; 18
    22ee:	0f b6       	in	r0, 0x3f	; 63
    22f0:	f8 94       	cli
    22f2:	de bf       	out	0x3e, r29	; 62
    22f4:	0f be       	out	0x3f, r0	; 63
    22f6:	cd bf       	out	0x3d, r28	; 61
    22f8:	cf 91       	pop	r28
    22fa:	df 91       	pop	r29
    22fc:	08 95       	ret

000022fe <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    22fe:	df 93       	push	r29
    2300:	cf 93       	push	r28
    2302:	cd b7       	in	r28, 0x3d	; 61
    2304:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2306:	81 e0       	ldi	r24, 0x01	; 1
    2308:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <LCD_sendCommand>
}
    230c:	cf 91       	pop	r28
    230e:	df 91       	pop	r29
    2310:	08 95       	ret

00002312 <main>:
# define F_CPU 8000000UL
#include "Second_MicroController.h"


int main(void)
{
    2312:	df 93       	push	r29
    2314:	cf 93       	push	r28
    2316:	cd b7       	in	r28, 0x3d	; 61
    2318:	de b7       	in	r29, 0x3e	; 62
    231a:	ce 55       	subi	r28, 0x5E	; 94
    231c:	d0 40       	sbci	r29, 0x00	; 0
    231e:	0f b6       	in	r0, 0x3f	; 63
    2320:	f8 94       	cli
    2322:	de bf       	out	0x3e, r29	; 62
    2324:	0f be       	out	0x3f, r0	; 63
    2326:	cd bf       	out	0x3d, r28	; 61
	uint8 pass[17];
	uint8 Npass[17];
	uint8 state=1;				/*flag for checking the string compare function value*/
    2328:	81 e0       	ldi	r24, 0x01	; 1
    232a:	8a af       	std	Y+58, r24	; 0x3a
	Address command_Address; 	/*variable for selecting command*/
	UART_init(9600);			/* Initialize the UART driver with Baud-rate = 9600 bits/sec */
    232c:	60 e8       	ldi	r22, 0x80	; 128
    232e:	75 e2       	ldi	r23, 0x25	; 37
    2330:	80 e0       	ldi	r24, 0x00	; 0
    2332:	90 e0       	ldi	r25, 0x00	; 0
    2334:	0e 94 87 14 	call	0x290e	; 0x290e <UART_init>
	LCD_init();					/* Initialize the LCD Driver */
    2338:	0e 94 cd 0c 	call	0x199a	; 0x199a <LCD_init>
	DcMotor_Init();				/* Initialize the DC MOTOR Driver */
    233c:	0e 94 c7 05 	call	0xb8e	; 0xb8e <DcMotor_Init>
	TWI_init();					/* Initialize the I2C Driver */
    2340:	0e 94 0a 14 	call	0x2814	; 0x2814 <TWI_init>
	Buzzer_init();				/* Initialize the BUZZER Driver */
    2344:	0e 94 a3 05 	call	0xb46	; 0xb46 <Buzzer_init>

    while(1){
    	command_Address=UART_recieveByte(); 	/*Micro controller  command address */
    2348:	0e 94 ea 14 	call	0x29d4	; 0x29d4 <UART_recieveByte>
    234c:	89 af       	std	Y+57, r24	; 0x39
    	switch(command_Address){				/* switch case for commands*/
    234e:	89 ad       	ldd	r24, Y+57	; 0x39
    2350:	28 2f       	mov	r18, r24
    2352:	30 e0       	ldi	r19, 0x00	; 0
    2354:	6f 96       	adiw	r28, 0x1f	; 31
    2356:	3f af       	std	Y+63, r19	; 0x3f
    2358:	2e af       	std	Y+62, r18	; 0x3e
    235a:	6f 97       	sbiw	r28, 0x1f	; 31
    235c:	6f 96       	adiw	r28, 0x1f	; 31
    235e:	8e ad       	ldd	r24, Y+62	; 0x3e
    2360:	9f ad       	ldd	r25, Y+63	; 0x3f
    2362:	6f 97       	sbiw	r28, 0x1f	; 31
    2364:	81 30       	cpi	r24, 0x01	; 1
    2366:	91 05       	cpc	r25, r1
    2368:	41 f1       	breq	.+80     	; 0x23ba <main+0xa8>
    236a:	6f 96       	adiw	r28, 0x1f	; 31
    236c:	2e ad       	ldd	r18, Y+62	; 0x3e
    236e:	3f ad       	ldd	r19, Y+63	; 0x3f
    2370:	6f 97       	sbiw	r28, 0x1f	; 31
    2372:	22 30       	cpi	r18, 0x02	; 2
    2374:	31 05       	cpc	r19, r1
    2376:	3c f4       	brge	.+14     	; 0x2386 <main+0x74>
    2378:	6f 96       	adiw	r28, 0x1f	; 31
    237a:	8e ad       	ldd	r24, Y+62	; 0x3e
    237c:	9f ad       	ldd	r25, Y+63	; 0x3f
    237e:	6f 97       	sbiw	r28, 0x1f	; 31
    2380:	00 97       	sbiw	r24, 0x00	; 0
    2382:	91 f0       	breq	.+36     	; 0x23a8 <main+0x96>
    2384:	e1 cf       	rjmp	.-62     	; 0x2348 <main+0x36>
    2386:	6f 96       	adiw	r28, 0x1f	; 31
    2388:	2e ad       	ldd	r18, Y+62	; 0x3e
    238a:	3f ad       	ldd	r19, Y+63	; 0x3f
    238c:	6f 97       	sbiw	r28, 0x1f	; 31
    238e:	22 30       	cpi	r18, 0x02	; 2
    2390:	31 05       	cpc	r19, r1
    2392:	09 f4       	brne	.+2      	; 0x2396 <main+0x84>
    2394:	32 c1       	rjmp	.+612    	; 0x25fa <main+0x2e8>
    2396:	6f 96       	adiw	r28, 0x1f	; 31
    2398:	8e ad       	ldd	r24, Y+62	; 0x3e
    239a:	9f ad       	ldd	r25, Y+63	; 0x3f
    239c:	6f 97       	sbiw	r28, 0x1f	; 31
    239e:	83 30       	cpi	r24, 0x03	; 3
    23a0:	91 05       	cpc	r25, r1
    23a2:	09 f4       	brne	.+2      	; 0x23a6 <main+0x94>
    23a4:	2c c2       	rjmp	.+1112   	; 0x27fe <main+0x4ec>
    23a6:	d0 cf       	rjmp	.-96     	; 0x2348 <main+0x36>
    	case RECEIVE_PASS:
    		UART_receiveString(pass);	/* Receive Password from MC1 through UART */
    23a8:	ce 01       	movw	r24, r28
    23aa:	cb 96       	adiw	r24, 0x3b	; 59
    23ac:	0e 94 22 15 	call	0x2a44	; 0x2a44 <UART_receiveString>
    		save_pass(pass);			/* saving password at EEPROM by I2C*/
    23b0:	ce 01       	movw	r24, r28
    23b2:	cb 96       	adiw	r24, 0x3b	; 59
    23b4:	0e 94 3b 06 	call	0xc76	; 0xc76 <save_pass>
    23b8:	c7 cf       	rjmp	.-114    	; 0x2348 <main+0x36>

    		break;
    	case OPEN_DOOR:
    		UART_receiveString(Npass);			/*recieving pass from user*/
    23ba:	ce 01       	movw	r24, r28
    23bc:	84 5b       	subi	r24, 0xB4	; 180
    23be:	9f 4f       	sbci	r25, 0xFF	; 255
    23c0:	0e 94 22 15 	call	0x2a44	; 0x2a44 <UART_receiveString>
    		state=compare_pass(pass,Npass);		/*comparing password that user entered and pass saved in EEPROM*/
    23c4:	ce 01       	movw	r24, r28
    23c6:	cb 96       	adiw	r24, 0x3b	; 59
    23c8:	9e 01       	movw	r18, r28
    23ca:	24 5b       	subi	r18, 0xB4	; 180
    23cc:	3f 4f       	sbci	r19, 0xFF	; 255
    23ce:	b9 01       	movw	r22, r18
    23d0:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <compare_pass>
    23d4:	8a af       	std	Y+58, r24	; 0x3a
    		if(state==0){						/*checking the validation of password*/
    23d6:	8a ad       	ldd	r24, Y+58	; 0x3a
    23d8:	88 23       	and	r24, r24
    23da:	09 f0       	breq	.+2      	; 0x23de <main+0xcc>
    23dc:	94 c0       	rjmp	.+296    	; 0x2506 <main+0x1f4>
    23de:	80 e0       	ldi	r24, 0x00	; 0
    23e0:	90 e0       	ldi	r25, 0x00	; 0
    23e2:	a8 e4       	ldi	r26, 0x48	; 72
    23e4:	b3 e4       	ldi	r27, 0x43	; 67
    23e6:	8d ab       	std	Y+53, r24	; 0x35
    23e8:	9e ab       	std	Y+54, r25	; 0x36
    23ea:	af ab       	std	Y+55, r26	; 0x37
    23ec:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23ee:	6d a9       	ldd	r22, Y+53	; 0x35
    23f0:	7e a9       	ldd	r23, Y+54	; 0x36
    23f2:	8f a9       	ldd	r24, Y+55	; 0x37
    23f4:	98 ad       	ldd	r25, Y+56	; 0x38
    23f6:	20 e0       	ldi	r18, 0x00	; 0
    23f8:	30 e0       	ldi	r19, 0x00	; 0
    23fa:	4a ef       	ldi	r20, 0xFA	; 250
    23fc:	54 e4       	ldi	r21, 0x44	; 68
    23fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2402:	dc 01       	movw	r26, r24
    2404:	cb 01       	movw	r24, r22
    2406:	89 ab       	std	Y+49, r24	; 0x31
    2408:	9a ab       	std	Y+50, r25	; 0x32
    240a:	ab ab       	std	Y+51, r26	; 0x33
    240c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    240e:	69 a9       	ldd	r22, Y+49	; 0x31
    2410:	7a a9       	ldd	r23, Y+50	; 0x32
    2412:	8b a9       	ldd	r24, Y+51	; 0x33
    2414:	9c a9       	ldd	r25, Y+52	; 0x34
    2416:	20 e0       	ldi	r18, 0x00	; 0
    2418:	30 e0       	ldi	r19, 0x00	; 0
    241a:	40 e8       	ldi	r20, 0x80	; 128
    241c:	5f e3       	ldi	r21, 0x3F	; 63
    241e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2422:	88 23       	and	r24, r24
    2424:	2c f4       	brge	.+10     	; 0x2430 <main+0x11e>
		__ticks = 1;
    2426:	81 e0       	ldi	r24, 0x01	; 1
    2428:	90 e0       	ldi	r25, 0x00	; 0
    242a:	98 ab       	std	Y+48, r25	; 0x30
    242c:	8f a7       	std	Y+47, r24	; 0x2f
    242e:	3f c0       	rjmp	.+126    	; 0x24ae <main+0x19c>
	else if (__tmp > 65535)
    2430:	69 a9       	ldd	r22, Y+49	; 0x31
    2432:	7a a9       	ldd	r23, Y+50	; 0x32
    2434:	8b a9       	ldd	r24, Y+51	; 0x33
    2436:	9c a9       	ldd	r25, Y+52	; 0x34
    2438:	20 e0       	ldi	r18, 0x00	; 0
    243a:	3f ef       	ldi	r19, 0xFF	; 255
    243c:	4f e7       	ldi	r20, 0x7F	; 127
    243e:	57 e4       	ldi	r21, 0x47	; 71
    2440:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2444:	18 16       	cp	r1, r24
    2446:	4c f5       	brge	.+82     	; 0x249a <main+0x188>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2448:	6d a9       	ldd	r22, Y+53	; 0x35
    244a:	7e a9       	ldd	r23, Y+54	; 0x36
    244c:	8f a9       	ldd	r24, Y+55	; 0x37
    244e:	98 ad       	ldd	r25, Y+56	; 0x38
    2450:	20 e0       	ldi	r18, 0x00	; 0
    2452:	30 e0       	ldi	r19, 0x00	; 0
    2454:	40 e2       	ldi	r20, 0x20	; 32
    2456:	51 e4       	ldi	r21, 0x41	; 65
    2458:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    245c:	dc 01       	movw	r26, r24
    245e:	cb 01       	movw	r24, r22
    2460:	bc 01       	movw	r22, r24
    2462:	cd 01       	movw	r24, r26
    2464:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2468:	dc 01       	movw	r26, r24
    246a:	cb 01       	movw	r24, r22
    246c:	98 ab       	std	Y+48, r25	; 0x30
    246e:	8f a7       	std	Y+47, r24	; 0x2f
    2470:	0f c0       	rjmp	.+30     	; 0x2490 <main+0x17e>
    2472:	88 ec       	ldi	r24, 0xC8	; 200
    2474:	90 e0       	ldi	r25, 0x00	; 0
    2476:	9e a7       	std	Y+46, r25	; 0x2e
    2478:	8d a7       	std	Y+45, r24	; 0x2d
    247a:	8d a5       	ldd	r24, Y+45	; 0x2d
    247c:	9e a5       	ldd	r25, Y+46	; 0x2e
    247e:	01 97       	sbiw	r24, 0x01	; 1
    2480:	f1 f7       	brne	.-4      	; 0x247e <main+0x16c>
    2482:	9e a7       	std	Y+46, r25	; 0x2e
    2484:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2486:	8f a5       	ldd	r24, Y+47	; 0x2f
    2488:	98 a9       	ldd	r25, Y+48	; 0x30
    248a:	01 97       	sbiw	r24, 0x01	; 1
    248c:	98 ab       	std	Y+48, r25	; 0x30
    248e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2490:	8f a5       	ldd	r24, Y+47	; 0x2f
    2492:	98 a9       	ldd	r25, Y+48	; 0x30
    2494:	00 97       	sbiw	r24, 0x00	; 0
    2496:	69 f7       	brne	.-38     	; 0x2472 <main+0x160>
    2498:	14 c0       	rjmp	.+40     	; 0x24c2 <main+0x1b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    249a:	69 a9       	ldd	r22, Y+49	; 0x31
    249c:	7a a9       	ldd	r23, Y+50	; 0x32
    249e:	8b a9       	ldd	r24, Y+51	; 0x33
    24a0:	9c a9       	ldd	r25, Y+52	; 0x34
    24a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24a6:	dc 01       	movw	r26, r24
    24a8:	cb 01       	movw	r24, r22
    24aa:	98 ab       	std	Y+48, r25	; 0x30
    24ac:	8f a7       	std	Y+47, r24	; 0x2f
    24ae:	8f a5       	ldd	r24, Y+47	; 0x2f
    24b0:	98 a9       	ldd	r25, Y+48	; 0x30
    24b2:	9c a7       	std	Y+44, r25	; 0x2c
    24b4:	8b a7       	std	Y+43, r24	; 0x2b
    24b6:	8b a5       	ldd	r24, Y+43	; 0x2b
    24b8:	9c a5       	ldd	r25, Y+44	; 0x2c
    24ba:	01 97       	sbiw	r24, 0x01	; 1
    24bc:	f1 f7       	brne	.-4      	; 0x24ba <main+0x1a8>
    24be:	9c a7       	std	Y+44, r25	; 0x2c
    24c0:	8b a7       	std	Y+43, r24	; 0x2b
    			_delay_ms(200);
    			UART_sendByte(CORRECT_PASS);	/* sending the decision for the first micro controller*/
    24c2:	8a e0       	ldi	r24, 0x0A	; 10
    24c4:	0e 94 d3 14 	call	0x29a6	; 0x29a6 <UART_sendByte>
    			DcMotor_Rotate(CW);				/* Function to rotate motor Clock-wise*/
    24c8:	80 e0       	ldi	r24, 0x00	; 0
    24ca:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <DcMotor_Rotate>
    			delay_Timer0(250,15);			/*delay function by timer0*/
    24ce:	8a ef       	ldi	r24, 0xFA	; 250
    24d0:	90 e0       	ldi	r25, 0x00	; 0
    24d2:	6f e0       	ldi	r22, 0x0F	; 15
    24d4:	70 e0       	ldi	r23, 0x00	; 0
    24d6:	0e 94 a4 08 	call	0x1148	; 0x1148 <delay_Timer0>
    			DcMotor_Rotate(STOP);
    24da:	82 e0       	ldi	r24, 0x02	; 2
    24dc:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <DcMotor_Rotate>
    			delay_Timer0(250,3);
    24e0:	8a ef       	ldi	r24, 0xFA	; 250
    24e2:	90 e0       	ldi	r25, 0x00	; 0
    24e4:	63 e0       	ldi	r22, 0x03	; 3
    24e6:	70 e0       	ldi	r23, 0x00	; 0
    24e8:	0e 94 a4 08 	call	0x1148	; 0x1148 <delay_Timer0>
    			DcMotor_Rotate(CCW);
    24ec:	81 e0       	ldi	r24, 0x01	; 1
    24ee:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <DcMotor_Rotate>
    			delay_Timer0(250,15);
    24f2:	8a ef       	ldi	r24, 0xFA	; 250
    24f4:	90 e0       	ldi	r25, 0x00	; 0
    24f6:	6f e0       	ldi	r22, 0x0F	; 15
    24f8:	70 e0       	ldi	r23, 0x00	; 0
    24fa:	0e 94 a4 08 	call	0x1148	; 0x1148 <delay_Timer0>
    			DcMotor_Rotate(STOP);
    24fe:	82 e0       	ldi	r24, 0x02	; 2
    2500:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <DcMotor_Rotate>
    2504:	21 cf       	rjmp	.-446    	; 0x2348 <main+0x36>
    		}
    		else if(state!=0){					/*checking the validation of password*/
    2506:	8a ad       	ldd	r24, Y+58	; 0x3a
    2508:	88 23       	and	r24, r24
    250a:	09 f4       	brne	.+2      	; 0x250e <main+0x1fc>
    250c:	1d cf       	rjmp	.-454    	; 0x2348 <main+0x36>
    250e:	80 e0       	ldi	r24, 0x00	; 0
    2510:	90 e0       	ldi	r25, 0x00	; 0
    2512:	a8 e4       	ldi	r26, 0x48	; 72
    2514:	b3 e4       	ldi	r27, 0x43	; 67
    2516:	8f a3       	std	Y+39, r24	; 0x27
    2518:	98 a7       	std	Y+40, r25	; 0x28
    251a:	a9 a7       	std	Y+41, r26	; 0x29
    251c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    251e:	6f a1       	ldd	r22, Y+39	; 0x27
    2520:	78 a5       	ldd	r23, Y+40	; 0x28
    2522:	89 a5       	ldd	r24, Y+41	; 0x29
    2524:	9a a5       	ldd	r25, Y+42	; 0x2a
    2526:	20 e0       	ldi	r18, 0x00	; 0
    2528:	30 e0       	ldi	r19, 0x00	; 0
    252a:	4a ef       	ldi	r20, 0xFA	; 250
    252c:	54 e4       	ldi	r21, 0x44	; 68
    252e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2532:	dc 01       	movw	r26, r24
    2534:	cb 01       	movw	r24, r22
    2536:	8b a3       	std	Y+35, r24	; 0x23
    2538:	9c a3       	std	Y+36, r25	; 0x24
    253a:	ad a3       	std	Y+37, r26	; 0x25
    253c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    253e:	6b a1       	ldd	r22, Y+35	; 0x23
    2540:	7c a1       	ldd	r23, Y+36	; 0x24
    2542:	8d a1       	ldd	r24, Y+37	; 0x25
    2544:	9e a1       	ldd	r25, Y+38	; 0x26
    2546:	20 e0       	ldi	r18, 0x00	; 0
    2548:	30 e0       	ldi	r19, 0x00	; 0
    254a:	40 e8       	ldi	r20, 0x80	; 128
    254c:	5f e3       	ldi	r21, 0x3F	; 63
    254e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2552:	88 23       	and	r24, r24
    2554:	2c f4       	brge	.+10     	; 0x2560 <main+0x24e>
		__ticks = 1;
    2556:	81 e0       	ldi	r24, 0x01	; 1
    2558:	90 e0       	ldi	r25, 0x00	; 0
    255a:	9a a3       	std	Y+34, r25	; 0x22
    255c:	89 a3       	std	Y+33, r24	; 0x21
    255e:	3f c0       	rjmp	.+126    	; 0x25de <main+0x2cc>
	else if (__tmp > 65535)
    2560:	6b a1       	ldd	r22, Y+35	; 0x23
    2562:	7c a1       	ldd	r23, Y+36	; 0x24
    2564:	8d a1       	ldd	r24, Y+37	; 0x25
    2566:	9e a1       	ldd	r25, Y+38	; 0x26
    2568:	20 e0       	ldi	r18, 0x00	; 0
    256a:	3f ef       	ldi	r19, 0xFF	; 255
    256c:	4f e7       	ldi	r20, 0x7F	; 127
    256e:	57 e4       	ldi	r21, 0x47	; 71
    2570:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2574:	18 16       	cp	r1, r24
    2576:	4c f5       	brge	.+82     	; 0x25ca <main+0x2b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2578:	6f a1       	ldd	r22, Y+39	; 0x27
    257a:	78 a5       	ldd	r23, Y+40	; 0x28
    257c:	89 a5       	ldd	r24, Y+41	; 0x29
    257e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2580:	20 e0       	ldi	r18, 0x00	; 0
    2582:	30 e0       	ldi	r19, 0x00	; 0
    2584:	40 e2       	ldi	r20, 0x20	; 32
    2586:	51 e4       	ldi	r21, 0x41	; 65
    2588:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    258c:	dc 01       	movw	r26, r24
    258e:	cb 01       	movw	r24, r22
    2590:	bc 01       	movw	r22, r24
    2592:	cd 01       	movw	r24, r26
    2594:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2598:	dc 01       	movw	r26, r24
    259a:	cb 01       	movw	r24, r22
    259c:	9a a3       	std	Y+34, r25	; 0x22
    259e:	89 a3       	std	Y+33, r24	; 0x21
    25a0:	0f c0       	rjmp	.+30     	; 0x25c0 <main+0x2ae>
    25a2:	88 ec       	ldi	r24, 0xC8	; 200
    25a4:	90 e0       	ldi	r25, 0x00	; 0
    25a6:	98 a3       	std	Y+32, r25	; 0x20
    25a8:	8f 8f       	std	Y+31, r24	; 0x1f
    25aa:	8f 8d       	ldd	r24, Y+31	; 0x1f
    25ac:	98 a1       	ldd	r25, Y+32	; 0x20
    25ae:	01 97       	sbiw	r24, 0x01	; 1
    25b0:	f1 f7       	brne	.-4      	; 0x25ae <main+0x29c>
    25b2:	98 a3       	std	Y+32, r25	; 0x20
    25b4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25b6:	89 a1       	ldd	r24, Y+33	; 0x21
    25b8:	9a a1       	ldd	r25, Y+34	; 0x22
    25ba:	01 97       	sbiw	r24, 0x01	; 1
    25bc:	9a a3       	std	Y+34, r25	; 0x22
    25be:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25c0:	89 a1       	ldd	r24, Y+33	; 0x21
    25c2:	9a a1       	ldd	r25, Y+34	; 0x22
    25c4:	00 97       	sbiw	r24, 0x00	; 0
    25c6:	69 f7       	brne	.-38     	; 0x25a2 <main+0x290>
    25c8:	14 c0       	rjmp	.+40     	; 0x25f2 <main+0x2e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25ca:	6b a1       	ldd	r22, Y+35	; 0x23
    25cc:	7c a1       	ldd	r23, Y+36	; 0x24
    25ce:	8d a1       	ldd	r24, Y+37	; 0x25
    25d0:	9e a1       	ldd	r25, Y+38	; 0x26
    25d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25d6:	dc 01       	movw	r26, r24
    25d8:	cb 01       	movw	r24, r22
    25da:	9a a3       	std	Y+34, r25	; 0x22
    25dc:	89 a3       	std	Y+33, r24	; 0x21
    25de:	89 a1       	ldd	r24, Y+33	; 0x21
    25e0:	9a a1       	ldd	r25, Y+34	; 0x22
    25e2:	9e 8f       	std	Y+30, r25	; 0x1e
    25e4:	8d 8f       	std	Y+29, r24	; 0x1d
    25e6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    25e8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    25ea:	01 97       	sbiw	r24, 0x01	; 1
    25ec:	f1 f7       	brne	.-4      	; 0x25ea <main+0x2d8>
    25ee:	9e 8f       	std	Y+30, r25	; 0x1e
    25f0:	8d 8f       	std	Y+29, r24	; 0x1d
    			_delay_ms(200);
    			UART_sendByte(INVALID_PASS);	/* sending invalid command to micro conroller*/
    25f2:	8b e0       	ldi	r24, 0x0B	; 11
    25f4:	0e 94 d3 14 	call	0x29a6	; 0x29a6 <UART_sendByte>
    25f8:	a7 ce       	rjmp	.-690    	; 0x2348 <main+0x36>
    		}
    		break;
    	case CHANGE_PASS:
    		UART_receiveString(Npass);			/*Receiving entered password from other micro controller*/
    25fa:	ce 01       	movw	r24, r28
    25fc:	84 5b       	subi	r24, 0xB4	; 180
    25fe:	9f 4f       	sbci	r25, 0xFF	; 255
    2600:	0e 94 22 15 	call	0x2a44	; 0x2a44 <UART_receiveString>
    		state=compare_pass(pass,Npass);		/*comparing password that user entered and pass saved in EEPROM*/
    2604:	ce 01       	movw	r24, r28
    2606:	cb 96       	adiw	r24, 0x3b	; 59
    2608:	9e 01       	movw	r18, r28
    260a:	24 5b       	subi	r18, 0xB4	; 180
    260c:	3f 4f       	sbci	r19, 0xFF	; 255
    260e:	b9 01       	movw	r22, r18
    2610:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <compare_pass>
    2614:	8a af       	std	Y+58, r24	; 0x3a
    		if(state==0){						/*checking the validation of password*/
    2616:	8a ad       	ldd	r24, Y+58	; 0x3a
    2618:	88 23       	and	r24, r24
    261a:	09 f0       	breq	.+2      	; 0x261e <main+0x30c>
    261c:	76 c0       	rjmp	.+236    	; 0x270a <main+0x3f8>
    261e:	80 e0       	ldi	r24, 0x00	; 0
    2620:	90 e0       	ldi	r25, 0x00	; 0
    2622:	a8 e4       	ldi	r26, 0x48	; 72
    2624:	b3 e4       	ldi	r27, 0x43	; 67
    2626:	89 8f       	std	Y+25, r24	; 0x19
    2628:	9a 8f       	std	Y+26, r25	; 0x1a
    262a:	ab 8f       	std	Y+27, r26	; 0x1b
    262c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    262e:	69 8d       	ldd	r22, Y+25	; 0x19
    2630:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2632:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2634:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2636:	20 e0       	ldi	r18, 0x00	; 0
    2638:	30 e0       	ldi	r19, 0x00	; 0
    263a:	4a ef       	ldi	r20, 0xFA	; 250
    263c:	54 e4       	ldi	r21, 0x44	; 68
    263e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2642:	dc 01       	movw	r26, r24
    2644:	cb 01       	movw	r24, r22
    2646:	8d 8b       	std	Y+21, r24	; 0x15
    2648:	9e 8b       	std	Y+22, r25	; 0x16
    264a:	af 8b       	std	Y+23, r26	; 0x17
    264c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    264e:	6d 89       	ldd	r22, Y+21	; 0x15
    2650:	7e 89       	ldd	r23, Y+22	; 0x16
    2652:	8f 89       	ldd	r24, Y+23	; 0x17
    2654:	98 8d       	ldd	r25, Y+24	; 0x18
    2656:	20 e0       	ldi	r18, 0x00	; 0
    2658:	30 e0       	ldi	r19, 0x00	; 0
    265a:	40 e8       	ldi	r20, 0x80	; 128
    265c:	5f e3       	ldi	r21, 0x3F	; 63
    265e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2662:	88 23       	and	r24, r24
    2664:	2c f4       	brge	.+10     	; 0x2670 <main+0x35e>
		__ticks = 1;
    2666:	81 e0       	ldi	r24, 0x01	; 1
    2668:	90 e0       	ldi	r25, 0x00	; 0
    266a:	9c 8b       	std	Y+20, r25	; 0x14
    266c:	8b 8b       	std	Y+19, r24	; 0x13
    266e:	3f c0       	rjmp	.+126    	; 0x26ee <main+0x3dc>
	else if (__tmp > 65535)
    2670:	6d 89       	ldd	r22, Y+21	; 0x15
    2672:	7e 89       	ldd	r23, Y+22	; 0x16
    2674:	8f 89       	ldd	r24, Y+23	; 0x17
    2676:	98 8d       	ldd	r25, Y+24	; 0x18
    2678:	20 e0       	ldi	r18, 0x00	; 0
    267a:	3f ef       	ldi	r19, 0xFF	; 255
    267c:	4f e7       	ldi	r20, 0x7F	; 127
    267e:	57 e4       	ldi	r21, 0x47	; 71
    2680:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2684:	18 16       	cp	r1, r24
    2686:	4c f5       	brge	.+82     	; 0x26da <main+0x3c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2688:	69 8d       	ldd	r22, Y+25	; 0x19
    268a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    268c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    268e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2690:	20 e0       	ldi	r18, 0x00	; 0
    2692:	30 e0       	ldi	r19, 0x00	; 0
    2694:	40 e2       	ldi	r20, 0x20	; 32
    2696:	51 e4       	ldi	r21, 0x41	; 65
    2698:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    269c:	dc 01       	movw	r26, r24
    269e:	cb 01       	movw	r24, r22
    26a0:	bc 01       	movw	r22, r24
    26a2:	cd 01       	movw	r24, r26
    26a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26a8:	dc 01       	movw	r26, r24
    26aa:	cb 01       	movw	r24, r22
    26ac:	9c 8b       	std	Y+20, r25	; 0x14
    26ae:	8b 8b       	std	Y+19, r24	; 0x13
    26b0:	0f c0       	rjmp	.+30     	; 0x26d0 <main+0x3be>
    26b2:	88 ec       	ldi	r24, 0xC8	; 200
    26b4:	90 e0       	ldi	r25, 0x00	; 0
    26b6:	9a 8b       	std	Y+18, r25	; 0x12
    26b8:	89 8b       	std	Y+17, r24	; 0x11
    26ba:	89 89       	ldd	r24, Y+17	; 0x11
    26bc:	9a 89       	ldd	r25, Y+18	; 0x12
    26be:	01 97       	sbiw	r24, 0x01	; 1
    26c0:	f1 f7       	brne	.-4      	; 0x26be <main+0x3ac>
    26c2:	9a 8b       	std	Y+18, r25	; 0x12
    26c4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26c6:	8b 89       	ldd	r24, Y+19	; 0x13
    26c8:	9c 89       	ldd	r25, Y+20	; 0x14
    26ca:	01 97       	sbiw	r24, 0x01	; 1
    26cc:	9c 8b       	std	Y+20, r25	; 0x14
    26ce:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26d0:	8b 89       	ldd	r24, Y+19	; 0x13
    26d2:	9c 89       	ldd	r25, Y+20	; 0x14
    26d4:	00 97       	sbiw	r24, 0x00	; 0
    26d6:	69 f7       	brne	.-38     	; 0x26b2 <main+0x3a0>
    26d8:	14 c0       	rjmp	.+40     	; 0x2702 <main+0x3f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26da:	6d 89       	ldd	r22, Y+21	; 0x15
    26dc:	7e 89       	ldd	r23, Y+22	; 0x16
    26de:	8f 89       	ldd	r24, Y+23	; 0x17
    26e0:	98 8d       	ldd	r25, Y+24	; 0x18
    26e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26e6:	dc 01       	movw	r26, r24
    26e8:	cb 01       	movw	r24, r22
    26ea:	9c 8b       	std	Y+20, r25	; 0x14
    26ec:	8b 8b       	std	Y+19, r24	; 0x13
    26ee:	8b 89       	ldd	r24, Y+19	; 0x13
    26f0:	9c 89       	ldd	r25, Y+20	; 0x14
    26f2:	98 8b       	std	Y+16, r25	; 0x10
    26f4:	8f 87       	std	Y+15, r24	; 0x0f
    26f6:	8f 85       	ldd	r24, Y+15	; 0x0f
    26f8:	98 89       	ldd	r25, Y+16	; 0x10
    26fa:	01 97       	sbiw	r24, 0x01	; 1
    26fc:	f1 f7       	brne	.-4      	; 0x26fa <main+0x3e8>
    26fe:	98 8b       	std	Y+16, r25	; 0x10
    2700:	8f 87       	std	Y+15, r24	; 0x0f
    			_delay_ms(200);
    			UART_sendByte(CORRECT_PASS);
    2702:	8a e0       	ldi	r24, 0x0A	; 10
    2704:	0e 94 d3 14 	call	0x29a6	; 0x29a6 <UART_sendByte>
    2708:	1f ce       	rjmp	.-962    	; 0x2348 <main+0x36>
    		}
    		else if(state!=0){					/*checking the validation of password*/
    270a:	8a ad       	ldd	r24, Y+58	; 0x3a
    270c:	88 23       	and	r24, r24
    270e:	09 f4       	brne	.+2      	; 0x2712 <main+0x400>
    2710:	1b ce       	rjmp	.-970    	; 0x2348 <main+0x36>
    2712:	80 e0       	ldi	r24, 0x00	; 0
    2714:	90 e0       	ldi	r25, 0x00	; 0
    2716:	a8 e4       	ldi	r26, 0x48	; 72
    2718:	b3 e4       	ldi	r27, 0x43	; 67
    271a:	8b 87       	std	Y+11, r24	; 0x0b
    271c:	9c 87       	std	Y+12, r25	; 0x0c
    271e:	ad 87       	std	Y+13, r26	; 0x0d
    2720:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2722:	6b 85       	ldd	r22, Y+11	; 0x0b
    2724:	7c 85       	ldd	r23, Y+12	; 0x0c
    2726:	8d 85       	ldd	r24, Y+13	; 0x0d
    2728:	9e 85       	ldd	r25, Y+14	; 0x0e
    272a:	20 e0       	ldi	r18, 0x00	; 0
    272c:	30 e0       	ldi	r19, 0x00	; 0
    272e:	4a ef       	ldi	r20, 0xFA	; 250
    2730:	54 e4       	ldi	r21, 0x44	; 68
    2732:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2736:	dc 01       	movw	r26, r24
    2738:	cb 01       	movw	r24, r22
    273a:	8f 83       	std	Y+7, r24	; 0x07
    273c:	98 87       	std	Y+8, r25	; 0x08
    273e:	a9 87       	std	Y+9, r26	; 0x09
    2740:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2742:	6f 81       	ldd	r22, Y+7	; 0x07
    2744:	78 85       	ldd	r23, Y+8	; 0x08
    2746:	89 85       	ldd	r24, Y+9	; 0x09
    2748:	9a 85       	ldd	r25, Y+10	; 0x0a
    274a:	20 e0       	ldi	r18, 0x00	; 0
    274c:	30 e0       	ldi	r19, 0x00	; 0
    274e:	40 e8       	ldi	r20, 0x80	; 128
    2750:	5f e3       	ldi	r21, 0x3F	; 63
    2752:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2756:	88 23       	and	r24, r24
    2758:	2c f4       	brge	.+10     	; 0x2764 <main+0x452>
		__ticks = 1;
    275a:	81 e0       	ldi	r24, 0x01	; 1
    275c:	90 e0       	ldi	r25, 0x00	; 0
    275e:	9e 83       	std	Y+6, r25	; 0x06
    2760:	8d 83       	std	Y+5, r24	; 0x05
    2762:	3f c0       	rjmp	.+126    	; 0x27e2 <main+0x4d0>
	else if (__tmp > 65535)
    2764:	6f 81       	ldd	r22, Y+7	; 0x07
    2766:	78 85       	ldd	r23, Y+8	; 0x08
    2768:	89 85       	ldd	r24, Y+9	; 0x09
    276a:	9a 85       	ldd	r25, Y+10	; 0x0a
    276c:	20 e0       	ldi	r18, 0x00	; 0
    276e:	3f ef       	ldi	r19, 0xFF	; 255
    2770:	4f e7       	ldi	r20, 0x7F	; 127
    2772:	57 e4       	ldi	r21, 0x47	; 71
    2774:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2778:	18 16       	cp	r1, r24
    277a:	4c f5       	brge	.+82     	; 0x27ce <main+0x4bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    277c:	6b 85       	ldd	r22, Y+11	; 0x0b
    277e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2780:	8d 85       	ldd	r24, Y+13	; 0x0d
    2782:	9e 85       	ldd	r25, Y+14	; 0x0e
    2784:	20 e0       	ldi	r18, 0x00	; 0
    2786:	30 e0       	ldi	r19, 0x00	; 0
    2788:	40 e2       	ldi	r20, 0x20	; 32
    278a:	51 e4       	ldi	r21, 0x41	; 65
    278c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2790:	dc 01       	movw	r26, r24
    2792:	cb 01       	movw	r24, r22
    2794:	bc 01       	movw	r22, r24
    2796:	cd 01       	movw	r24, r26
    2798:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    279c:	dc 01       	movw	r26, r24
    279e:	cb 01       	movw	r24, r22
    27a0:	9e 83       	std	Y+6, r25	; 0x06
    27a2:	8d 83       	std	Y+5, r24	; 0x05
    27a4:	0f c0       	rjmp	.+30     	; 0x27c4 <main+0x4b2>
    27a6:	88 ec       	ldi	r24, 0xC8	; 200
    27a8:	90 e0       	ldi	r25, 0x00	; 0
    27aa:	9c 83       	std	Y+4, r25	; 0x04
    27ac:	8b 83       	std	Y+3, r24	; 0x03
    27ae:	8b 81       	ldd	r24, Y+3	; 0x03
    27b0:	9c 81       	ldd	r25, Y+4	; 0x04
    27b2:	01 97       	sbiw	r24, 0x01	; 1
    27b4:	f1 f7       	brne	.-4      	; 0x27b2 <main+0x4a0>
    27b6:	9c 83       	std	Y+4, r25	; 0x04
    27b8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27ba:	8d 81       	ldd	r24, Y+5	; 0x05
    27bc:	9e 81       	ldd	r25, Y+6	; 0x06
    27be:	01 97       	sbiw	r24, 0x01	; 1
    27c0:	9e 83       	std	Y+6, r25	; 0x06
    27c2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27c4:	8d 81       	ldd	r24, Y+5	; 0x05
    27c6:	9e 81       	ldd	r25, Y+6	; 0x06
    27c8:	00 97       	sbiw	r24, 0x00	; 0
    27ca:	69 f7       	brne	.-38     	; 0x27a6 <main+0x494>
    27cc:	14 c0       	rjmp	.+40     	; 0x27f6 <main+0x4e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27ce:	6f 81       	ldd	r22, Y+7	; 0x07
    27d0:	78 85       	ldd	r23, Y+8	; 0x08
    27d2:	89 85       	ldd	r24, Y+9	; 0x09
    27d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    27d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27da:	dc 01       	movw	r26, r24
    27dc:	cb 01       	movw	r24, r22
    27de:	9e 83       	std	Y+6, r25	; 0x06
    27e0:	8d 83       	std	Y+5, r24	; 0x05
    27e2:	8d 81       	ldd	r24, Y+5	; 0x05
    27e4:	9e 81       	ldd	r25, Y+6	; 0x06
    27e6:	9a 83       	std	Y+2, r25	; 0x02
    27e8:	89 83       	std	Y+1, r24	; 0x01
    27ea:	89 81       	ldd	r24, Y+1	; 0x01
    27ec:	9a 81       	ldd	r25, Y+2	; 0x02
    27ee:	01 97       	sbiw	r24, 0x01	; 1
    27f0:	f1 f7       	brne	.-4      	; 0x27ee <main+0x4dc>
    27f2:	9a 83       	std	Y+2, r25	; 0x02
    27f4:	89 83       	std	Y+1, r24	; 0x01
    			_delay_ms(200);
    			UART_sendByte(INVALID_PASS);
    27f6:	8b e0       	ldi	r24, 0x0B	; 11
    27f8:	0e 94 d3 14 	call	0x29a6	; 0x29a6 <UART_sendByte>
    27fc:	a5 cd       	rjmp	.-1206   	; 0x2348 <main+0x36>
    		}
    		break;
    	case ACTIVATE_BUZZER:					/* activating buzzer command*/
    		Buzzer_Start();
    27fe:	0e 94 af 05 	call	0xb5e	; 0xb5e <Buzzer_Start>
    		delay_Timer0(250,60);
    2802:	8a ef       	ldi	r24, 0xFA	; 250
    2804:	90 e0       	ldi	r25, 0x00	; 0
    2806:	6c e3       	ldi	r22, 0x3C	; 60
    2808:	70 e0       	ldi	r23, 0x00	; 0
    280a:	0e 94 a4 08 	call	0x1148	; 0x1148 <delay_Timer0>
    		Buzzer_stop();
    280e:	0e 94 bb 05 	call	0xb76	; 0xb76 <Buzzer_stop>
    2812:	9a cd       	rjmp	.-1228   	; 0x2348 <main+0x36>

00002814 <TWI_init>:

#include "common_macros.h"
#include <avr/io.h>

void TWI_init(void)
{
    2814:	df 93       	push	r29
    2816:	cf 93       	push	r28
    2818:	cd b7       	in	r28, 0x3d	; 61
    281a:	de b7       	in	r29, 0x3e	; 62
    /* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
    TWBR = 0x02;
    281c:	e0 e2       	ldi	r30, 0x20	; 32
    281e:	f0 e0       	ldi	r31, 0x00	; 0
    2820:	82 e0       	ldi	r24, 0x02	; 2
    2822:	80 83       	st	Z, r24
	TWSR = 0x00;
    2824:	e1 e2       	ldi	r30, 0x21	; 33
    2826:	f0 e0       	ldi	r31, 0x00	; 0
    2828:	10 82       	st	Z, r1
	
    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = 0b00000010; // my address = 0x01 :) 
    282a:	e2 e2       	ldi	r30, 0x22	; 34
    282c:	f0 e0       	ldi	r31, 0x00	; 0
    282e:	82 e0       	ldi	r24, 0x02	; 2
    2830:	80 83       	st	Z, r24
	
    TWCR = (1<<TWEN); /* enable TWI */
    2832:	e6 e5       	ldi	r30, 0x56	; 86
    2834:	f0 e0       	ldi	r31, 0x00	; 0
    2836:	84 e0       	ldi	r24, 0x04	; 4
    2838:	80 83       	st	Z, r24
}
    283a:	cf 91       	pop	r28
    283c:	df 91       	pop	r29
    283e:	08 95       	ret

00002840 <TWI_start>:

void TWI_start(void)
{
    2840:	df 93       	push	r29
    2842:	cf 93       	push	r28
    2844:	cd b7       	in	r28, 0x3d	; 61
    2846:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    2848:	e6 e5       	ldi	r30, 0x56	; 86
    284a:	f0 e0       	ldi	r31, 0x00	; 0
    284c:	84 ea       	ldi	r24, 0xA4	; 164
    284e:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2850:	e6 e5       	ldi	r30, 0x56	; 86
    2852:	f0 e0       	ldi	r31, 0x00	; 0
    2854:	80 81       	ld	r24, Z
    2856:	88 23       	and	r24, r24
    2858:	dc f7       	brge	.-10     	; 0x2850 <TWI_start+0x10>
}
    285a:	cf 91       	pop	r28
    285c:	df 91       	pop	r29
    285e:	08 95       	ret

00002860 <TWI_stop>:

void TWI_stop(void)
{
    2860:	df 93       	push	r29
    2862:	cf 93       	push	r28
    2864:	cd b7       	in	r28, 0x3d	; 61
    2866:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    2868:	e6 e5       	ldi	r30, 0x56	; 86
    286a:	f0 e0       	ldi	r31, 0x00	; 0
    286c:	84 e9       	ldi	r24, 0x94	; 148
    286e:	80 83       	st	Z, r24
}
    2870:	cf 91       	pop	r28
    2872:	df 91       	pop	r29
    2874:	08 95       	ret

00002876 <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    2876:	df 93       	push	r29
    2878:	cf 93       	push	r28
    287a:	0f 92       	push	r0
    287c:	cd b7       	in	r28, 0x3d	; 61
    287e:	de b7       	in	r29, 0x3e	; 62
    2880:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    2882:	e3 e2       	ldi	r30, 0x23	; 35
    2884:	f0 e0       	ldi	r31, 0x00	; 0
    2886:	89 81       	ldd	r24, Y+1	; 0x01
    2888:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    288a:	e6 e5       	ldi	r30, 0x56	; 86
    288c:	f0 e0       	ldi	r31, 0x00	; 0
    288e:	84 e8       	ldi	r24, 0x84	; 132
    2890:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2892:	e6 e5       	ldi	r30, 0x56	; 86
    2894:	f0 e0       	ldi	r31, 0x00	; 0
    2896:	80 81       	ld	r24, Z
    2898:	88 23       	and	r24, r24
    289a:	dc f7       	brge	.-10     	; 0x2892 <TWI_writeByte+0x1c>
}
    289c:	0f 90       	pop	r0
    289e:	cf 91       	pop	r28
    28a0:	df 91       	pop	r29
    28a2:	08 95       	ret

000028a4 <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    28a4:	df 93       	push	r29
    28a6:	cf 93       	push	r28
    28a8:	cd b7       	in	r28, 0x3d	; 61
    28aa:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    28ac:	e6 e5       	ldi	r30, 0x56	; 86
    28ae:	f0 e0       	ldi	r31, 0x00	; 0
    28b0:	84 ec       	ldi	r24, 0xC4	; 196
    28b2:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    28b4:	e6 e5       	ldi	r30, 0x56	; 86
    28b6:	f0 e0       	ldi	r31, 0x00	; 0
    28b8:	80 81       	ld	r24, Z
    28ba:	88 23       	and	r24, r24
    28bc:	dc f7       	brge	.-10     	; 0x28b4 <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    28be:	e3 e2       	ldi	r30, 0x23	; 35
    28c0:	f0 e0       	ldi	r31, 0x00	; 0
    28c2:	80 81       	ld	r24, Z
}
    28c4:	cf 91       	pop	r28
    28c6:	df 91       	pop	r29
    28c8:	08 95       	ret

000028ca <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    28ca:	df 93       	push	r29
    28cc:	cf 93       	push	r28
    28ce:	cd b7       	in	r28, 0x3d	; 61
    28d0:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    28d2:	e6 e5       	ldi	r30, 0x56	; 86
    28d4:	f0 e0       	ldi	r31, 0x00	; 0
    28d6:	84 e8       	ldi	r24, 0x84	; 132
    28d8:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    28da:	e6 e5       	ldi	r30, 0x56	; 86
    28dc:	f0 e0       	ldi	r31, 0x00	; 0
    28de:	80 81       	ld	r24, Z
    28e0:	88 23       	and	r24, r24
    28e2:	dc f7       	brge	.-10     	; 0x28da <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    28e4:	e3 e2       	ldi	r30, 0x23	; 35
    28e6:	f0 e0       	ldi	r31, 0x00	; 0
    28e8:	80 81       	ld	r24, Z
}
    28ea:	cf 91       	pop	r28
    28ec:	df 91       	pop	r29
    28ee:	08 95       	ret

000028f0 <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    28f0:	df 93       	push	r29
    28f2:	cf 93       	push	r28
    28f4:	0f 92       	push	r0
    28f6:	cd b7       	in	r28, 0x3d	; 61
    28f8:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    28fa:	e1 e2       	ldi	r30, 0x21	; 33
    28fc:	f0 e0       	ldi	r31, 0x00	; 0
    28fe:	80 81       	ld	r24, Z
    2900:	88 7f       	andi	r24, 0xF8	; 248
    2902:	89 83       	std	Y+1, r24	; 0x01
    return status;
    2904:	89 81       	ldd	r24, Y+1	; 0x01
}
    2906:	0f 90       	pop	r0
    2908:	cf 91       	pop	r28
    290a:	df 91       	pop	r29
    290c:	08 95       	ret

0000290e <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(uint32 baud_rate)
{
    290e:	df 93       	push	r29
    2910:	cf 93       	push	r28
    2912:	00 d0       	rcall	.+0      	; 0x2914 <UART_init+0x6>
    2914:	00 d0       	rcall	.+0      	; 0x2916 <UART_init+0x8>
    2916:	00 d0       	rcall	.+0      	; 0x2918 <UART_init+0xa>
    2918:	cd b7       	in	r28, 0x3d	; 61
    291a:	de b7       	in	r29, 0x3e	; 62
    291c:	6b 83       	std	Y+3, r22	; 0x03
    291e:	7c 83       	std	Y+4, r23	; 0x04
    2920:	8d 83       	std	Y+5, r24	; 0x05
    2922:	9e 83       	std	Y+6, r25	; 0x06
	uint16 ubrr_value = 0;
    2924:	1a 82       	std	Y+2, r1	; 0x02
    2926:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    2928:	eb e2       	ldi	r30, 0x2B	; 43
    292a:	f0 e0       	ldi	r31, 0x00	; 0
    292c:	82 e0       	ldi	r24, 0x02	; 2
    292e:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    2930:	ea e2       	ldi	r30, 0x2A	; 42
    2932:	f0 e0       	ldi	r31, 0x00	; 0
    2934:	88 e1       	ldi	r24, 0x18	; 24
    2936:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1); 
    2938:	e0 e4       	ldi	r30, 0x40	; 64
    293a:	f0 e0       	ldi	r31, 0x00	; 0
    293c:	86 e8       	ldi	r24, 0x86	; 134
    293e:	80 83       	st	Z, r24
	
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (baud_rate * 8UL))) - 1);
    2940:	8b 81       	ldd	r24, Y+3	; 0x03
    2942:	9c 81       	ldd	r25, Y+4	; 0x04
    2944:	ad 81       	ldd	r26, Y+5	; 0x05
    2946:	be 81       	ldd	r27, Y+6	; 0x06
    2948:	88 0f       	add	r24, r24
    294a:	99 1f       	adc	r25, r25
    294c:	aa 1f       	adc	r26, r26
    294e:	bb 1f       	adc	r27, r27
    2950:	88 0f       	add	r24, r24
    2952:	99 1f       	adc	r25, r25
    2954:	aa 1f       	adc	r26, r26
    2956:	bb 1f       	adc	r27, r27
    2958:	88 0f       	add	r24, r24
    295a:	99 1f       	adc	r25, r25
    295c:	aa 1f       	adc	r26, r26
    295e:	bb 1f       	adc	r27, r27
    2960:	9c 01       	movw	r18, r24
    2962:	ad 01       	movw	r20, r26
    2964:	80 e0       	ldi	r24, 0x00	; 0
    2966:	92 e1       	ldi	r25, 0x12	; 18
    2968:	aa e7       	ldi	r26, 0x7A	; 122
    296a:	b0 e0       	ldi	r27, 0x00	; 0
    296c:	bc 01       	movw	r22, r24
    296e:	cd 01       	movw	r24, r26
    2970:	0e 94 65 15 	call	0x2aca	; 0x2aca <__udivmodsi4>
    2974:	da 01       	movw	r26, r20
    2976:	c9 01       	movw	r24, r18
    2978:	01 97       	sbiw	r24, 0x01	; 1
    297a:	9a 83       	std	Y+2, r25	; 0x02
    297c:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    297e:	e0 e4       	ldi	r30, 0x40	; 64
    2980:	f0 e0       	ldi	r31, 0x00	; 0
    2982:	89 81       	ldd	r24, Y+1	; 0x01
    2984:	9a 81       	ldd	r25, Y+2	; 0x02
    2986:	89 2f       	mov	r24, r25
    2988:	99 27       	eor	r25, r25
    298a:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    298c:	e9 e2       	ldi	r30, 0x29	; 41
    298e:	f0 e0       	ldi	r31, 0x00	; 0
    2990:	89 81       	ldd	r24, Y+1	; 0x01
    2992:	80 83       	st	Z, r24
}
    2994:	26 96       	adiw	r28, 0x06	; 6
    2996:	0f b6       	in	r0, 0x3f	; 63
    2998:	f8 94       	cli
    299a:	de bf       	out	0x3e, r29	; 62
    299c:	0f be       	out	0x3f, r0	; 63
    299e:	cd bf       	out	0x3d, r28	; 61
    29a0:	cf 91       	pop	r28
    29a2:	df 91       	pop	r29
    29a4:	08 95       	ret

000029a6 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    29a6:	df 93       	push	r29
    29a8:	cf 93       	push	r28
    29aa:	0f 92       	push	r0
    29ac:	cd b7       	in	r28, 0x3d	; 61
    29ae:	de b7       	in	r29, 0x3e	; 62
    29b0:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    29b2:	eb e2       	ldi	r30, 0x2B	; 43
    29b4:	f0 e0       	ldi	r31, 0x00	; 0
    29b6:	80 81       	ld	r24, Z
    29b8:	88 2f       	mov	r24, r24
    29ba:	90 e0       	ldi	r25, 0x00	; 0
    29bc:	80 72       	andi	r24, 0x20	; 32
    29be:	90 70       	andi	r25, 0x00	; 0
    29c0:	00 97       	sbiw	r24, 0x00	; 0
    29c2:	b9 f3       	breq	.-18     	; 0x29b2 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    29c4:	ec e2       	ldi	r30, 0x2C	; 44
    29c6:	f0 e0       	ldi	r31, 0x00	; 0
    29c8:	89 81       	ldd	r24, Y+1	; 0x01
    29ca:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    29cc:	0f 90       	pop	r0
    29ce:	cf 91       	pop	r28
    29d0:	df 91       	pop	r29
    29d2:	08 95       	ret

000029d4 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    29d4:	df 93       	push	r29
    29d6:	cf 93       	push	r28
    29d8:	cd b7       	in	r28, 0x3d	; 61
    29da:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    29dc:	eb e2       	ldi	r30, 0x2B	; 43
    29de:	f0 e0       	ldi	r31, 0x00	; 0
    29e0:	80 81       	ld	r24, Z
    29e2:	88 23       	and	r24, r24
    29e4:	dc f7       	brge	.-10     	; 0x29dc <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    29e6:	ec e2       	ldi	r30, 0x2C	; 44
    29e8:	f0 e0       	ldi	r31, 0x00	; 0
    29ea:	80 81       	ld	r24, Z
}
    29ec:	cf 91       	pop	r28
    29ee:	df 91       	pop	r29
    29f0:	08 95       	ret

000029f2 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    29f2:	df 93       	push	r29
    29f4:	cf 93       	push	r28
    29f6:	00 d0       	rcall	.+0      	; 0x29f8 <UART_sendString+0x6>
    29f8:	0f 92       	push	r0
    29fa:	cd b7       	in	r28, 0x3d	; 61
    29fc:	de b7       	in	r29, 0x3e	; 62
    29fe:	9b 83       	std	Y+3, r25	; 0x03
    2a00:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2a02:	19 82       	std	Y+1, r1	; 0x01
    2a04:	0e c0       	rjmp	.+28     	; 0x2a22 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2a06:	89 81       	ldd	r24, Y+1	; 0x01
    2a08:	28 2f       	mov	r18, r24
    2a0a:	30 e0       	ldi	r19, 0x00	; 0
    2a0c:	8a 81       	ldd	r24, Y+2	; 0x02
    2a0e:	9b 81       	ldd	r25, Y+3	; 0x03
    2a10:	fc 01       	movw	r30, r24
    2a12:	e2 0f       	add	r30, r18
    2a14:	f3 1f       	adc	r31, r19
    2a16:	80 81       	ld	r24, Z
    2a18:	0e 94 d3 14 	call	0x29a6	; 0x29a6 <UART_sendByte>
		i++;
    2a1c:	89 81       	ldd	r24, Y+1	; 0x01
    2a1e:	8f 5f       	subi	r24, 0xFF	; 255
    2a20:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    2a22:	89 81       	ldd	r24, Y+1	; 0x01
    2a24:	28 2f       	mov	r18, r24
    2a26:	30 e0       	ldi	r19, 0x00	; 0
    2a28:	8a 81       	ldd	r24, Y+2	; 0x02
    2a2a:	9b 81       	ldd	r25, Y+3	; 0x03
    2a2c:	fc 01       	movw	r30, r24
    2a2e:	e2 0f       	add	r30, r18
    2a30:	f3 1f       	adc	r31, r19
    2a32:	80 81       	ld	r24, Z
    2a34:	88 23       	and	r24, r24
    2a36:	39 f7       	brne	.-50     	; 0x2a06 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    2a38:	0f 90       	pop	r0
    2a3a:	0f 90       	pop	r0
    2a3c:	0f 90       	pop	r0
    2a3e:	cf 91       	pop	r28
    2a40:	df 91       	pop	r29
    2a42:	08 95       	ret

00002a44 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    2a44:	0f 93       	push	r16
    2a46:	1f 93       	push	r17
    2a48:	df 93       	push	r29
    2a4a:	cf 93       	push	r28
    2a4c:	00 d0       	rcall	.+0      	; 0x2a4e <UART_receiveString+0xa>
    2a4e:	0f 92       	push	r0
    2a50:	cd b7       	in	r28, 0x3d	; 61
    2a52:	de b7       	in	r29, 0x3e	; 62
    2a54:	9b 83       	std	Y+3, r25	; 0x03
    2a56:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2a58:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    2a5a:	89 81       	ldd	r24, Y+1	; 0x01
    2a5c:	28 2f       	mov	r18, r24
    2a5e:	30 e0       	ldi	r19, 0x00	; 0
    2a60:	8a 81       	ldd	r24, Y+2	; 0x02
    2a62:	9b 81       	ldd	r25, Y+3	; 0x03
    2a64:	8c 01       	movw	r16, r24
    2a66:	02 0f       	add	r16, r18
    2a68:	13 1f       	adc	r17, r19
    2a6a:	0e 94 ea 14 	call	0x29d4	; 0x29d4 <UART_recieveByte>
    2a6e:	f8 01       	movw	r30, r16
    2a70:	80 83       	st	Z, r24
    2a72:	0f c0       	rjmp	.+30     	; 0x2a92 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    2a74:	89 81       	ldd	r24, Y+1	; 0x01
    2a76:	8f 5f       	subi	r24, 0xFF	; 255
    2a78:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    2a7a:	89 81       	ldd	r24, Y+1	; 0x01
    2a7c:	28 2f       	mov	r18, r24
    2a7e:	30 e0       	ldi	r19, 0x00	; 0
    2a80:	8a 81       	ldd	r24, Y+2	; 0x02
    2a82:	9b 81       	ldd	r25, Y+3	; 0x03
    2a84:	8c 01       	movw	r16, r24
    2a86:	02 0f       	add	r16, r18
    2a88:	13 1f       	adc	r17, r19
    2a8a:	0e 94 ea 14 	call	0x29d4	; 0x29d4 <UART_recieveByte>
    2a8e:	f8 01       	movw	r30, r16
    2a90:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    2a92:	89 81       	ldd	r24, Y+1	; 0x01
    2a94:	28 2f       	mov	r18, r24
    2a96:	30 e0       	ldi	r19, 0x00	; 0
    2a98:	8a 81       	ldd	r24, Y+2	; 0x02
    2a9a:	9b 81       	ldd	r25, Y+3	; 0x03
    2a9c:	fc 01       	movw	r30, r24
    2a9e:	e2 0f       	add	r30, r18
    2aa0:	f3 1f       	adc	r31, r19
    2aa2:	80 81       	ld	r24, Z
    2aa4:	83 32       	cpi	r24, 0x23	; 35
    2aa6:	31 f7       	brne	.-52     	; 0x2a74 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    2aa8:	89 81       	ldd	r24, Y+1	; 0x01
    2aaa:	28 2f       	mov	r18, r24
    2aac:	30 e0       	ldi	r19, 0x00	; 0
    2aae:	8a 81       	ldd	r24, Y+2	; 0x02
    2ab0:	9b 81       	ldd	r25, Y+3	; 0x03
    2ab2:	fc 01       	movw	r30, r24
    2ab4:	e2 0f       	add	r30, r18
    2ab6:	f3 1f       	adc	r31, r19
    2ab8:	10 82       	st	Z, r1
}
    2aba:	0f 90       	pop	r0
    2abc:	0f 90       	pop	r0
    2abe:	0f 90       	pop	r0
    2ac0:	cf 91       	pop	r28
    2ac2:	df 91       	pop	r29
    2ac4:	1f 91       	pop	r17
    2ac6:	0f 91       	pop	r16
    2ac8:	08 95       	ret

00002aca <__udivmodsi4>:
    2aca:	a1 e2       	ldi	r26, 0x21	; 33
    2acc:	1a 2e       	mov	r1, r26
    2ace:	aa 1b       	sub	r26, r26
    2ad0:	bb 1b       	sub	r27, r27
    2ad2:	fd 01       	movw	r30, r26
    2ad4:	0d c0       	rjmp	.+26     	; 0x2af0 <__udivmodsi4_ep>

00002ad6 <__udivmodsi4_loop>:
    2ad6:	aa 1f       	adc	r26, r26
    2ad8:	bb 1f       	adc	r27, r27
    2ada:	ee 1f       	adc	r30, r30
    2adc:	ff 1f       	adc	r31, r31
    2ade:	a2 17       	cp	r26, r18
    2ae0:	b3 07       	cpc	r27, r19
    2ae2:	e4 07       	cpc	r30, r20
    2ae4:	f5 07       	cpc	r31, r21
    2ae6:	20 f0       	brcs	.+8      	; 0x2af0 <__udivmodsi4_ep>
    2ae8:	a2 1b       	sub	r26, r18
    2aea:	b3 0b       	sbc	r27, r19
    2aec:	e4 0b       	sbc	r30, r20
    2aee:	f5 0b       	sbc	r31, r21

00002af0 <__udivmodsi4_ep>:
    2af0:	66 1f       	adc	r22, r22
    2af2:	77 1f       	adc	r23, r23
    2af4:	88 1f       	adc	r24, r24
    2af6:	99 1f       	adc	r25, r25
    2af8:	1a 94       	dec	r1
    2afa:	69 f7       	brne	.-38     	; 0x2ad6 <__udivmodsi4_loop>
    2afc:	60 95       	com	r22
    2afe:	70 95       	com	r23
    2b00:	80 95       	com	r24
    2b02:	90 95       	com	r25
    2b04:	9b 01       	movw	r18, r22
    2b06:	ac 01       	movw	r20, r24
    2b08:	bd 01       	movw	r22, r26
    2b0a:	cf 01       	movw	r24, r30
    2b0c:	08 95       	ret

00002b0e <__prologue_saves__>:
    2b0e:	2f 92       	push	r2
    2b10:	3f 92       	push	r3
    2b12:	4f 92       	push	r4
    2b14:	5f 92       	push	r5
    2b16:	6f 92       	push	r6
    2b18:	7f 92       	push	r7
    2b1a:	8f 92       	push	r8
    2b1c:	9f 92       	push	r9
    2b1e:	af 92       	push	r10
    2b20:	bf 92       	push	r11
    2b22:	cf 92       	push	r12
    2b24:	df 92       	push	r13
    2b26:	ef 92       	push	r14
    2b28:	ff 92       	push	r15
    2b2a:	0f 93       	push	r16
    2b2c:	1f 93       	push	r17
    2b2e:	cf 93       	push	r28
    2b30:	df 93       	push	r29
    2b32:	cd b7       	in	r28, 0x3d	; 61
    2b34:	de b7       	in	r29, 0x3e	; 62
    2b36:	ca 1b       	sub	r28, r26
    2b38:	db 0b       	sbc	r29, r27
    2b3a:	0f b6       	in	r0, 0x3f	; 63
    2b3c:	f8 94       	cli
    2b3e:	de bf       	out	0x3e, r29	; 62
    2b40:	0f be       	out	0x3f, r0	; 63
    2b42:	cd bf       	out	0x3d, r28	; 61
    2b44:	09 94       	ijmp

00002b46 <__epilogue_restores__>:
    2b46:	2a 88       	ldd	r2, Y+18	; 0x12
    2b48:	39 88       	ldd	r3, Y+17	; 0x11
    2b4a:	48 88       	ldd	r4, Y+16	; 0x10
    2b4c:	5f 84       	ldd	r5, Y+15	; 0x0f
    2b4e:	6e 84       	ldd	r6, Y+14	; 0x0e
    2b50:	7d 84       	ldd	r7, Y+13	; 0x0d
    2b52:	8c 84       	ldd	r8, Y+12	; 0x0c
    2b54:	9b 84       	ldd	r9, Y+11	; 0x0b
    2b56:	aa 84       	ldd	r10, Y+10	; 0x0a
    2b58:	b9 84       	ldd	r11, Y+9	; 0x09
    2b5a:	c8 84       	ldd	r12, Y+8	; 0x08
    2b5c:	df 80       	ldd	r13, Y+7	; 0x07
    2b5e:	ee 80       	ldd	r14, Y+6	; 0x06
    2b60:	fd 80       	ldd	r15, Y+5	; 0x05
    2b62:	0c 81       	ldd	r16, Y+4	; 0x04
    2b64:	1b 81       	ldd	r17, Y+3	; 0x03
    2b66:	aa 81       	ldd	r26, Y+2	; 0x02
    2b68:	b9 81       	ldd	r27, Y+1	; 0x01
    2b6a:	ce 0f       	add	r28, r30
    2b6c:	d1 1d       	adc	r29, r1
    2b6e:	0f b6       	in	r0, 0x3f	; 63
    2b70:	f8 94       	cli
    2b72:	de bf       	out	0x3e, r29	; 62
    2b74:	0f be       	out	0x3f, r0	; 63
    2b76:	cd bf       	out	0x3d, r28	; 61
    2b78:	ed 01       	movw	r28, r26
    2b7a:	08 95       	ret

00002b7c <strcmp>:
    2b7c:	fb 01       	movw	r30, r22
    2b7e:	dc 01       	movw	r26, r24
    2b80:	8d 91       	ld	r24, X+
    2b82:	01 90       	ld	r0, Z+
    2b84:	80 19       	sub	r24, r0
    2b86:	01 10       	cpse	r0, r1
    2b88:	d9 f3       	breq	.-10     	; 0x2b80 <strcmp+0x4>
    2b8a:	99 0b       	sbc	r25, r25
    2b8c:	08 95       	ret

00002b8e <itoa>:
    2b8e:	fb 01       	movw	r30, r22
    2b90:	9f 01       	movw	r18, r30
    2b92:	e8 94       	clt
    2b94:	42 30       	cpi	r20, 0x02	; 2
    2b96:	c4 f0       	brlt	.+48     	; 0x2bc8 <itoa+0x3a>
    2b98:	45 32       	cpi	r20, 0x25	; 37
    2b9a:	b4 f4       	brge	.+44     	; 0x2bc8 <itoa+0x3a>
    2b9c:	4a 30       	cpi	r20, 0x0A	; 10
    2b9e:	29 f4       	brne	.+10     	; 0x2baa <itoa+0x1c>
    2ba0:	97 fb       	bst	r25, 7
    2ba2:	1e f4       	brtc	.+6      	; 0x2baa <itoa+0x1c>
    2ba4:	90 95       	com	r25
    2ba6:	81 95       	neg	r24
    2ba8:	9f 4f       	sbci	r25, 0xFF	; 255
    2baa:	64 2f       	mov	r22, r20
    2bac:	77 27       	eor	r23, r23
    2bae:	0e 94 f8 15 	call	0x2bf0	; 0x2bf0 <__udivmodhi4>
    2bb2:	80 5d       	subi	r24, 0xD0	; 208
    2bb4:	8a 33       	cpi	r24, 0x3A	; 58
    2bb6:	0c f0       	brlt	.+2      	; 0x2bba <itoa+0x2c>
    2bb8:	89 5d       	subi	r24, 0xD9	; 217
    2bba:	81 93       	st	Z+, r24
    2bbc:	cb 01       	movw	r24, r22
    2bbe:	00 97       	sbiw	r24, 0x00	; 0
    2bc0:	a1 f7       	brne	.-24     	; 0x2baa <itoa+0x1c>
    2bc2:	16 f4       	brtc	.+4      	; 0x2bc8 <itoa+0x3a>
    2bc4:	5d e2       	ldi	r21, 0x2D	; 45
    2bc6:	51 93       	st	Z+, r21
    2bc8:	10 82       	st	Z, r1
    2bca:	c9 01       	movw	r24, r18
    2bcc:	0c 94 e8 15 	jmp	0x2bd0	; 0x2bd0 <strrev>

00002bd0 <strrev>:
    2bd0:	dc 01       	movw	r26, r24
    2bd2:	fc 01       	movw	r30, r24
    2bd4:	67 2f       	mov	r22, r23
    2bd6:	71 91       	ld	r23, Z+
    2bd8:	77 23       	and	r23, r23
    2bda:	e1 f7       	brne	.-8      	; 0x2bd4 <strrev+0x4>
    2bdc:	32 97       	sbiw	r30, 0x02	; 2
    2bde:	04 c0       	rjmp	.+8      	; 0x2be8 <strrev+0x18>
    2be0:	7c 91       	ld	r23, X
    2be2:	6d 93       	st	X+, r22
    2be4:	70 83       	st	Z, r23
    2be6:	62 91       	ld	r22, -Z
    2be8:	ae 17       	cp	r26, r30
    2bea:	bf 07       	cpc	r27, r31
    2bec:	c8 f3       	brcs	.-14     	; 0x2be0 <strrev+0x10>
    2bee:	08 95       	ret

00002bf0 <__udivmodhi4>:
    2bf0:	aa 1b       	sub	r26, r26
    2bf2:	bb 1b       	sub	r27, r27
    2bf4:	51 e1       	ldi	r21, 0x11	; 17
    2bf6:	07 c0       	rjmp	.+14     	; 0x2c06 <__udivmodhi4_ep>

00002bf8 <__udivmodhi4_loop>:
    2bf8:	aa 1f       	adc	r26, r26
    2bfa:	bb 1f       	adc	r27, r27
    2bfc:	a6 17       	cp	r26, r22
    2bfe:	b7 07       	cpc	r27, r23
    2c00:	10 f0       	brcs	.+4      	; 0x2c06 <__udivmodhi4_ep>
    2c02:	a6 1b       	sub	r26, r22
    2c04:	b7 0b       	sbc	r27, r23

00002c06 <__udivmodhi4_ep>:
    2c06:	88 1f       	adc	r24, r24
    2c08:	99 1f       	adc	r25, r25
    2c0a:	5a 95       	dec	r21
    2c0c:	a9 f7       	brne	.-22     	; 0x2bf8 <__udivmodhi4_loop>
    2c0e:	80 95       	com	r24
    2c10:	90 95       	com	r25
    2c12:	bc 01       	movw	r22, r24
    2c14:	cd 01       	movw	r24, r26
    2c16:	08 95       	ret

00002c18 <_exit>:
    2c18:	f8 94       	cli

00002c1a <__stop_program>:
    2c1a:	ff cf       	rjmp	.-2      	; 0x2c1a <__stop_program>
